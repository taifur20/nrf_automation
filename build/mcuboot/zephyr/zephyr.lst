
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	88 13 06 20 e5 3e 00 00 95 b4 00 00 b9 3e 00 00     ... .>.......>..
  10:	b9 3e 00 00 b9 3e 00 00 b9 3e 00 00 b9 3e 00 00     .>...>...>...>..
	...
  2c:	29 3c 00 00 b9 3e 00 00 00 00 00 00 d1 3b 00 00     )<...>.......;..
  3c:	b9 3e 00 00                                         .>..

00000040 <_irq_vector_table>:
  40:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  50:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  60:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  70:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  80:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  90:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  a0:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  b0:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  c0:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  d0:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  e0:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
  f0:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
 100:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
 110:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
 120:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
 130:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
 140:	a9 3c 00 00 a9 3c 00 00 a9 3c 00 00 a9 3c 00 00     .<...<...<...<..
 150:	a9 3c 00 00                                         .<..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     18c:	4607      	mov	r7, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e09      	ldr	r6, [sp, #36]	; 0x24
     194:	4615      	mov	r5, r2
     196:	463c      	mov	r4, r7
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c5 	bne.w	32a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x6e>
     1a0:	4282      	cmp	r2, r0
     1a2:	fab2 f782 	clz	r7, r2
     1a6:	d946      	bls.n	236 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x36>
     1a8:	b14f      	cbz	r7, 1be <__udivmoddi4+0x36>
     1aa:	f1c7 0e20 	rsb	lr, r7, #32
     1ae:	fa00 f307 	lsl.w	r3, r0, r7
     1b2:	40bd      	lsls	r5, r7
     1b4:	fa24 fe0e 	lsr.w	lr, r4, lr
     1b8:	40bc      	lsls	r4, r7
     1ba:	ea4e 0c03 	orr.w	ip, lr, r3
     1be:	ea4f 4815 	mov.w	r8, r5, lsr #16
     1c2:	fa1f fe85 	uxth.w	lr, r5
     1c6:	0c22      	lsrs	r2, r4, #16
     1c8:	fbbc f9f8 	udiv	r9, ip, r8
     1cc:	fb08 c319 	mls	r3, r8, r9, ip
     1d0:	fb09 fa0e 	mul.w	sl, r9, lr
     1d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     1d8:	459a      	cmp	sl, r3
     1da:	d928      	bls.n	22e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2e>
     1dc:	18eb      	adds	r3, r5, r3
     1de:	f109 30ff 	add.w	r0, r9, #4294967295
     1e2:	d204      	bcs.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     1e4:	459a      	cmp	sl, r3
     1e6:	d902      	bls.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     1e8:	f1a9 0002 	sub.w	r0, r9, #2
     1ec:	442b      	add	r3, r5
     1ee:	eba3 030a 	sub.w	r3, r3, sl
     1f2:	b2a4      	uxth	r4, r4
     1f4:	fbb3 f2f8 	udiv	r2, r3, r8
     1f8:	fb08 3312 	mls	r3, r8, r2, r3
     1fc:	fb02 fe0e 	mul.w	lr, r2, lr
     200:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     204:	45a6      	cmp	lr, r4
     206:	d914      	bls.n	232 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x32>
     208:	192c      	adds	r4, r5, r4
     20a:	f102 33ff 	add.w	r3, r2, #4294967295
     20e:	d203      	bcs.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     210:	45a6      	cmp	lr, r4
     212:	d901      	bls.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     214:	1e93      	subs	r3, r2, #2
     216:	442c      	add	r4, r5
     218:	eba4 040e 	sub.w	r4, r4, lr
     21c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     220:	b11e      	cbz	r6, 22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
     222:	40fc      	lsrs	r4, r7
     224:	2300      	movs	r3, #0
     226:	6034      	str	r4, [r6, #0]
     228:	6073      	str	r3, [r6, #4]
     22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22e:	4648      	mov	r0, r9
     230:	e7dd      	b.n	1ee <CONFIG_SRAM_SIZE+0x2e>
     232:	4613      	mov	r3, r2
     234:	e7f0      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     236:	b902      	cbnz	r2, 23a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3a>
     238:	deff      	udf	#255	; 0xff
     23a:	bb87      	cbnz	r7, 29e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1e>
     23c:	1a83      	subs	r3, r0, r2
     23e:	2101      	movs	r1, #1
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2aa      	uxth	r2, r5
     246:	0c20      	lsrs	r0, r4, #16
     248:	fbb3 fcfe 	udiv	ip, r3, lr
     24c:	fb0e 331c 	mls	r3, lr, ip, r3
     250:	fb0c f802 	mul.w	r8, ip, r2
     254:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     258:	4598      	cmp	r8, r3
     25a:	d962      	bls.n	322 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x66>
     25c:	18eb      	adds	r3, r5, r3
     25e:	f10c 30ff 	add.w	r0, ip, #4294967295
     262:	d204      	bcs.n	26e <__data_size+0x2a>
     264:	4598      	cmp	r8, r3
     266:	d902      	bls.n	26e <__data_size+0x2a>
     268:	f1ac 0002 	sub.w	r0, ip, #2
     26c:	442b      	add	r3, r5
     26e:	eba3 0308 	sub.w	r3, r3, r8
     272:	b2a4      	uxth	r4, r4
     274:	fbb3 fcfe 	udiv	ip, r3, lr
     278:	fb0e 331c 	mls	r3, lr, ip, r3
     27c:	fb0c f202 	mul.w	r2, ip, r2
     280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     284:	42a2      	cmp	r2, r4
     286:	d94e      	bls.n	326 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x6a>
     288:	192c      	adds	r4, r5, r4
     28a:	f10c 33ff 	add.w	r3, ip, #4294967295
     28e:	d204      	bcs.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     290:	42a2      	cmp	r2, r4
     292:	d902      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     294:	f1ac 0302 	sub.w	r3, ip, #2
     298:	442c      	add	r4, r5
     29a:	1aa4      	subs	r4, r4, r2
     29c:	e7be      	b.n	21c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c>
     29e:	f1c7 0c20 	rsb	ip, r7, #32
     2a2:	40bd      	lsls	r5, r7
     2a4:	fa00 f307 	lsl.w	r3, r0, r7
     2a8:	fa20 f80c 	lsr.w	r8, r0, ip
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	fa24 fc0c 	lsr.w	ip, r4, ip
     2b4:	40bc      	lsls	r4, r7
     2b6:	ea4c 0203 	orr.w	r2, ip, r3
     2ba:	b2ab      	uxth	r3, r5
     2bc:	fbb8 fcfe 	udiv	ip, r8, lr
     2c0:	0c11      	lsrs	r1, r2, #16
     2c2:	fb0e 801c 	mls	r0, lr, ip, r8
     2c6:	fb0c f903 	mul.w	r9, ip, r3
     2ca:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     2ce:	4581      	cmp	r9, r0
     2d0:	d923      	bls.n	31a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x5e>
     2d2:	1828      	adds	r0, r5, r0
     2d4:	f10c 31ff 	add.w	r1, ip, #4294967295
     2d8:	d204      	bcs.n	2e4 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x28>
     2da:	4581      	cmp	r9, r0
     2dc:	d902      	bls.n	2e4 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x28>
     2de:	f1ac 0102 	sub.w	r1, ip, #2
     2e2:	4428      	add	r0, r5
     2e4:	eba0 0009 	sub.w	r0, r0, r9
     2e8:	b292      	uxth	r2, r2
     2ea:	fbb0 fcfe 	udiv	ip, r0, lr
     2ee:	fb0e 001c 	mls	r0, lr, ip, r0
     2f2:	fb0c f803 	mul.w	r8, ip, r3
     2f6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2fa:	4598      	cmp	r8, r3
     2fc:	d90f      	bls.n	31e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x62>
     2fe:	18eb      	adds	r3, r5, r3
     300:	f10c 32ff 	add.w	r2, ip, #4294967295
     304:	d204      	bcs.n	310 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x54>
     306:	4598      	cmp	r8, r3
     308:	d902      	bls.n	310 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x54>
     30a:	f1ac 0202 	sub.w	r2, ip, #2
     30e:	442b      	add	r3, r5
     310:	eba3 0308 	sub.w	r3, r3, r8
     314:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     318:	e792      	b.n	240 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x40>
     31a:	4661      	mov	r1, ip
     31c:	e7e2      	b.n	2e4 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x28>
     31e:	4662      	mov	r2, ip
     320:	e7f6      	b.n	310 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x54>
     322:	4660      	mov	r0, ip
     324:	e7a3      	b.n	26e <__data_size+0x2a>
     326:	4663      	mov	r3, ip
     328:	e7b7      	b.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     32a:	4283      	cmp	r3, r0
     32c:	d905      	bls.n	33a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x7e>
     32e:	b10e      	cbz	r6, 334 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x78>
     330:	e9c6 7000 	strd	r7, r0, [r6]
     334:	2100      	movs	r1, #0
     336:	4608      	mov	r0, r1
     338:	e777      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
     33a:	fab3 f183 	clz	r1, r3
     33e:	b981      	cbnz	r1, 362 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xa6>
     340:	4283      	cmp	r3, r0
     342:	d301      	bcc.n	348 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x8c>
     344:	42ba      	cmp	r2, r7
     346:	d80a      	bhi.n	35e <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xa2>
     348:	1abc      	subs	r4, r7, r2
     34a:	eb60 0303 	sbc.w	r3, r0, r3
     34e:	2001      	movs	r0, #1
     350:	469c      	mov	ip, r3
     352:	2e00      	cmp	r6, #0
     354:	d067      	beq.n	426 <CONFIG_FLASH_SIZE+0x26>
     356:	e9c6 4c00 	strd	r4, ip, [r6]
     35a:	2100      	movs	r1, #0
     35c:	e765      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
     35e:	4608      	mov	r0, r1
     360:	e7f7      	b.n	352 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x96>
     362:	f1c1 0c20 	rsb	ip, r1, #32
     366:	408b      	lsls	r3, r1
     368:	fa02 f501 	lsl.w	r5, r2, r1
     36c:	fa22 f40c 	lsr.w	r4, r2, ip
     370:	fa20 fb0c 	lsr.w	fp, r0, ip
     374:	fa27 f20c 	lsr.w	r2, r7, ip
     378:	408f      	lsls	r7, r1
     37a:	431c      	orrs	r4, r3
     37c:	fa00 f301 	lsl.w	r3, r0, r1
     380:	ea4f 4914 	mov.w	r9, r4, lsr #16
     384:	4313      	orrs	r3, r2
     386:	fa1f fe84 	uxth.w	lr, r4
     38a:	0c1a      	lsrs	r2, r3, #16
     38c:	fbbb f8f9 	udiv	r8, fp, r9
     390:	fb09 bb18 	mls	fp, r9, r8, fp
     394:	fb08 fa0e 	mul.w	sl, r8, lr
     398:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     39c:	4592      	cmp	sl, r2
     39e:	d93e      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     3a0:	18a2      	adds	r2, r4, r2
     3a2:	f108 30ff 	add.w	r0, r8, #4294967295
     3a6:	d204      	bcs.n	3b2 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf6>
     3a8:	4592      	cmp	sl, r2
     3aa:	d902      	bls.n	3b2 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf6>
     3ac:	f1a8 0002 	sub.w	r0, r8, #2
     3b0:	4422      	add	r2, r4
     3b2:	eba2 020a 	sub.w	r2, r2, sl
     3b6:	b29b      	uxth	r3, r3
     3b8:	fbb2 f8f9 	udiv	r8, r2, r9
     3bc:	fb09 2218 	mls	r2, r9, r8, r2
     3c0:	fb08 fe0e 	mul.w	lr, r8, lr
     3c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     3c8:	4596      	cmp	lr, r2
     3ca:	d92a      	bls.n	422 <CONFIG_FLASH_SIZE+0x22>
     3cc:	18a2      	adds	r2, r4, r2
     3ce:	f108 33ff 	add.w	r3, r8, #4294967295
     3d2:	d204      	bcs.n	3de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x122>
     3d4:	4596      	cmp	lr, r2
     3d6:	d902      	bls.n	3de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x122>
     3d8:	f1a8 0302 	sub.w	r3, r8, #2
     3dc:	4422      	add	r2, r4
     3de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3e2:	eba2 020e 	sub.w	r2, r2, lr
     3e6:	fba0 9305 	umull	r9, r3, r0, r5
     3ea:	429a      	cmp	r2, r3
     3ec:	46ce      	mov	lr, r9
     3ee:	4698      	mov	r8, r3
     3f0:	d302      	bcc.n	3f8 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x13c>
     3f2:	d106      	bne.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f4:	454f      	cmp	r7, r9
     3f6:	d204      	bcs.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f8:	3801      	subs	r0, #1
     3fa:	ebb9 0e05 	subs.w	lr, r9, r5
     3fe:	eb63 0804 	sbc.w	r8, r3, r4
     402:	b186      	cbz	r6, 426 <CONFIG_FLASH_SIZE+0x26>
     404:	ebb7 030e 	subs.w	r3, r7, lr
     408:	eb62 0708 	sbc.w	r7, r2, r8
     40c:	fa07 fc0c 	lsl.w	ip, r7, ip
     410:	40cb      	lsrs	r3, r1
     412:	40cf      	lsrs	r7, r1
     414:	ea4c 0303 	orr.w	r3, ip, r3
     418:	e9c6 3700 	strd	r3, r7, [r6]
     41c:	e79d      	b.n	35a <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x9e>
     41e:	4640      	mov	r0, r8
     420:	e7c7      	b.n	3b2 <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0xf6>
     422:	4643      	mov	r3, r8
     424:	e7db      	b.n	3de <CONFIG_USB_NRFX_ATTACHED_EVENT_DELAY+0x122>
     426:	4631      	mov	r1, r6
     428:	e6ff      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
	...

0000042c <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     42e:	4b41      	ldr	r3, [pc, #260]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     430:	4a41      	ldr	r2, [pc, #260]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     432:	b085      	sub	sp, #20
     434:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     438:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     43c:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     440:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     444:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     448:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     44c:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     450:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     454:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     458:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     45c:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     460:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     464:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     468:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     46c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     470:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     474:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     478:	f000 f882 	bl	580 <os_heap_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     47c:	4c2f      	ldr	r4, [pc, #188]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     47e:	4620      	mov	r0, r4
     480:	f00d fa4e 	bl	d920 <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     484:	b300      	cbz	r0, 4c8 <FIH_LABEL_FIH_CALL_START_616>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     486:	6925      	ldr	r5, [r4, #16]
	const struct gpio_driver_api *api =
     488:	68a6      	ldr	r6, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     48a:	682b      	ldr	r3, [r5, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     48c:	210d      	movs	r1, #13
		data->invert |= (gpio_port_pins_t)BIT(pin);
     48e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     492:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
     494:	4620      	mov	r0, r4
     496:	6833      	ldr	r3, [r6, #0]
     498:	4a29      	ldr	r2, [pc, #164]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     49a:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     49c:	4620      	mov	r0, r4
     49e:	6873      	ldr	r3, [r6, #4]
     4a0:	a901      	add	r1, sp, #4
     4a2:	4798      	blx	r3
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     4a4:	b920      	cbnz	r0, 4b0 <main+0x84>
		*value ^= data->invert;
     4a6:	682a      	ldr	r2, [r5, #0]
     4a8:	9b01      	ldr	r3, [sp, #4]
     4aa:	4053      	eors	r3, r2
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin() &&
     4ac:	049a      	lsls	r2, r3, #18
     4ae:	d50b      	bpl.n	4c8 <FIH_LABEL_FIH_CALL_START_616>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE uint32_t nrf_reset_resetreas_get(NRF_RESET_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     4b8:	b10b      	cbz	r3, 4be <main+0x92>
     4ba:	07db      	lsls	r3, r3, #31
     4bc:	d504      	bpl.n	4c8 <FIH_LABEL_FIH_CALL_START_616>
#endif

        mcuboot_status_change(MCUBOOT_STATUS_SERIAL_DFU_ENTERED);

        BOOT_LOG_INF("Enter the serial recovery mode");
        rc = boot_console_init();
     4be:	f002 fe31 	bl	3124 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     4c2:	4820      	ldr	r0, [pc, #128]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     4c4:	f003 f95c 	bl	3780 <boot_serial_start>

000004c8 <FIH_LABEL_FIH_CALL_START_616>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4c8:	a801      	add	r0, sp, #4
     4ca:	f000 fec3 	bl	1254 <boot_go>

000004ce <FIH_LABEL_FIH_CALL_END_629>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4ce:	4b1e      	ldr	r3, [pc, #120]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	4283      	cmp	r3, r0
     4d4:	d000      	beq.n	4d8 <FIH_LABEL_FIH_CALL_END_629+0xa>
        BOOT_LOG_ERR("Unable to find bootable image");

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     4d6:	e7fe      	b.n	4d6 <FIH_LABEL_FIH_CALL_END_629+0x8>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4dc:	2000      	movs	r0, #0
     4de:	f005 fce9 	bl	5eb4 <fprotect_area>

    if (rc != 0) {
     4e2:	4604      	mov	r4, r0
     4e4:	b100      	cbz	r0, 4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     4e6:	e7fe      	b.n	4e6 <FIH_LABEL_FIH_CALL_END_629+0x18>
            ;
    }

#endif /* USE_PARTITION_MANAGER && CONFIG_FPROTECT */
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
     4e8:	f005 fd6e 	bl	5fc8 <pcd_lock_ram>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4ec:	4669      	mov	r1, sp
     4ee:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4f2:	f009 fc8d 	bl	9e10 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4f6:	9b00      	ldr	r3, [sp, #0]
     4f8:	9d03      	ldr	r5, [sp, #12]
     4fa:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     4fc:	9b01      	ldr	r3, [sp, #4]
     4fe:	891e      	ldrh	r6, [r3, #8]
    usb_disable();
     500:	f001 fe32 	bl	2168 <usb_disable>
                                     rsp->br_image_off +
     504:	19af      	adds	r7, r5, r6
    nrf_cleanup_peripheral();
     506:	f000 fed1 	bl	12ac <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     50a:	f000 feb3 	bl	1274 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     50e:	f003 fd2b 	bl	3f68 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     512:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     516:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     51a:	59ab      	ldr	r3, [r5, r6]
     51c:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     520:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     524:	f3bf 8f6f 	isb	sy
     528:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     530:	e7fe      	b.n	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     532:	bf00      	nop
     534:	6e524635 	.word	0x6e524635
     538:	50018000 	.word	0x50018000
     53c:	0000e020 	.word	0x0000e020
     540:	00010011 	.word	0x00010011
     544:	0000e348 	.word	0x0000e348
     548:	2000a718 	.word	0x2000a718

0000054c <flash_area_id_from_direct_image>:
}

#if defined(CONFIG_MCUBOOT_SERIAL_DIRECT_IMAGE_UPLOAD)
int flash_area_id_from_direct_image(int image_id)
{
    switch (image_id) {
     54c:	2803      	cmp	r0, #3
     54e:	bf9a      	itte	ls
     550:	4b02      	ldrls	r3, [pc, #8]	; (55c <flash_area_id_from_direct_image+0x10>)
     552:	5618      	ldrsbls	r0, [r3, r0]
{
     554:	f06f 0015 	mvnhi.w	r0, #21
    case 4:
        return FLASH_AREA_ID(image_3);
#endif
    }
    return -EINVAL;
}
     558:	4770      	bx	lr
     55a:	bf00      	nop
     55c:	0000e89e 	.word	0x0000e89e

00000560 <flash_area_sector_from_off>:
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     562:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     564:	4601      	mov	r1, r0
     566:	aa01      	add	r2, sp, #4
     568:	4804      	ldr	r0, [pc, #16]	; (57c <flash_area_sector_from_off+0x1c>)
     56a:	f00b fa9a 	bl	baa2 <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     56e:	b918      	cbnz	r0, 578 <flash_area_sector_from_off+0x18>
        return rc;
    }

    sector->fs_off = page.start_offset;
     570:	9b01      	ldr	r3, [sp, #4]
     572:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     574:	9b02      	ldr	r3, [sp, #8]
     576:	6063      	str	r3, [r4, #4]

    return rc;
}
     578:	b004      	add	sp, #16
     57a:	bd10      	pop	{r4, pc}
     57c:	0000e068 	.word	0x0000e068

00000580 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     580:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     584:	4801      	ldr	r0, [pc, #4]	; (58c <os_heap_init+0xc>)
     586:	f005 bf97 	b.w	64b8 <mbedtls_memory_buffer_alloc_init>
     58a:	bf00      	nop
     58c:	2001c56a 	.word	0x2001c56a

00000590 <bs_peruser_system_specific>:
#endif
#endif /*MCUBOOT_MGMT_CUSTOM_IMG_LIST*/

int bs_peruser_system_specific(const struct nmgr_hdr *hdr, const char *buffer,
                               int len, zcbor_state_t *cs)
{
     590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     592:	461c      	mov	r4, r3
    int mgmt_rc = MGMT_ERR_ENOTSUP;

    if (hdr->nh_group == ZEPHYR_MGMT_GRP_BASE) {
     594:	8883      	ldrh	r3, [r0, #4]
     596:	4e20      	ldr	r6, [pc, #128]	; (618 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x3c>)
     598:	2b3f      	cmp	r3, #63	; 0x3f
     59a:	d12f      	bne.n	5fc <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x20>
        if (hdr->nh_op == NMGR_OP_WRITE) {
     59c:	7803      	ldrb	r3, [r0, #0]
     59e:	2b02      	cmp	r3, #2
     5a0:	d12c      	bne.n	5fc <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x20>
#ifdef CONFIG_BOOT_MGMT_CUSTOM_STORAGE_ERASE
            if (hdr->nh_id == ZEPHYR_MGMT_GRP_BASIC_CMD_ERASE_STORAGE) {
     5a2:	79c5      	ldrb	r5, [r0, #7]
     5a4:	bb55      	cbnz	r5, 5fc <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x20>
    rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
     5a6:	200d      	movs	r0, #13
     5a8:	a901      	add	r1, sp, #4
     5aa:	f002 fbe5 	bl	2d78 <flash_area_open>
    if (rc < 0) {
     5ae:	2800      	cmp	r0, #0
     5b0:	db22      	blt.n	5f8 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x1c>
        rc = flash_area_erase(fa, 0, FLASH_AREA_SIZE(storage));
     5b2:	4629      	mov	r1, r5
     5b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     5b8:	9801      	ldr	r0, [sp, #4]
     5ba:	f00a fc59 	bl	ae70 <flash_area_erase>
     5be:	4605      	mov	r5, r0
        flash_area_close(fa);
     5c0:	9801      	ldr	r0, [sp, #4]
     5c2:	f00a fc2a 	bl	ae1a <flash_area_close>
    if (rc == 0) {
     5c6:	3d00      	subs	r5, #0
     5c8:	bf18      	it	ne
     5ca:	2501      	movne	r5, #1
    zcbor_map_start_encode(cs, 10);
     5cc:	210a      	movs	r1, #10
     5ce:	4620      	mov	r0, r4
     5d0:	f00a feae 	bl	b330 <zcbor_map_start_encode>
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
     5d4:	2302      	movs	r3, #2
     5d6:	a902      	add	r1, sp, #8
     5d8:	4620      	mov	r0, r4
     5da:	9602      	str	r6, [sp, #8]
     5dc:	9303      	str	r3, [sp, #12]
     5de:	f00a fe95 	bl	b30c <zcbor_tstr_encode>
    zcbor_uint32_put(cs, rc);
     5e2:	4629      	mov	r1, r5
    }

    if (mgmt_rc == MGMT_ERR_ENOTSUP) {
        zcbor_map_start_encode(cs, 10);
        zcbor_tstr_put_lit(cs, "rc");
        zcbor_uint32_put(cs, mgmt_rc);
     5e4:	4620      	mov	r0, r4
     5e6:	f00a fe8d 	bl	b304 <zcbor_uint32_put>
        zcbor_map_end_encode(cs, 10);
     5ea:	210a      	movs	r1, #10
     5ec:	4620      	mov	r0, r4
     5ee:	f00a febd 	bl	b36c <zcbor_map_end_encode>
    }

    return MGMT_ERR_OK;
}
     5f2:	2000      	movs	r0, #0
     5f4:	b004      	add	sp, #16
     5f6:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EUNKNOWN;
     5f8:	2501      	movs	r5, #1
     5fa:	e7e7      	b.n	5cc <bs_peruser_system_specific+0x3c>
        zcbor_map_start_encode(cs, 10);
     5fc:	210a      	movs	r1, #10
     5fe:	4620      	mov	r0, r4
     600:	f00a fe96 	bl	b330 <zcbor_map_start_encode>
     604:	2302      	movs	r3, #2
     606:	a902      	add	r1, sp, #8
     608:	4620      	mov	r0, r4
     60a:	9602      	str	r6, [sp, #8]
     60c:	9303      	str	r3, [sp, #12]
     60e:	f00a fe7d 	bl	b30c <zcbor_tstr_encode>
        zcbor_uint32_put(cs, mgmt_rc);
     612:	2108      	movs	r1, #8
     614:	e7e6      	b.n	5e4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x8>
     616:	bf00      	nop
     618:	0000e8a2 	.word	0x0000e8a2

0000061c <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     620:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 810 <CONFIG_BOOT_MAX_IMG_SECTORS+0x10>
{
     624:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     626:	a838      	add	r0, sp, #224	; 0xe0
     628:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     62c:	4617      	mov	r7, r2
     62e:	461d      	mov	r5, r3
    fih_int valid_signature = FIH_FAILURE;
     630:	f8da 6000 	ldr.w	r6, [sl]
     634:	f00c feb9 	bl	d3aa <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     638:	2100      	movs	r1, #0
     63a:	a838      	add	r0, sp, #224	; 0xe0
     63c:	f006 f842 	bl	66c4 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     640:	b13c      	cbz	r4, 652 <bootutil_img_validate+0x36>
     642:	f1b8 0f00 	cmp.w	r8, #0
     646:	dd04      	ble.n	652 <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     648:	4642      	mov	r2, r8
     64a:	4621      	mov	r1, r4
     64c:	a838      	add	r0, sp, #224	; 0xe0
     64e:	f00c feb0 	bl	d3b2 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     652:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     656:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     658:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     65c:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     65e:	68fb      	ldr	r3, [r7, #12]
     660:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     662:	45c8      	cmp	r8, r9
     664:	d84b      	bhi.n	6fe <FIH_LABEL_FIH_CALL_END_311+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     666:	a90d      	add	r1, sp, #52	; 0x34
     668:	a838      	add	r0, sp, #224	; 0xe0
     66a:	f00c fedf 	bl	d42c <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     66e:	9b86      	ldr	r3, [sp, #536]	; 0x218
     670:	b123      	cbz	r3, 67c <bootutil_img_validate+0x60>
        memcpy(out_hash, hash, 32);
     672:	2220      	movs	r2, #32
     674:	4618      	mov	r0, r3
     676:	a90d      	add	r1, sp, #52	; 0x34
     678:	f00a ff47 	bl	b50a <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     67c:	2300      	movs	r3, #0
     67e:	462a      	mov	r2, r5
     680:	9300      	str	r3, [sp, #0]
     682:	4639      	mov	r1, r7
     684:	f64f 73ff 	movw	r3, #65535	; 0xffff
     688:	a807      	add	r0, sp, #28
     68a:	f009 fbde 	bl	9e4a <bootutil_tlv_iter_begin>
    if (rc) {
     68e:	4604      	mov	r4, r0
     690:	2800      	cmp	r0, #0
     692:	f040 80b6 	bne.w	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
    int sha256_valid = 0;
     696:	4680      	mov	r8, r0
    int key_id = -1;
     698:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     69c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 814 <CONFIG_BOOT_MAX_IMG_SECTORS+0x14>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     6a0:	f10d 0316 	add.w	r3, sp, #22
     6a4:	aa05      	add	r2, sp, #20
     6a6:	a906      	add	r1, sp, #24
     6a8:	a807      	add	r0, sp, #28
     6aa:	f009 fc1a 	bl	9ee2 <bootutil_tlv_iter_next>
        if (rc < 0) {
     6ae:	1e04      	subs	r4, r0, #0
     6b0:	f2c0 80a7 	blt.w	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
        } else if (rc > 0) {
     6b4:	f040 8098 	bne.w	7e8 <FIH_LABEL_FIH_CALL_END_645+0x6>
        if (type == IMAGE_TLV_SHA256) {
     6b8:	f8bd b016 	ldrh.w	fp, [sp, #22]
     6bc:	f1bb 0f10 	cmp.w	fp, #16
     6c0:	d134      	bne.n	72c <FIH_LABEL_FIH_CALL_END_311+0x3e>
            if (len != sizeof(hash)) {
     6c2:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     6c6:	f1b8 0f20 	cmp.w	r8, #32
     6ca:	f040 8098 	bne.w	7fe <FIH_LABEL_FIH_CALL_END_645+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6ce:	4643      	mov	r3, r8
     6d0:	4628      	mov	r0, r5
     6d2:	9906      	ldr	r1, [sp, #24]
     6d4:	aa38      	add	r2, sp, #224	; 0xe0
     6d6:	f00a fba1 	bl	ae1c <flash_area_read>
            if (rc) {
     6da:	4604      	mov	r4, r0
     6dc:	2800      	cmp	r0, #0
     6de:	f040 8090 	bne.w	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>

000006e2 <FIH_LABEL_FIH_CALL_START_292>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6e2:	4642      	mov	r2, r8
     6e4:	a938      	add	r1, sp, #224	; 0xe0
     6e6:	a80d      	add	r0, sp, #52	; 0x34
     6e8:	f009 fc46 	bl	9f78 <boot_fih_memequal>
     6ec:	4604      	mov	r4, r0

000006ee <FIH_LABEL_FIH_CALL_END_311>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     6ee:	4b4a      	ldr	r3, [pc, #296]	; (818 <CONFIG_BOOT_MAX_IMG_SECTORS+0x18>)
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	4283      	cmp	r3, r0
     6f4:	f040 8085 	bne.w	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
            sha256_valid = 1;
     6f8:	f04f 0801 	mov.w	r8, #1
     6fc:	e7d0      	b.n	6a0 <bootutil_img_validate+0x84>
        blk_sz = size - off;
     6fe:	f8dd b20c 	ldr.w	fp, [sp, #524]	; 0x20c
     702:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     706:	459b      	cmp	fp, r3
     708:	bf28      	it	cs
     70a:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     70c:	4649      	mov	r1, r9
     70e:	465b      	mov	r3, fp
     710:	4628      	mov	r0, r5
     712:	9a82      	ldr	r2, [sp, #520]	; 0x208
     714:	f00a fb82 	bl	ae1c <flash_area_read>
        if (rc) {
     718:	4604      	mov	r4, r0
     71a:	2800      	cmp	r0, #0
     71c:	d171      	bne.n	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     71e:	465a      	mov	r2, fp
     720:	9982      	ldr	r1, [sp, #520]	; 0x208
     722:	a838      	add	r0, sp, #224	; 0xe0
     724:	f00c fe45 	bl	d3b2 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     728:	44d9      	add	r9, fp
     72a:	e79a      	b.n	662 <bootutil_img_validate+0x46>
        } else if (type == IMAGE_TLV_KEYHASH) {
     72c:	f1bb 0f01 	cmp.w	fp, #1
     730:	d136      	bne.n	7a0 <FIH_LABEL_FIH_CALL_END_311+0xb2>
            if (len > 32) {
     732:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     736:	2b20      	cmp	r3, #32
     738:	d861      	bhi.n	7fe <FIH_LABEL_FIH_CALL_END_645+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     73a:	4628      	mov	r0, r5
     73c:	9906      	ldr	r1, [sp, #24]
     73e:	aa38      	add	r2, sp, #224	; 0xe0
     740:	f00a fb6c 	bl	ae1c <flash_area_read>
            if (rc) {
     744:	4604      	mov	r4, r0
     746:	2800      	cmp	r0, #0
     748:	d15b      	bne.n	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
            key_id = bootutil_find_key(buf, len);
     74a:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     74e:	f1bb 0f20 	cmp.w	fp, #32
     752:	d903      	bls.n	75c <FIH_LABEL_FIH_CALL_END_311+0x6e>
        return -1;
     754:	f04f 34ff 	mov.w	r4, #4294967295
            key_id = bootutil_find_key(buf, len);
     758:	4627      	mov	r7, r4
     75a:	e7a1      	b.n	6a0 <bootutil_img_validate+0x84>
    for (i = 0; i < bootutil_key_cnt; i++) {
     75c:	f8d9 3000 	ldr.w	r3, [r9]
     760:	4f2e      	ldr	r7, [pc, #184]	; (81c <CONFIG_BOOT_MAX_IMG_SECTORS+0x1c>)
     762:	9303      	str	r3, [sp, #12]
     764:	9b03      	ldr	r3, [sp, #12]
     766:	429c      	cmp	r4, r3
     768:	daf4      	bge.n	754 <FIH_LABEL_FIH_CALL_END_311+0x66>
    mbedtls_sha256_init(ctx);
     76a:	a81d      	add	r0, sp, #116	; 0x74
     76c:	f00c fe1d 	bl	d3aa <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     770:	2100      	movs	r1, #0
     772:	a81d      	add	r0, sp, #116	; 0x74
     774:	f005 ffa6 	bl	66c4 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     778:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     77a:	a81d      	add	r0, sp, #116	; 0x74
     77c:	6812      	ldr	r2, [r2, #0]
     77e:	f857 1b08 	ldr.w	r1, [r7], #8
     782:	f00c fe16 	bl	d3b2 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     786:	a915      	add	r1, sp, #84	; 0x54
     788:	a81d      	add	r0, sp, #116	; 0x74
     78a:	f00c fe4f 	bl	d42c <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     78e:	465a      	mov	r2, fp
     790:	a938      	add	r1, sp, #224	; 0xe0
     792:	a815      	add	r0, sp, #84	; 0x54
     794:	f00a fe90 	bl	b4b8 <memcmp>
     798:	2800      	cmp	r0, #0
     79a:	d0dd      	beq.n	758 <FIH_LABEL_FIH_CALL_END_311+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     79c:	3401      	adds	r4, #1
     79e:	e7e1      	b.n	764 <FIH_LABEL_FIH_CALL_END_311+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     7a0:	f1bb 0f20 	cmp.w	fp, #32
     7a4:	f47f af7c 	bne.w	6a0 <bootutil_img_validate+0x84>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     7a8:	1c7b      	adds	r3, r7, #1
     7aa:	f43f af79 	beq.w	6a0 <bootutil_img_validate+0x84>
     7ae:	f8d9 3000 	ldr.w	r3, [r9]
     7b2:	42bb      	cmp	r3, r7
     7b4:	dd15      	ble.n	7e2 <FIH_LABEL_FIH_CALL_END_645>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     7b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     7be:	d11e      	bne.n	7fe <FIH_LABEL_FIH_CALL_END_645+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7c0:	4628      	mov	r0, r5
     7c2:	9906      	ldr	r1, [sp, #24]
     7c4:	aa38      	add	r2, sp, #224	; 0xe0
     7c6:	f00a fb29 	bl	ae1c <flash_area_read>
            if (rc) {
     7ca:	4604      	mov	r4, r0
     7cc:	b9c8      	cbnz	r0, 802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>

000007ce <FIH_LABEL_FIH_CALL_START_623>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     7ce:	b2ff      	uxtb	r7, r7
     7d0:	4659      	mov	r1, fp
     7d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7d6:	9700      	str	r7, [sp, #0]
     7d8:	aa38      	add	r2, sp, #224	; 0xe0
     7da:	a80d      	add	r0, sp, #52	; 0x34
     7dc:	f000 f820 	bl	820 <bootutil_verify_sig>
     7e0:	4606      	mov	r6, r0

000007e2 <FIH_LABEL_FIH_CALL_END_645>:
                key_id = -1;
     7e2:	f04f 37ff 	mov.w	r7, #4294967295
     7e6:	e75b      	b.n	6a0 <bootutil_img_validate+0x84>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     7e8:	f1b8 0f00 	cmp.w	r8, #0
     7ec:	d00d      	beq.n	80a <CONFIG_BOOT_MAX_IMG_SECTORS+0xa>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     7ee:	4b0a      	ldr	r3, [pc, #40]	; (818 <CONFIG_BOOT_MAX_IMG_SECTORS+0x18>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     7f0:	681b      	ldr	r3, [r3, #0]
     7f2:	42b3      	cmp	r3, r6
     7f4:	d001      	beq.n	7fa <FIH_LABEL_FIH_CALL_END_645+0x18>
        return FIH_FAILURE;
     7f6:	f8da 6000 	ldr.w	r6, [sl]
                rc = -1;
     7fa:	4634      	mov	r4, r6
     7fc:	e001      	b.n	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
     7fe:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     802:	4620      	mov	r0, r4
     804:	b079      	add	sp, #484	; 0x1e4
     806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     80a:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     80c:	e7f9      	b.n	802 <CONFIG_BOOT_MAX_IMG_SECTORS+0x2>
     80e:	bf00      	nop
     810:	2000a000 	.word	0x2000a000
     814:	0000e350 	.word	0x0000e350
     818:	2000a718 	.word	0x2000a718
     81c:	0000e354 	.word	0x0000e354

00000820 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     824:	4698      	mov	r8, r3
     826:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     82a:	4b6b      	ldr	r3, [pc, #428]	; (9d8 <FIH_LABEL_FIH_CALL_END_675+0x4>)
{
     82c:	4607      	mov	r7, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     82e:	a827      	add	r0, sp, #156	; 0x9c
{
     830:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
     834:	468a      	mov	sl, r1
     836:	4691      	mov	r9, r2
    fih_int fih_rc = FIH_FAILURE;
     838:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx);
     83a:	f00c fd73 	bl	d324 <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     83e:	4b67      	ldr	r3, [pc, #412]	; (9dc <FIH_LABEL_FIH_CALL_END_675+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     840:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     842:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     846:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     84a:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     84c:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     84e:	6819      	ldr	r1, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     850:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     852:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     854:	2330      	movs	r3, #48	; 0x30
     856:	4621      	mov	r1, r4
     858:	f00b faee 	bl	be38 <mbedtls_asn1_get_tag>
     85c:	bb68      	cbnz	r0, 8ba <bootutil_verify_sig+0x9a>
    if (*p + len != end) {
     85e:	9b02      	ldr	r3, [sp, #8]
     860:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     862:	4413      	add	r3, r2
     864:	429c      	cmp	r4, r3
     866:	d128      	bne.n	8ba <bootutil_verify_sig+0x9a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     868:	4621      	mov	r1, r4
     86a:	aa29      	add	r2, sp, #164	; 0xa4
     86c:	a802      	add	r0, sp, #8
     86e:	f00b faf7 	bl	be60 <mbedtls_asn1_get_mpi>
     872:	bb10      	cbnz	r0, 8ba <bootutil_verify_sig+0x9a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     874:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     878:	465a      	mov	r2, fp
     87a:	4621      	mov	r1, r4
     87c:	a802      	add	r0, sp, #8
     87e:	f00b faef 	bl	be60 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     882:	4606      	mov	r6, r0
     884:	b9c8      	cbnz	r0, 8ba <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     886:	a829      	add	r0, sp, #164	; 0xa4
     888:	f00b fe0c 	bl	c4a4 <mbedtls_mpi_size>
    if (*p != end) {
     88c:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     88e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     890:	429c      	cmp	r4, r3
     892:	d112      	bne.n	8ba <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     894:	4633      	mov	r3, r6
     896:	4632      	mov	r2, r6
     898:	e9cd 6b00 	strd	r6, fp, [sp]
     89c:	a929      	add	r1, sp, #164	; 0xa4
     89e:	a827      	add	r0, sp, #156	; 0x9c
     8a0:	f00c fcfc 	bl	d29c <mbedtls_rsa_import>
    if (rc != 0) {
     8a4:	b948      	cbnz	r0, 8ba <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     8a6:	a827      	add	r0, sp, #156	; 0x9c
     8a8:	f005 feaa 	bl	6600 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     8ac:	b928      	cbnz	r0, 8ba <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     8ae:	a829      	add	r0, sp, #164	; 0xa4
     8b0:	f00b fdf8 	bl	c4a4 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     8b4:	4580      	cmp	r8, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     8b6:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     8b8:	d00a      	beq.n	8d0 <FIH_LABEL_FIH_CALL_START_229>
        mbedtls_rsa_free(&ctx);
     8ba:	a827      	add	r0, sp, #156	; 0x9c
     8bc:	f00c fd3c 	bl	d338 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     8c0:	a827      	add	r0, sp, #156	; 0x9c
     8c2:	f00c fd39 	bl	d338 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     8c6:	4628      	mov	r0, r5
     8c8:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000008d0 <FIH_LABEL_FIH_CALL_START_229>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     8d0:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     8d4:	d002      	beq.n	8dc <FIH_LABEL_FIH_CALL_END_290+0x2>
     8d6:	f04f 35ff 	mov.w	r5, #4294967295

000008da <FIH_LABEL_FIH_CALL_END_290>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8da:	e7f1      	b.n	8c0 <bootutil_verify_sig+0xa0>
    if (hlen != PSS_HLEN) {
     8dc:	f1ba 0f20 	cmp.w	sl, #32
     8e0:	d1f9      	bne.n	8d6 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     8e2:	4649      	mov	r1, r9
     8e4:	aa8a      	add	r2, sp, #552	; 0x228
     8e6:	a827      	add	r0, sp, #156	; 0x9c
     8e8:	f005 feae 	bl	6648 <mbedtls_rsa_public>
     8ec:	4604      	mov	r4, r0
     8ee:	2800      	cmp	r0, #0
     8f0:	d1f1      	bne.n	8d6 <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     8f2:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     8f6:	2bbc      	cmp	r3, #188	; 0xbc
     8f8:	d1ed      	bne.n	8d6 <FIH_LABEL_FIH_CALL_START_229+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8fa:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     8fe:	26df      	movs	r6, #223	; 0xdf
     900:	4645      	mov	r5, r8
    uint8_t counter[4] = { 0, 0, 0, 0 };
     902:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     904:	a80c      	add	r0, sp, #48	; 0x30
     906:	f00c fd50 	bl	d3aa <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     90a:	2100      	movs	r1, #0
     90c:	a80c      	add	r0, sp, #48	; 0x30
     90e:	f005 fed9 	bl	66c4 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     912:	2220      	movs	r2, #32
     914:	f20d 3107 	addw	r1, sp, #775	; 0x307
     918:	a80c      	add	r0, sp, #48	; 0x30
     91a:	f00c fd4a 	bl	d3b2 <mbedtls_sha256_update>
     91e:	2204      	movs	r2, #4
     920:	a903      	add	r1, sp, #12
     922:	a80c      	add	r0, sp, #48	; 0x30
     924:	f00c fd45 	bl	d3b2 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     928:	a904      	add	r1, sp, #16
     92a:	a80c      	add	r0, sp, #48	; 0x30
     92c:	f00c fd7e 	bl	d42c <mbedtls_sha256_finish>
        if (bytes > count)
     930:	2e1f      	cmp	r6, #31
     932:	bfd4      	ite	le
     934:	46b1      	movle	r9, r6
     936:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     93a:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     93e:	4640      	mov	r0, r8
        counter[3]++;
     940:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     942:	464a      	mov	r2, r9
     944:	a904      	add	r1, sp, #16
        count -= bytes;
     946:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     94a:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     94e:	f00a fddc 	bl	b50a <memcpy>
    while (count > 0) {
     952:	2e00      	cmp	r6, #0
        mask += bytes;
     954:	44c8      	add	r8, r9
    while (count > 0) {
     956:	dcd5      	bgt.n	904 <FIH_LABEL_FIH_CALL_END_290+0x2a>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     958:	4628      	mov	r0, r5
     95a:	462a      	mov	r2, r5
     95c:	23df      	movs	r3, #223	; 0xdf
     95e:	ae8a      	add	r6, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     960:	7811      	ldrb	r1, [r2, #0]
     962:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     966:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     968:	ea81 010c 	eor.w	r1, r1, ip
     96c:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     970:	d1f6      	bne.n	960 <FIH_LABEL_FIH_CALL_END_290+0x86>
    db_mask[0] &= 0x7F;
     972:	782b      	ldrb	r3, [r5, #0]
     974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     978:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     97a:	f810 6b01 	ldrb.w	r6, [r0], #1
     97e:	2e00      	cmp	r6, #0
     980:	d1a9      	bne.n	8d6 <FIH_LABEL_FIH_CALL_START_229+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     982:	3401      	adds	r4, #1
     984:	2cbe      	cmp	r4, #190	; 0xbe
     986:	d1f8      	bne.n	97a <FIH_LABEL_FIH_CALL_END_290+0xa0>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     988:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     98c:	2b01      	cmp	r3, #1
     98e:	d1a2      	bne.n	8d6 <FIH_LABEL_FIH_CALL_START_229+0x6>
    mbedtls_sha256_init(ctx);
     990:	a80c      	add	r0, sp, #48	; 0x30
     992:	f00c fd0a 	bl	d3aa <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     996:	4631      	mov	r1, r6
     998:	a80c      	add	r0, sp, #48	; 0x30
     99a:	f005 fe93 	bl	66c4 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     99e:	2208      	movs	r2, #8
     9a0:	490f      	ldr	r1, [pc, #60]	; (9e0 <FIH_LABEL_FIH_CALL_END_675+0xc>)
     9a2:	a80c      	add	r0, sp, #48	; 0x30
     9a4:	f00c fd05 	bl	d3b2 <mbedtls_sha256_update>
     9a8:	4639      	mov	r1, r7
     9aa:	2220      	movs	r2, #32
     9ac:	a80c      	add	r0, sp, #48	; 0x30
     9ae:	f00c fd00 	bl	d3b2 <mbedtls_sha256_update>
     9b2:	2220      	movs	r2, #32
     9b4:	f20d 2107 	addw	r1, sp, #519	; 0x207
     9b8:	a80c      	add	r0, sp, #48	; 0x30
     9ba:	f00c fcfa 	bl	d3b2 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     9be:	a904      	add	r1, sp, #16
     9c0:	a80c      	add	r0, sp, #48	; 0x30
     9c2:	f00c fd33 	bl	d42c <mbedtls_sha256_finish>

000009c6 <FIH_LABEL_FIH_CALL_START_654>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     9c6:	2220      	movs	r2, #32
     9c8:	f20d 3107 	addw	r1, sp, #775	; 0x307
     9cc:	a804      	add	r0, sp, #16
     9ce:	f009 fad3 	bl	9f78 <boot_fih_memequal>
     9d2:	4605      	mov	r5, r0

000009d4 <FIH_LABEL_FIH_CALL_END_675>:
    if (rc) {
     9d4:	e781      	b.n	8da <FIH_LABEL_FIH_CALL_END_290>
     9d6:	bf00      	nop
     9d8:	2000a000 	.word	0x2000a000
     9dc:	0000e354 	.word	0x0000e354
     9e0:	0000e8a5 	.word	0x0000e8a5

000009e4 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9e8:	4b5b      	ldr	r3, [pc, #364]	; (b58 <FIH_LABEL_FIH_CALL_END_608+0xe2>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9ea:	b089      	sub	sp, #36	; 0x24
     9ec:	4604      	mov	r4, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ee:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
boot_validate_slot(struct boot_loader_state *state, int slot,
     9f2:	460e      	mov	r6, r1
    fih_int fih_rc = FIH_FAILURE;
     9f4:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9f6:	f009 fa11 	bl	9e1c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9fa:	a906      	add	r1, sp, #24
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9fc:	4680      	mov	r8, r0
    rc = flash_area_open(area_id, &fap);
     9fe:	b2c0      	uxtb	r0, r0
     a00:	f002 f9ba 	bl	2d78 <flash_area_open>
    if (rc != 0) {
     a04:	2800      	cmp	r0, #0
     a06:	d158      	bne.n	aba <FIH_LABEL_FIH_CALL_END_608+0x44>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a08:	f894 70b8 	ldrb.w	r7, [r4, #184]	; 0xb8
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a0c:	4631      	mov	r1, r6
     a0e:	4638      	mov	r0, r7
     a10:	f009 fa04 	bl	9e1c <flash_area_id_from_multi_image_slot>
     a14:	f04f 092c 	mov.w	r9, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a18:	a907      	add	r1, sp, #28
     a1a:	b2c0      	uxtb	r0, r0
     a1c:	fb09 f906 	mul.w	r9, r9, r6
     a20:	f002 f9aa 	bl	2d78 <flash_area_open>
    if (rc != 0) {
     a24:	2800      	cmp	r0, #0
     a26:	d04c      	beq.n	ac2 <FIH_LABEL_FIH_CALL_END_608+0x4c>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a28:	f04f 0b58 	mov.w	fp, #88	; 0x58
     a2c:	222c      	movs	r2, #44	; 0x2c
     a2e:	fb0b f307 	mul.w	r3, fp, r7
     a32:	fb02 3306 	mla	r3, r2, r6, r3
     a36:	4423      	add	r3, r4
     a38:	691b      	ldr	r3, [r3, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a3a:	f013 0a10 	ands.w	sl, r3, #16
     a3e:	d151      	bne.n	ae4 <FIH_LABEL_FIH_CALL_END_608+0x6e>

00000a40 <FIH_LABEL_FIH_CALL_START_504>:
            fih_rc = fih_int_encode(1);
            goto out;
        }
    }
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
     a40:	4631      	mov	r1, r6
     a42:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     a46:	f005 fadd 	bl	6004 <boot_image_check_hook>
     a4a:	4605      	mov	r5, r0

00000a4c <FIH_LABEL_FIH_CALL_END_520>:
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
     a4c:	2801      	cmp	r0, #1
     a4e:	d112      	bne.n	a76 <FIH_LABEL_FIH_CALL_END_608>

00000a50 <FIH_LABEL_FIH_CALL_START_542>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a50:	f44f 7380 	mov.w	r3, #256	; 0x100
     a54:	fb07 920b 	mla	r2, r7, fp, r9
     a58:	9301      	str	r3, [sp, #4]
     a5a:	4b40      	ldr	r3, [pc, #256]	; (b5c <FIH_LABEL_FIH_CALL_END_608+0xe6>)
     a5c:	4650      	mov	r0, sl
     a5e:	9300      	str	r3, [sp, #0]
     a60:	e9cd aa03 	strd	sl, sl, [sp, #12]
     a64:	9b06      	ldr	r3, [sp, #24]
     a66:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     a6a:	f8cd a008 	str.w	sl, [sp, #8]
     a6e:	4422      	add	r2, r4
     a70:	f7ff fdd4 	bl	61c <bootutil_img_validate>
     a74:	4605      	mov	r5, r0

00000a76 <FIH_LABEL_FIH_CALL_END_608>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a76:	2358      	movs	r3, #88	; 0x58
     a78:	435f      	muls	r7, r3
     a7a:	232c      	movs	r3, #44	; 0x2c
     a7c:	fb03 7706 	mla	r7, r3, r6, r7
     a80:	4b37      	ldr	r3, [pc, #220]	; (b60 <FIH_LABEL_FIH_CALL_END_608+0xea>)
     a82:	59e1      	ldr	r1, [r4, r7]
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a84:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a86:	4299      	cmp	r1, r3
     a88:	eb04 0207 	add.w	r2, r4, r7
     a8c:	d10c      	bne.n	aa8 <FIH_LABEL_FIH_CALL_END_608+0x32>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a8e:	68d3      	ldr	r3, [r2, #12]
     a90:	8912      	ldrh	r2, [r2, #8]
    if (a > UINT32_MAX - b) {
     a92:	43d1      	mvns	r1, r2
     a94:	428b      	cmp	r3, r1
     a96:	d807      	bhi.n	aa8 <FIH_LABEL_FIH_CALL_END_608+0x32>
        *dest = a + b;
     a98:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     a9a:	6882      	ldr	r2, [r0, #8]
     a9c:	4293      	cmp	r3, r2
     a9e:	d203      	bcs.n	aa8 <FIH_LABEL_FIH_CALL_END_608+0x32>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     aa0:	4b30      	ldr	r3, [pc, #192]	; (b64 <FIH_LABEL_FIH_CALL_END_608+0xee>)
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	42ab      	cmp	r3, r5
     aa6:	d024      	beq.n	af2 <FIH_LABEL_FIH_CALL_END_608+0x7c>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     aa8:	b1e6      	cbz	r6, ae4 <FIH_LABEL_FIH_CALL_END_608+0x6e>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     aaa:	2100      	movs	r1, #0
     aac:	6882      	ldr	r2, [r0, #8]
     aae:	f00a f9df 	bl	ae70 <flash_area_erase>
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
     ab2:	4635      	mov	r5, r6
        }
    }
#endif

out:
    flash_area_close(fap);
     ab4:	9806      	ldr	r0, [sp, #24]
     ab6:	f00a f9b0 	bl	ae1a <flash_area_close>

    FIH_RET(fih_rc);
}
     aba:	4628      	mov	r0, r5
     abc:	b009      	add	sp, #36	; 0x24
     abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    erased_val = flash_area_erased_val(fap);
     ac2:	9807      	ldr	r0, [sp, #28]
     ac4:	f00a f9ef 	bl	aea6 <flash_area_erased_val>
     ac8:	4605      	mov	r5, r0
    flash_area_close(fap);
     aca:	9807      	ldr	r0, [sp, #28]
     acc:	f00a f9a5 	bl	ae1a <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
     ad0:	2358      	movs	r3, #88	; 0x58
     ad2:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     ad6:	fb02 9303 	mla	r3, r2, r3, r9
     ada:	4423      	add	r3, r4
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     adc:	1e5a      	subs	r2, r3, #1
     ade:	3303      	adds	r3, #3
    for (i = 0; i < len; i++) {
     ae0:	4293      	cmp	r3, r2
     ae2:	d101      	bne.n	ae8 <FIH_LABEL_FIH_CALL_END_608+0x72>
            goto out;
     ae4:	2501      	movs	r5, #1
     ae6:	e7e5      	b.n	ab4 <FIH_LABEL_FIH_CALL_END_608+0x3e>
        if (val != p[i]) {
     ae8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     aec:	42a9      	cmp	r1, r5
     aee:	d0f7      	beq.n	ae0 <FIH_LABEL_FIH_CALL_END_608+0x6a>
     af0:	e79a      	b.n	a28 <boot_validate_slot.isra.0+0x44>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     af2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     af6:	b363      	cbz	r3, b52 <FIH_LABEL_FIH_CALL_END_608+0xdc>
     af8:	2b01      	cmp	r3, #1
     afa:	bf0c      	ite	eq
     afc:	220b      	moveq	r2, #11
     afe:	22ff      	movne	r2, #255	; 0xff
     b00:	4590      	cmp	r8, r2
     b02:	d1d7      	bne.n	ab4 <FIH_LABEL_FIH_CALL_END_608+0x3e>
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     b04:	2158      	movs	r1, #88	; 0x58
     b06:	434b      	muls	r3, r1
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     b08:	212c      	movs	r1, #44	; 0x2c
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     b0a:	18e2      	adds	r2, r4, r3
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     b0c:	fb01 3306 	mla	r3, r1, r6, r3
     b10:	4423      	add	r3, r4
     b12:	8919      	ldrh	r1, [r3, #8]
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     b14:	6a17      	ldr	r7, [r2, #32]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     b16:	2304      	movs	r3, #4
        uint32_t reset_value = 0;
     b18:	2200      	movs	r2, #0
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     b1a:	4419      	add	r1, r3
        uint32_t reset_value = 0;
     b1c:	9207      	str	r2, [sp, #28]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     b1e:	aa07      	add	r2, sp, #28
     b20:	f00a f97c 	bl	ae1c <flash_area_read>
        if (rc != 0) {
     b24:	2800      	cmp	r0, #0
     b26:	d1dd      	bne.n	ae4 <FIH_LABEL_FIH_CALL_END_608+0x6e>
        if (BOOT_CURR_IMG(state) == 1) {
     b28:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (reset_value < min_addr || reset_value> (max_addr)) {
     b2c:	9907      	ldr	r1, [sp, #28]
        if (BOOT_CURR_IMG(state) == 1) {
     b2e:	2b01      	cmp	r3, #1
            min_addr = PM_CPUNET_APP_ADDRESS;
     b30:	bf0b      	itete	eq
     b32:	4a0d      	ldreq	r2, [pc, #52]	; (b68 <FIH_LABEL_FIH_CALL_END_608+0xf2>)
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     b34:	e9d7 2301 	ldrdne	r2, r3, [r7, #4]
            max_addr = PM_CPUNET_APP_ADDRESS + PM_CPUNET_APP_SIZE;
     b38:	f04f 7382 	moveq.w	r3, #17039360	; 0x1040000
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     b3c:	189b      	addne	r3, r3, r2
        if (reset_value < min_addr || reset_value> (max_addr)) {
     b3e:	4291      	cmp	r1, r2
     b40:	d301      	bcc.n	b46 <FIH_LABEL_FIH_CALL_END_608+0xd0>
     b42:	4299      	cmp	r1, r3
     b44:	d9b6      	bls.n	ab4 <FIH_LABEL_FIH_CALL_END_608+0x3e>
            flash_area_erase(fap, 0, fap->fa_size);
     b46:	9806      	ldr	r0, [sp, #24]
     b48:	2100      	movs	r1, #0
     b4a:	6882      	ldr	r2, [r0, #8]
     b4c:	f00a f990 	bl	ae70 <flash_area_erase>
            goto out;
     b50:	e7c8      	b.n	ae4 <FIH_LABEL_FIH_CALL_END_608+0x6e>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     b52:	2202      	movs	r2, #2
     b54:	e7d4      	b.n	b00 <FIH_LABEL_FIH_CALL_END_608+0x8a>
     b56:	bf00      	nop
     b58:	2000a000 	.word	0x2000a000
     b5c:	2001dd6a 	.word	0x2001dd6a
     b60:	96f3b83d 	.word	0x96f3b83d
     b64:	2000a718 	.word	0x2000a718
     b68:	01008800 	.word	0x01008800

00000b6c <boot_copy_region>:
int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     b6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b70:	4688      	mov	r8, r1
     b72:	4691      	mov	r9, r2
     b74:	469a      	mov	sl, r3

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     b76:	2600      	movs	r6, #0
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b78:	f8df b08c 	ldr.w	fp, [pc, #140]	; c08 <boot_copy_region+0x9c>
     b7c:	4d23      	ldr	r5, [pc, #140]	; (c0c <boot_copy_region+0xa0>)
     b7e:	4c24      	ldr	r4, [pc, #144]	; (c10 <boot_copy_region+0xa4>)
    while (bytes_copied < sz) {
     b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b82:	429e      	cmp	r6, r3
     b84:	d301      	bcc.n	b8a <boot_copy_region+0x1e>
        bytes_copied += chunk_sz;

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     b86:	2000      	movs	r0, #0
     b88:	e00f      	b.n	baa <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b8c:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b8e:	1b9f      	subs	r7, r3, r6
     b90:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b94:	bf28      	it	cs
     b96:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b9a:	4a1b      	ldr	r2, [pc, #108]	; (c08 <boot_copy_region+0x9c>)
     b9c:	463b      	mov	r3, r7
     b9e:	eb06 010a 	add.w	r1, r6, sl
     ba2:	f00a f93b 	bl	ae1c <flash_area_read>
        if (rc != 0) {
     ba6:	b110      	cbz	r0, bae <boot_copy_region+0x42>
            return BOOT_EFLASH;
     ba8:	2001      	movs	r0, #1
}
     baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     bae:	990a      	ldr	r1, [sp, #40]	; 0x28
     bb0:	463b      	mov	r3, r7
     bb2:	465a      	mov	r2, fp
     bb4:	4648      	mov	r0, r9
     bb6:	1871      	adds	r1, r6, r1
     bb8:	f00a f945 	bl	ae46 <flash_area_write>
        if (rc != 0) {
     bbc:	2800      	cmp	r0, #0
     bbe:	d1f3      	bne.n	ba8 <boot_copy_region+0x3c>
     bc0:	4b14      	ldr	r3, [pc, #80]	; (c14 <boot_copy_region+0xa8>)
     bc2:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     bc6:	443e      	add	r6, r7
     bc8:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     bcc:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     bd0:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     bd4:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     bd8:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     bdc:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     be0:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     be4:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     be8:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     bec:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     bf0:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     bf4:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     bf8:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     bfc:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     c00:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     c04:	e7bc      	b.n	b80 <boot_copy_region+0x14>
     c06:	bf00      	nop
     c08:	2000a7d8 	.word	0x2000a7d8
     c0c:	50018000 	.word	0x50018000
     c10:	6e524635 	.word	0x6e524635
     c14:	50019000 	.word	0x50019000

00000c18 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Iterate over all the images. By the end of the loop the swap type has
     * to be determined for each image and all aborted swaps have to be
     * completed.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     c1c:	2700      	movs	r7, #0
{
     c1e:	4604      	mov	r4, r0
     c20:	4689      	mov	r9, r1
    int rc = -1;
     c22:	f04f 35ff 	mov.w	r5, #4294967295
    fih_int fih_rc = FIH_FAILURE;
     c26:	4b88      	ldr	r3, [pc, #544]	; (e48 <FIH_LABEL_FIH_CALL_END_2365+0x58>)
{
     c28:	b095      	sub	sp, #84	; 0x54
    fih_int fih_rc = FIH_FAILURE;
     c2a:	f8d3 8000 	ldr.w	r8, [r3]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     c2e:	f880 70b8 	strb.w	r7, [r0, #184]	; 0xb8
     c32:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
     c36:	2e01      	cmp	r6, #1
     c38:	d916      	bls.n	c68 <context_boot_go+0x50>
            has_upgrade = true;
        }
    }

#if (BOOT_IMAGE_NUMBER > 1)
    if (has_upgrade) {
     c3a:	2f00      	cmp	r7, #0
     c3c:	f000 8172 	beq.w	f24 <FIH_LABEL_FIH_CALL_END_2365+0x134>
    BOOT_CURR_IMG(state) = 0;
     c40:	2300      	movs	r3, #0
    return &BOOT_IMG(state, slot).hdr;
     c42:	2658      	movs	r6, #88	; 0x58
     c44:	272c      	movs	r7, #44	; 0x2c
     c46:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     c4a:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     c4e:	2801      	cmp	r0, #1
     c50:	f200 8167 	bhi.w	f22 <FIH_LABEL_FIH_CALL_END_2365+0x132>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     c54:	1823      	adds	r3, r4, r0
     c56:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     c5a:	2a00      	cmp	r2, #0
     c5c:	f000 80d8 	beq.w	e10 <FIH_LABEL_FIH_CALL_END_2365+0x20>
            BOOT_CURR_IMG(state)++;
     c60:	3001      	adds	r0, #1
     c62:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
            continue;
     c66:	e7f0      	b.n	c4a <context_boot_go+0x32>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     c68:	19a3      	adds	r3, r4, r6
     c6a:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
     c6e:	2900      	cmp	r1, #0
     c70:	d14f      	bne.n	d12 <context_boot_go+0xfa>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c72:	2558      	movs	r5, #88	; 0x58
     c74:	fb05 4306 	mla	r3, r5, r6, r4
            primary_slot_sectors[image_index];
     c78:	4a74      	ldr	r2, [pc, #464]	; (e4c <FIH_LABEL_FIH_CALL_END_2365+0x5c>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c7a:	4630      	mov	r0, r6
            primary_slot_sectors[image_index];
     c7c:	eb02 3286 	add.w	r2, r2, r6, lsl #14
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c80:	625a      	str	r2, [r3, #36]	; 0x24
            secondary_slot_sectors[image_index];
     c82:	4a73      	ldr	r2, [pc, #460]	; (e50 <FIH_LABEL_FIH_CALL_END_2365+0x60>)
     c84:	eb02 3286 	add.w	r2, r2, r6, lsl #14
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c88:	651a      	str	r2, [r3, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c8a:	f009 f8c7 	bl	9e1c <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c8e:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     c92:	b2c0      	uxtb	r0, r0
     c94:	fb05 4101 	mla	r1, r5, r1, r4
     c98:	3120      	adds	r1, #32
     c9a:	f002 f86d 	bl	2d78 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c9e:	2101      	movs	r1, #1
     ca0:	4630      	mov	r0, r6
     ca2:	f009 f8bb 	bl	9e1c <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ca6:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     caa:	b2c0      	uxtb	r0, r0
     cac:	fb05 4101 	mla	r1, r5, r1, r4
     cb0:	314c      	adds	r1, #76	; 0x4c
     cb2:	f002 f861 	bl	2d78 <flash_area_open>
     cb6:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     cb8:	4620      	mov	r0, r4
     cba:	f009 f9a0 	bl	9ffe <boot_read_sectors>
    if (rc != 0) {
     cbe:	bb00      	cbnz	r0, d02 <context_boot_go+0xea>
    rc = boot_read_image_headers(state, false, NULL);
     cc0:	2200      	movs	r2, #0
     cc2:	4620      	mov	r0, r4
     cc4:	4611      	mov	r1, r2
     cc6:	f009 f9c5 	bl	a054 <boot_read_image_headers>
    if (rc != 0) {
     cca:	4606      	mov	r6, r0
     ccc:	b990      	cbnz	r0, cf4 <context_boot_go+0xdc>
    if (boot_slots_compatible(state)) {
     cce:	4620      	mov	r0, r4
     cd0:	f009 fa21 	bl	a116 <boot_slots_compatible>
     cd4:	b170      	cbz	r0, cf4 <context_boot_go+0xdc>
        boot_status_reset(bs);
     cd6:	a80a      	add	r0, sp, #40	; 0x28
     cd8:	f009 f9eb 	bl	a0b2 <boot_status_reset>
        if (!boot_status_is_reset(bs)) {
     cdc:	f009 f9f2 	bl	a0c4 <boot_status_is_reset>
     ce0:	9002      	str	r0, [sp, #8]
     ce2:	bb68      	cbnz	r0, d40 <context_boot_go+0x128>
    if (BOOT_CURR_IMG(state) == 0) {
     ce4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     ce8:	b9cb      	cbnz	r3, d1e <context_boot_go+0x106>
            rc = boot_read_image_headers(state, false, bs);
     cea:	2100      	movs	r1, #0
     cec:	4620      	mov	r0, r4
     cee:	aa0a      	add	r2, sp, #40	; 0x28
     cf0:	f009 f9b0 	bl	a054 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cf4:	2201      	movs	r2, #1
     cf6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     cfa:	4423      	add	r3, r4
     cfc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     d00:	e007      	b.n	d12 <context_boot_go+0xfa>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d02:	2201      	movs	r2, #1
     d04:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (rc == BOOT_EFLASH)
     d08:	4290      	cmp	r0, r2
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d0a:	4423      	add	r3, r4
     d0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if (rc == BOOT_EFLASH)
     d10:	d1d6      	bne.n	cc0 <context_boot_go+0xa8>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d12:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d16:	3301      	adds	r3, #1
     d18:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     d1c:	e789      	b.n	c32 <context_boot_go+0x1a>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     d1e:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     d22:	2a04      	cmp	r2, #4
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     d24:	bf04      	itt	eq
     d26:	2201      	moveq	r2, #1
     d28:	f884 20b0 	strbeq.w	r2, [r4, #176]	; 0xb0
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     d2c:	2b01      	cmp	r3, #1
     d2e:	d0dc      	beq.n	cea <context_boot_go+0xd2>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     d30:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     d34:	2b04      	cmp	r3, #4
     d36:	d1d8      	bne.n	cea <context_boot_go+0xd2>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     d38:	2301      	movs	r3, #1
     d3a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     d3e:	e7d4      	b.n	cea <context_boot_go+0xd2>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d40:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
     d44:	2b01      	cmp	r3, #1
     d46:	d14f      	bne.n	de8 <FIH_LABEL_FIH_CALL_START_2346>
    const struct flash_area *secondary_fa =
     d48:	2358      	movs	r3, #88	; 0x58
        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
     d4a:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    if (hdr->ih_magic == IMAGE_MAGIC) {
     d4e:	4941      	ldr	r1, [pc, #260]	; (e54 <FIH_LABEL_FIH_CALL_END_2365+0x64>)
    const struct flash_area *secondary_fa =
     d50:	fb03 4300 	mla	r3, r3, r0, r4
    struct image_header *hdr = (struct image_header *)secondary_fa->fa_off;
     d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     d56:	685b      	ldr	r3, [r3, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
     d58:	681a      	ldr	r2, [r3, #0]
     d5a:	9303      	str	r3, [sp, #12]
     d5c:	428a      	cmp	r2, r1
        vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
     d5e:	bf09      	itett	eq
     d60:	891a      	ldrheq	r2, [r3, #8]
    uint32_t *vtable = 0;
     d62:	46b2      	movne	sl, r6
        vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
     d64:	eb02 0a03 	addeq.w	sl, r2, r3
        reset_addr = vtable[1];
     d68:	f8da 6004 	ldreq.w	r6, [sl, #4]
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d6c:	f005 f9f0 	bl	6150 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d70:	1e81      	subs	r1, r0, #2
     d72:	2902      	cmp	r1, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d74:	4683      	mov	fp, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d76:	d80c      	bhi.n	d92 <FIH_LABEL_FIH_CALL_END_2139+0x12>

00000d78 <FIH_LABEL_FIH_CALL_START_2115>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d78:	2101      	movs	r1, #1
     d7a:	4620      	mov	r0, r4
     d7c:	f7ff fe32 	bl	9e4 <boot_validate_slot.isra.0>

00000d80 <FIH_LABEL_FIH_CALL_END_2139>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d80:	4935      	ldr	r1, [pc, #212]	; (e58 <FIH_LABEL_FIH_CALL_END_2365+0x68>)
     d82:	9b03      	ldr	r3, [sp, #12]
     d84:	6809      	ldr	r1, [r1, #0]
     d86:	4288      	cmp	r0, r1
     d88:	d022      	beq.n	dd0 <FIH_LABEL_FIH_CALL_END_2139+0x50>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
     d8a:	2801      	cmp	r0, #1
     d8c:	d129      	bne.n	de2 <FIH_LABEL_FIH_CALL_END_2139+0x62>
                swap_type = BOOT_SWAP_TYPE_NONE;
     d8e:	f04f 0b01 	mov.w	fp, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d92:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     d96:	4423      	add	r3, r4
     d98:	f883 b0b0 	strb.w	fp, [r3, #176]	; 0xb0
    if (BOOT_CURR_IMG(state) == 0) {
     d9c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     da0:	b16b      	cbz	r3, dbe <FIH_LABEL_FIH_CALL_END_2139+0x3e>
        if ((BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_NONE) ||
     da2:	18e2      	adds	r2, r4, r3
     da4:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     da8:	2a01      	cmp	r2, #1
     daa:	d0b2      	beq.n	d12 <context_boot_go+0xfa>
     dac:	2a04      	cmp	r2, #4
     dae:	d02d      	beq.n	e0c <FIH_LABEL_FIH_CALL_END_2365+0x1c>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     db0:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     db4:	2a04      	cmp	r2, #4
     db6:	d102      	bne.n	dbe <FIH_LABEL_FIH_CALL_END_2139+0x3e>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     db8:	2201      	movs	r2, #1
     dba:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     dbe:	4423      	add	r3, r4
     dc0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
            has_upgrade = true;
     dc4:	9a02      	ldr	r2, [sp, #8]
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     dc6:	3b02      	subs	r3, #2
            has_upgrade = true;
     dc8:	2b02      	cmp	r3, #2
     dca:	bf98      	it	ls
     dcc:	4617      	movls	r7, r2
     dce:	e7a0      	b.n	d12 <context_boot_go+0xfa>
        if (upgrade_valid && reset_addr > PM_CPUNET_B0N_ADDRESS) {
     dd0:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
     dd4:	d9dd      	bls.n	d92 <FIH_LABEL_FIH_CALL_END_2139+0x12>
            int rc = pcd_network_core_update(vtable, fw_size);
     dd6:	4650      	mov	r0, sl
     dd8:	68d9      	ldr	r1, [r3, #12]
     dda:	f005 f8bf 	bl	5f5c <pcd_network_core_update>
            if (rc != 0) {
     dde:	2800      	cmp	r0, #0
     de0:	d0d5      	beq.n	d8e <FIH_LABEL_FIH_CALL_END_2139+0xe>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     de2:	f04f 0b05 	mov.w	fp, #5
     de6:	e7d4      	b.n	d92 <FIH_LABEL_FIH_CALL_END_2139+0x12>

00000de8 <FIH_LABEL_FIH_CALL_START_2346>:
                FIH_CALL(boot_validate_slot, fih_rc,
     de8:	2101      	movs	r1, #1
     dea:	4620      	mov	r0, r4
     dec:	f7ff fdfa 	bl	9e4 <boot_validate_slot.isra.0>

00000df0 <FIH_LABEL_FIH_CALL_END_2365>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     df0:	4b19      	ldr	r3, [pc, #100]	; (e58 <FIH_LABEL_FIH_CALL_END_2365+0x68>)
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     df6:	bf18      	it	ne
     df8:	2205      	movne	r2, #5
     dfa:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     dfe:	bf08      	it	eq
     e00:	f89d 202f 	ldrbeq.w	r2, [sp, #47]	; 0x2f
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     e04:	4423      	add	r3, r4
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     e06:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     e0a:	e7c7      	b.n	d9c <FIH_LABEL_FIH_CALL_END_2139+0x1c>
            has_upgrade = true;
     e0c:	9f02      	ldr	r7, [sp, #8]
     e0e:	e780      	b.n	d12 <context_boot_go+0xfa>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE &&
     e10:	f893 50b0 	ldrb.w	r5, [r3, #176]	; 0xb0
     e14:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
     e18:	3d01      	subs	r5, #1
     e1a:	bf18      	it	ne
     e1c:	2501      	movne	r5, #1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     e1e:	4629      	mov	r1, r5
     e20:	f008 fffc 	bl	9e1c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e24:	a905      	add	r1, sp, #20
     e26:	b2c0      	uxtb	r0, r0
     e28:	f001 ffa6 	bl	2d78 <flash_area_open>
    if (rc != 0) {
     e2c:	b1b0      	cbz	r0, e5c <FIH_LABEL_FIH_CALL_END_2365+0x6c>
        rc = BOOT_EFLASH;
     e2e:	2501      	movs	r5, #1
    flash_area_close(fap);
     e30:	9805      	ldr	r0, [sp, #20]
     e32:	f009 fff2 	bl	ae1a <flash_area_close>
        if (rc == 0) {
     e36:	2d00      	cmp	r5, #0
     e38:	d16d      	bne.n	f16 <FIH_LABEL_FIH_CALL_END_2365+0x126>
            BOOT_CURR_IMG(state)++;
     e3a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     e3e:	3301      	adds	r3, #1
     e40:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     e44:	e701      	b.n	c4a <context_boot_go+0x32>
     e46:	bf00      	nop
     e48:	2000a000 	.word	0x2000a000
     e4c:	2000abd8 	.word	0x2000abd8
     e50:	20012bd8 	.word	0x20012bd8
     e54:	96f3b83d 	.word	0x96f3b83d
     e58:	2000a718 	.word	0x2000a718
    rc = bootutil_tlv_iter_begin(&it, boot_img_hdr(state, slot), fap,
     e5c:	2301      	movs	r3, #1
     e5e:	437d      	muls	r5, r7
     e60:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     e64:	9300      	str	r3, [sp, #0]
     e66:	fb01 5106 	mla	r1, r1, r6, r5
     e6a:	2340      	movs	r3, #64	; 0x40
     e6c:	9a05      	ldr	r2, [sp, #20]
     e6e:	4421      	add	r1, r4
     e70:	a80e      	add	r0, sp, #56	; 0x38
     e72:	f008 ffea 	bl	9e4a <bootutil_tlv_iter_begin>
    if (rc != 0) {
     e76:	4605      	mov	r5, r0
     e78:	2800      	cmp	r0, #0
     e7a:	d1d9      	bne.n	e30 <FIH_LABEL_FIH_CALL_END_2365+0x40>
        rc = bootutil_tlv_iter_next(&it, &off, &len, NULL);
     e7c:	2300      	movs	r3, #0
     e7e:	f10d 0212 	add.w	r2, sp, #18
     e82:	a906      	add	r1, sp, #24
     e84:	a80e      	add	r0, sp, #56	; 0x38
     e86:	f009 f82c 	bl	9ee2 <bootutil_tlv_iter_next>
        if (rc < 0) {
     e8a:	2800      	cmp	r0, #0
     e8c:	db4a      	blt.n	f24 <FIH_LABEL_FIH_CALL_END_2365+0x134>
        rc = flash_area_read(fap, off, &dep, len);
     e8e:	9805      	ldr	r0, [sp, #20]
        } else if (rc > 0) {
     e90:	d1ce      	bne.n	e30 <FIH_LABEL_FIH_CALL_END_2365+0x40>
        if (len != sizeof(dep)) {
     e92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     e96:	2b0c      	cmp	r3, #12
     e98:	d139      	bne.n	f0e <FIH_LABEL_FIH_CALL_END_2365+0x11e>
        rc = flash_area_read(fap, off, &dep, len);
     e9a:	9906      	ldr	r1, [sp, #24]
     e9c:	aa07      	add	r2, sp, #28
     e9e:	f009 ffbd 	bl	ae1c <flash_area_read>
        if (rc != 0) {
     ea2:	2800      	cmp	r0, #0
     ea4:	d1c3      	bne.n	e2e <FIH_LABEL_FIH_CALL_END_2365+0x3e>
        if (dep.image_id >= BOOT_IMAGE_NUMBER) {
     ea6:	f89d 201c 	ldrb.w	r2, [sp, #28]
     eaa:	2a01      	cmp	r2, #1
     eac:	d831      	bhi.n	f12 <FIH_LABEL_FIH_CALL_END_2365+0x122>
    swap_type = state->swap_type[dep->image_id];
     eae:	18a3      	adds	r3, r4, r2
                                          : BOOT_PRIMARY_SLOT;
     eb0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     eb4:	3b02      	subs	r3, #2
     eb6:	2b02      	cmp	r3, #2
     eb8:	bf8c      	ite	hi
     eba:	2100      	movhi	r1, #0
     ebc:	2101      	movls	r1, #1
    if (ver1->iv_major > ver2->iv_major) {
     ebe:	fb06 f302 	mul.w	r3, r6, r2
     ec2:	fb07 3301 	mla	r3, r7, r1, r3
     ec6:	4423      	add	r3, r4
     ec8:	7d19      	ldrb	r1, [r3, #20]
     eca:	f89d 2020 	ldrb.w	r2, [sp, #32]
     ece:	4291      	cmp	r1, r2
     ed0:	d8d4      	bhi.n	e7c <FIH_LABEL_FIH_CALL_END_2365+0x8c>
    if (ver1->iv_major < ver2->iv_major) {
     ed2:	d30a      	bcc.n	eea <FIH_LABEL_FIH_CALL_END_2365+0xfa>
    if (ver1->iv_minor > ver2->iv_minor) {
     ed4:	7d59      	ldrb	r1, [r3, #21]
     ed6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     eda:	4291      	cmp	r1, r2
     edc:	d8ce      	bhi.n	e7c <FIH_LABEL_FIH_CALL_END_2365+0x8c>
    if (ver1->iv_minor < ver2->iv_minor) {
     ede:	d304      	bcc.n	eea <FIH_LABEL_FIH_CALL_END_2365+0xfa>
    if (ver1->iv_revision < ver2->iv_revision) {
     ee0:	8ada      	ldrh	r2, [r3, #22]
     ee2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     ee6:	429a      	cmp	r2, r3
     ee8:	d2c8      	bcs.n	e7c <FIH_LABEL_FIH_CALL_END_2365+0x8c>
        switch (BOOT_SWAP_TYPE(state)) {
     eea:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     eee:	4423      	add	r3, r4
     ef0:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     ef4:	2a01      	cmp	r2, #1
     ef6:	d008      	beq.n	f0a <FIH_LABEL_FIH_CALL_END_2365+0x11a>
     ef8:	3a02      	subs	r2, #2
     efa:	2a01      	cmp	r2, #1
     efc:	d802      	bhi.n	f04 <FIH_LABEL_FIH_CALL_END_2365+0x114>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     efe:	2201      	movs	r2, #1
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     f00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
     f04:	f04f 35ff 	mov.w	r5, #4294967295
     f08:	e792      	b.n	e30 <FIH_LABEL_FIH_CALL_END_2365+0x40>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     f0a:	2204      	movs	r2, #4
     f0c:	e7f8      	b.n	f00 <FIH_LABEL_FIH_CALL_END_2365+0x110>
            rc = BOOT_EBADIMAGE;
     f0e:	2503      	movs	r5, #3
     f10:	e78e      	b.n	e30 <FIH_LABEL_FIH_CALL_END_2365+0x40>
            rc = BOOT_EBADARGS;
     f12:	2507      	movs	r5, #7
     f14:	e78c      	b.n	e30 <FIH_LABEL_FIH_CALL_END_2365+0x40>
	} else if (rc == BOOT_EBADIMAGE) {
     f16:	2d03      	cmp	r5, #3
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     f18:	bf04      	itt	eq
     f1a:	f240 1301 	movweq	r3, #257	; 0x101
     f1e:	f8a4 30b0 	strheq.w	r3, [r4, #176]	; 0xb0
             * It was impossible to upgrade because the expected dependency version
             * was not available. Here we already changed the swap_type so that
             * instead of asserting the bootloader, we continue and no upgrade is
             * performed.
             */
            rc = 0;
     f22:	2500      	movs	r5, #0

    /* Iterate over all the images. At this point there are no aborted swaps
     * and the swap types are determined for each image. By the end of the loop
     * all required update operations will have been finished.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f24:	2300      	movs	r3, #0
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     f26:	2758      	movs	r7, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f28:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     f2c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f30:	2b01      	cmp	r3, #1
     f32:	d93c      	bls.n	fae <FIH_LABEL_FIH_CALL_END_2365+0x1be>

    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f34:	2300      	movs	r3, #0
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     f36:	4ebb      	ldr	r6, [pc, #748]	; (1224 <FIH_LABEL_FIH_CALL_END_4004+0x28>)
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f38:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     f3c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f40:	2b01      	cmp	r3, #1
     f42:	f240 8146 	bls.w	11d2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1d2>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     f46:	2210      	movs	r2, #16
     f48:	2100      	movs	r1, #0
     f4a:	a80a      	add	r0, sp, #40	; 0x28
     f4c:	f00a fae8 	bl	b520 <memset>
    BOOT_CURR_IMG(state) = 0;
     f50:	2300      	movs	r3, #0
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f52:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     f56:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f5a:	2b01      	cmp	r3, #1
     f5c:	f240 8159 	bls.w	1212 <FIH_LABEL_FIH_CALL_END_4004+0x16>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     f60:	2658      	movs	r6, #88	; 0x58
     f62:	fb06 4303 	mla	r3, r6, r3, r4
     f66:	6a18      	ldr	r0, [r3, #32]
     f68:	f008 ff6d 	bl	9e46 <flash_area_get_device_id>
     f6c:	f889 0004 	strb.w	r0, [r9, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     f70:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f74:	fb06 4203 	mla	r2, r6, r3, r4
    return &BOOT_IMG(state, slot).hdr;
     f78:	fb03 4606 	mla	r6, r3, r6, r4
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     f7c:	6a12      	ldr	r2, [r2, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     f7e:	4ba9      	ldr	r3, [pc, #676]	; (1224 <FIH_LABEL_FIH_CALL_END_4004+0x28>)
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     f80:	6852      	ldr	r2, [r2, #4]
    fih_rc = FIH_SUCCESS;
     f82:	f8d3 8000 	ldr.w	r8, [r3]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     f86:	f8c9 2008 	str.w	r2, [r9, #8]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     f8a:	f8c9 6000 	str.w	r6, [r9]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f8e:	2300      	movs	r3, #0
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     f90:	2658      	movs	r6, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     f92:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     f96:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f9a:	2b01      	cmp	r3, #1
     f9c:	f240 8144 	bls.w	1228 <FIH_LABEL_FIH_CALL_END_4004+0x2c>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     fa0:	2d00      	cmp	r5, #0
     fa2:	bf14      	ite	ne
     fa4:	4628      	movne	r0, r5
     fa6:	4640      	moveq	r0, r8
     fa8:	b015      	add	sp, #84	; 0x54
     faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     fae:	4423      	add	r3, r4
     fb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
     fb4:	2b00      	cmp	r3, #0
     fb6:	f040 8106 	bne.w	11c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c6>
        boot_status_reset(&bs);
     fba:	a80a      	add	r0, sp, #40	; 0x28
     fbc:	f009 f879 	bl	a0b2 <boot_status_reset>
        bs.swap_type = BOOT_SWAP_TYPE(state);
     fc0:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     fc4:	1822      	adds	r2, r4, r0
     fc6:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
     fca:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     fcc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        switch (BOOT_SWAP_TYPE(state)) {
     fd0:	d807      	bhi.n	fe2 <FIH_LABEL_FIH_CALL_END_2365+0x1f2>
     fd2:	2b01      	cmp	r3, #1
     fd4:	d807      	bhi.n	fe6 <FIH_LABEL_FIH_CALL_END_2365+0x1f6>
     fd6:	f000 80af 	beq.w	1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     fda:	23ff      	movs	r3, #255	; 0xff
     fdc:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
     fe0:	e0aa      	b.n	1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
        switch (BOOT_SWAP_TYPE(state)) {
     fe2:	2b05      	cmp	r3, #5
     fe4:	e7f7      	b.n	fd6 <FIH_LABEL_FIH_CALL_END_2365+0x1e6>
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     fe6:	fb07 4300 	mla	r3, r7, r0, r4
     fea:	4619      	mov	r1, r3
     fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     fee:	312c      	adds	r1, #44	; 0x2c
     ff0:	f00a fe50 	bl	bc94 <boot_perform_update_hook>
            if (rc == BOOT_HOOK_REGULAR)
     ff4:	2801      	cmp	r0, #1
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     ff6:	4605      	mov	r5, r0
            if (rc == BOOT_HOOK_REGULAR)
     ff8:	f040 809e 	bne.w	1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ffc:	4601      	mov	r1, r0
     ffe:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1002:	f008 ff0b 	bl	9e1c <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1006:	a907      	add	r1, sp, #28
    1008:	b2c0      	uxtb	r0, r0
    100a:	f001 feb5 	bl	2d78 <flash_area_open>
    if (rc != 0) {
    100e:	2800      	cmp	r0, #0
    1010:	f000 809a 	beq.w	1148 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x148>
    uint32_t src_size = 0;
    1014:	2500      	movs	r5, #0
    flash_area_close(fap);
    1016:	9807      	ldr	r0, [sp, #28]
    1018:	f009 feff 	bl	ae1a <flash_area_close>
    image_index = BOOT_CURR_IMG(state);
    101c:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1020:	2e00      	cmp	r6, #0
    1022:	f000 80c9 	beq.w	11b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b8>
    1026:	2e01      	cmp	r6, #1
    1028:	bf0c      	ite	eq
    102a:	2001      	moveq	r0, #1
    102c:	20ff      	movne	r0, #255	; 0xff
    102e:	a907      	add	r1, sp, #28
    1030:	f001 fea2 	bl	2d78 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1034:	2e00      	cmp	r6, #0
    1036:	f000 80c1 	beq.w	11bc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1bc>
    103a:	2e01      	cmp	r6, #1
    103c:	bf0c      	ite	eq
    103e:	200b      	moveq	r0, #11
    1040:	20ff      	movne	r0, #255	; 0xff
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    1042:	2600      	movs	r6, #0
    1044:	46b2      	mov	sl, r6
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1046:	a90e      	add	r1, sp, #56	; 0x38
    1048:	f001 fe96 	bl	2d78 <flash_area_open>
    return BOOT_IMG(state, slot).num_sectors;
    104c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1050:	fb07 4303 	mla	r3, r7, r3, r4
    1054:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    1058:	45d3      	cmp	fp, sl
    105a:	d017      	beq.n	108c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8c>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    105c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    1060:	4631      	mov	r1, r6
    1062:	fb07 4303 	mla	r3, r7, r3, r4
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
    1066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1068:	9807      	ldr	r0, [sp, #28]
    106a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    106e:	685a      	ldr	r2, [r3, #4]
    1070:	9202      	str	r2, [sp, #8]
    1072:	f009 fefd 	bl	ae70 <flash_area_erase>
        if ((size + this_size) >= src_size) {
    1076:	9a02      	ldr	r2, [sp, #8]
    1078:	4416      	add	r6, r2
    107a:	42ae      	cmp	r6, r5
    107c:	f0c0 80a0 	bcc.w	11c0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c0>
            size += BOOT_WRITE_SZ(state) - (size % BOOT_WRITE_SZ(state));
    1080:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
    1084:	fbb5 f5f6 	udiv	r5, r5, r6
    1088:	fb06 6605 	mla	r6, r6, r5, r6
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    108c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    1090:	f008 ff74 	bl	9f7c <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    1094:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    1098:	fb07 4202 	mla	r2, r7, r2, r4
    109c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    109e:	6a92      	ldr	r2, [r2, #40]	; 0x28
	return fs->fs_off;
    10a0:	6819      	ldr	r1, [r3, #0]
    10a2:	3a01      	subs	r2, #1
    10a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    sz = 0;
    10a8:	2200      	movs	r2, #0
        sz += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, sector);
    10aa:	685d      	ldr	r5, [r3, #4]
    10ac:	469c      	mov	ip, r3
    10ae:	442a      	add	r2, r5
    } while (sz < trailer_sz);
    10b0:	4290      	cmp	r0, r2
    10b2:	f1a3 0308 	sub.w	r3, r3, #8
    10b6:	d8f8      	bhi.n	10aa <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xaa>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    10b8:	f8dc 3000 	ldr.w	r3, [ip]
    return flash_area_erase(fap, off, sz);
    10bc:	9807      	ldr	r0, [sp, #28]
    10be:	1a59      	subs	r1, r3, r1
    10c0:	f009 fed6 	bl	ae70 <flash_area_erase>
    rc = boot_copy_region(state, fap_secondary_slot, fap_primary_slot, 0, 0, size);
    10c4:	2300      	movs	r3, #0
    10c6:	4620      	mov	r0, r4
    10c8:	9a07      	ldr	r2, [sp, #28]
    10ca:	990e      	ldr	r1, [sp, #56]	; 0x38
    10cc:	9601      	str	r6, [sp, #4]
    10ce:	9300      	str	r3, [sp, #0]
    10d0:	f7ff fd4c 	bl	b6c <boot_copy_region>
    if (rc != 0) {
    10d4:	4605      	mov	r5, r0
    10d6:	bb78      	cbnz	r0, 1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
    rc = boot_write_magic(fap_primary_slot);
    10d8:	9807      	ldr	r0, [sp, #28]
    10da:	f004 ffc5 	bl	6068 <boot_write_magic>
    if (rc != 0) {
    10de:	4605      	mov	r5, r0
    10e0:	bb50      	cbnz	r0, 1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
    10e2:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    10e6:	4632      	mov	r2, r6
    10e8:	fb07 4300 	mla	r3, r7, r0, r4
    10ec:	6a19      	ldr	r1, [r3, #32]
    10ee:	f00a fddf 	bl	bcb0 <boot_copy_region_post_hook>
    if (rc != 0) {
    10f2:	4605      	mov	r5, r0
    10f4:	bb00      	cbnz	r0, 1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
    10f6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
    10fa:	4601      	mov	r1, r0
    10fc:	fb07 4303 	mla	r3, r7, r3, r4
	return fs->fs_size;
    1100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1102:	980e      	ldr	r0, [sp, #56]	; 0x38
    1104:	685a      	ldr	r2, [r3, #4]
    1106:	f009 feb3 	bl	ae70 <flash_area_erase>
    return BOOT_IMG(state, slot).num_sectors;
    110a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    110e:	fb07 4303 	mla	r3, r7, r3, r4
    last_sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
    1112:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    1116:	3b01      	subs	r3, #1
    1118:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    111c:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    1120:	6813      	ldr	r3, [r2, #0]
    return flash_area_erase(fap, off, sz);
    1122:	6842      	ldr	r2, [r0, #4]
    1124:	1ac9      	subs	r1, r1, r3
    1126:	980e      	ldr	r0, [sp, #56]	; 0x38
    1128:	f009 fea2 	bl	ae70 <flash_area_erase>
    flash_area_close(fap_primary_slot);
    112c:	9807      	ldr	r0, [sp, #28]
    112e:	f009 fe74 	bl	ae1a <flash_area_close>
    flash_area_close(fap_secondary_slot);
    1132:	980e      	ldr	r0, [sp, #56]	; 0x38
    1134:	f009 fe71 	bl	ae1a <flash_area_close>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    1138:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    113c:	4423      	add	r3, r4
    113e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    1142:	2bff      	cmp	r3, #255	; 0xff
    1144:	d13f      	bne.n	11c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c6>
            FIH_PANIC;
    1146:	e7fe      	b.n	1146 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x146>
    return &BOOT_IMG(state, slot).hdr;
    1148:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    114c:	9807      	ldr	r0, [sp, #28]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    114e:	fb07 4303 	mla	r3, r7, r3, r4
    1152:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
    1154:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1156:	aa0e      	add	r2, sp, #56	; 0x38
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1158:	442e      	add	r6, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    115a:	2304      	movs	r3, #4
    115c:	4631      	mov	r1, r6
    115e:	f009 fe5d 	bl	ae1c <flash_area_read>
    1162:	2800      	cmp	r0, #0
    1164:	f47f af56 	bne.w	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    1168:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    116c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1170:	fb07 4303 	mla	r3, r7, r3, r4
    1174:	8edd      	ldrh	r5, [r3, #54]	; 0x36
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1176:	f646 1308 	movw	r3, #26888	; 0x6908
    117a:	429a      	cmp	r2, r3
    117c:	d119      	bne.n	11b2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b2>
        if (protect_tlv_size != info.it_tlv_tot) {
    117e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1182:	429d      	cmp	r5, r3
    1184:	f47f af46 	bne.w	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1188:	2304      	movs	r3, #4
    118a:	9807      	ldr	r0, [sp, #28]
    118c:	aa0e      	add	r2, sp, #56	; 0x38
    118e:	19a9      	adds	r1, r5, r6
    1190:	f009 fe44 	bl	ae1c <flash_area_read>
    1194:	2800      	cmp	r0, #0
    1196:	f47f af3d 	bne.w	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    119a:	f646 1307 	movw	r3, #26887	; 0x6907
    119e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    11a2:	429a      	cmp	r2, r3
    11a4:	f47f af36 	bne.w	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    11a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    11ac:	441d      	add	r5, r3
    11ae:	4435      	add	r5, r6
    rc = 0;
    11b0:	e731      	b.n	1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
    } else if (protect_tlv_size != 0) {
    11b2:	2d00      	cmp	r5, #0
    11b4:	d0f1      	beq.n	119a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x19a>
    11b6:	e72d      	b.n	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    11b8:	2004      	movs	r0, #4
    11ba:	e738      	b.n	102e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    11bc:	2002      	movs	r0, #2
    11be:	e740      	b.n	1042 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x42>
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    11c0:	f10a 0a01 	add.w	sl, sl, #1
    11c4:	e748      	b.n	1058 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x58>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    11c6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    11ca:	3301      	adds	r3, #1
    11cc:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    11d0:	e6ac      	b.n	f2c <FIH_LABEL_FIH_CALL_END_2365+0x13c>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    11d2:	4423      	add	r3, r4
    11d4:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
    11d8:	b9a9      	cbnz	r1, 1206 <FIH_LABEL_FIH_CALL_END_4004+0xa>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    11da:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    11de:	2b01      	cmp	r3, #1
    11e0:	d007      	beq.n	11f2 <FIH_LABEL_FIH_CALL_START_3988>
            rc = boot_read_image_headers(state, false, &bs);
    11e2:	4620      	mov	r0, r4
    11e4:	aa0a      	add	r2, sp, #40	; 0x28
    11e6:	f008 ff35 	bl	a054 <boot_read_image_headers>
            if (rc != 0) {
    11ea:	4605      	mov	r5, r0
    11ec:	2800      	cmp	r0, #0
    11ee:	f47f aece 	bne.w	f8e <FIH_LABEL_FIH_CALL_END_2365+0x19e>

000011f2 <FIH_LABEL_FIH_CALL_START_3988>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    11f2:	2100      	movs	r1, #0
    11f4:	4620      	mov	r0, r4
    11f6:	f7ff fbf5 	bl	9e4 <boot_validate_slot.isra.0>
    11fa:	4680      	mov	r8, r0

000011fc <FIH_LABEL_FIH_CALL_END_4004>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    11fc:	6833      	ldr	r3, [r6, #0]
    11fe:	4283      	cmp	r3, r0
    1200:	f47f aec5 	bne.w	f8e <FIH_LABEL_FIH_CALL_END_2365+0x19e>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
    1204:	2500      	movs	r5, #0
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1206:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    120a:	3301      	adds	r3, #1
    120c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    1210:	e694      	b.n	f3c <FIH_LABEL_FIH_CALL_END_2365+0x14c>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
    1212:	18e2      	adds	r2, r4, r3
    1214:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    1218:	2a00      	cmp	r2, #0
    121a:	f43f aea1 	beq.w	f60 <FIH_LABEL_FIH_CALL_END_2365+0x170>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    121e:	3301      	adds	r3, #1
    1220:	e697      	b.n	f52 <FIH_LABEL_FIH_CALL_END_2365+0x162>
    1222:	bf00      	nop
    1224:	2000a718 	.word	0x2000a718
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    1228:	18e2      	adds	r2, r4, r3
    122a:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    122e:	b95a      	cbnz	r2, 1248 <FIH_LABEL_FIH_CALL_END_4004+0x4c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    1230:	fb06 4303 	mla	r3, r6, r3, r4
    1234:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    1236:	f009 fdf0 	bl	ae1a <flash_area_close>
    123a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    123e:	fb06 4303 	mla	r3, r6, r3, r4
    1242:	6a18      	ldr	r0, [r3, #32]
    1244:	f009 fde9 	bl	ae1a <flash_area_close>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1248:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    124c:	3301      	adds	r3, #1
    124e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    1252:	e6a0      	b.n	f96 <FIH_LABEL_FIH_CALL_END_2365+0x1a6>

00001254 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    1254:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    1256:	4d06      	ldr	r5, [pc, #24]	; (1270 <FIH_LABEL_FIH_CALL_END_4679+0x4>)
{
    1258:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    125a:	22bc      	movs	r2, #188	; 0xbc
    125c:	2100      	movs	r1, #0
    125e:	4628      	mov	r0, r5
    1260:	f00a f95e 	bl	b520 <memset>

00001264 <FIH_LABEL_FIH_CALL_START_4664>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1264:	4621      	mov	r1, r4
    1266:	4628      	mov	r0, r5
    1268:	f7ff fcd6 	bl	c18 <context_boot_go>

0000126c <FIH_LABEL_FIH_CALL_END_4679>:
}
    126c:	bd38      	pop	{r3, r4, r5, pc}
    126e:	bf00      	nop
    1270:	2000a71c 	.word	0x2000a71c

00001274 <cleanup_arm_nvic>:
    1274:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1278:	b672      	cpsid	i
    127a:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    127c:	f04f 30ff 	mov.w	r0, #4294967295
    1280:	4a09      	ldr	r2, [pc, #36]	; (12a8 <cleanup_arm_nvic+0x34>)
    1282:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1286:	3301      	adds	r3, #1
    1288:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    128a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    128e:	d1f8      	bne.n	1282 <cleanup_arm_nvic+0xe>
    1290:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1292:	f04f 30ff 	mov.w	r0, #4294967295
    1296:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    129a:	3301      	adds	r3, #1
    129c:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    129e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    12a2:	d1f8      	bne.n	1296 <cleanup_arm_nvic+0x22>
	}
}
    12a4:	4770      	bx	lr
    12a6:	bf00      	nop
    12a8:	e000e100 	.word	0xe000e100

000012ac <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    12ac:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12ae:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    12b0:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    12b4:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12b6:	4b1a      	ldr	r3, [pc, #104]	; (1320 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    12b8:	4629      	mov	r1, r5
    12ba:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    12bc:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    12c0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    12c8:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    12ca:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    12ce:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12d2:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    12d6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    12da:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    12dc:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12e0:	4810      	ldr	r0, [pc, #64]	; (1324 <nrf_cleanup_peripheral+0x78>)
    12e2:	f00a f91d 	bl	b520 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    12e6:	2280      	movs	r2, #128	; 0x80
    12e8:	4629      	mov	r1, r5
    12ea:	480f      	ldr	r0, [pc, #60]	; (1328 <nrf_cleanup_peripheral+0x7c>)
    12ec:	f00a f918 	bl	b520 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    12f0:	4b0e      	ldr	r3, [pc, #56]	; (132c <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    12f2:	2280      	movs	r2, #128	; 0x80
    12f4:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    12f8:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    12fa:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    12fe:	480c      	ldr	r0, [pc, #48]	; (1330 <nrf_cleanup_peripheral+0x84>)
    1300:	f00a f90e 	bl	b520 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1304:	2280      	movs	r2, #128	; 0x80
    1306:	4629      	mov	r1, r5
    1308:	480a      	ldr	r0, [pc, #40]	; (1334 <nrf_cleanup_peripheral+0x88>)
    130a:	f00a f909 	bl	b520 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    130e:	4b0a      	ldr	r3, [pc, #40]	; (1338 <nrf_cleanup_peripheral+0x8c>)
    1310:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1314:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1318:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    131c:	bd38      	pop	{r3, r4, r5, pc}
    131e:	bf00      	nop
    1320:	50014000 	.word	0x50014000
    1324:	50008080 	.word	0x50008080
    1328:	50008180 	.word	0x50008180
    132c:	50009000 	.word	0x50009000
    1330:	50009080 	.word	0x50009080
    1334:	50009180 	.word	0x50009180
    1338:	50017000 	.word	0x50017000

0000133c <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    133c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1340:	4605      	mov	r5, r0
    1342:	9807      	ldr	r0, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1344:	b910      	cbnz	r0, 134c <base64_encode+0x10>
		*olen = 0;
    1346:	6010      	str	r0, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    134c:	2403      	movs	r4, #3
    134e:	fbb0 f4f4 	udiv	r4, r0, r4
    1352:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1356:	42b8      	cmp	r0, r7
    1358:	bf18      	it	ne
    135a:	3401      	addne	r4, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    135c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1360:	d305      	bcc.n	136e <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    1362:	f04f 33ff 	mov.w	r3, #4294967295
    1366:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    1368:	f06f 000b 	mvn.w	r0, #11
    136c:	e7ec      	b.n	1348 <base64_encode+0xc>
	n *= 4;
    136e:	00a4      	lsls	r4, r4, #2
	if ((dlen < n + 1) || (!dst)) {
    1370:	3401      	adds	r4, #1
    1372:	428c      	cmp	r4, r1
    1374:	d800      	bhi.n	1378 <base64_encode+0x3c>
    1376:	b90d      	cbnz	r5, 137c <base64_encode+0x40>
		*olen = n + 1;
    1378:	6014      	str	r4, [r2, #0]
    137a:	e7f5      	b.n	1368 <base64_encode+0x2c>
	for (i = 0, p = dst; i < n; i += 3) {
    137c:	462e      	mov	r6, r5
    137e:	2400      	movs	r4, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1380:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1438 <base64_encode+0xfc>
	for (i = 0, p = dst; i < n; i += 3) {
    1384:	42bc      	cmp	r4, r7
    1386:	4631      	mov	r1, r6
    1388:	469c      	mov	ip, r3
    138a:	f106 0604 	add.w	r6, r6, #4
    138e:	f103 0303 	add.w	r3, r3, #3
    1392:	d329      	bcc.n	13e8 <base64_encode+0xac>
	if (i < slen) {
    1394:	4284      	cmp	r4, r0
    1396:	d222      	bcs.n	13de <base64_encode+0xa2>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1398:	3401      	adds	r4, #1
    139a:	4284      	cmp	r4, r0
    139c:	bf28      	it	cs
    139e:	2300      	movcs	r3, #0
		C1 = *src++;
    13a0:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13a4:	4f24      	ldr	r7, [pc, #144]	; (1438 <base64_encode+0xfc>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    13a6:	bf38      	it	cc
    13a8:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13ac:	ea4f 0ca6 	mov.w	ip, r6, asr #2
    13b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
		if ((i + 1) < slen) {
    13b4:	4284      	cmp	r4, r0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13b6:	f881 c000 	strb.w	ip, [r1]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13ba:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = '=';
    13be:	bf2f      	iteee	cs
    13c0:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    13c2:	009b      	lslcc	r3, r3, #2
    13c4:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
    13c8:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13ca:	0136      	lsls	r6, r6, #4
    13cc:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    13ce:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13d0:	f006 0630 	and.w	r6, r6, #48	; 0x30
    13d4:	f81c 6006 	ldrb.w	r6, [ip, r6]
		*p++ = '=';
    13d8:	70cb      	strb	r3, [r1, #3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    13da:	704e      	strb	r6, [r1, #1]
		*p++ = '=';
    13dc:	3104      	adds	r1, #4
	*p = 0U;
    13de:	2000      	movs	r0, #0
	*olen = p - dst;
    13e0:	1b4d      	subs	r5, r1, r5
    13e2:	6015      	str	r5, [r2, #0]
	*p = 0U;
    13e4:	7008      	strb	r0, [r1, #0]
	return 0;
    13e6:	e7af      	b.n	1348 <base64_encode+0xc>
		C1 = *src++;
    13e8:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    13ec:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    13f0:	ea4f 09ac 	mov.w	r9, ip, asr #2
    13f4:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    13f8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		C3 = *src++;
    13fc:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1400:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1404:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1408:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
    140c:	f819 c00c 	ldrb.w	ip, [r9, ip]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1410:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1412:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1416:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    141a:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
    141e:	f81c 1001 	ldrb.w	r1, [ip, r1]
		*p++ = base64_enc_map[C3 & 0x3F];
    1422:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1426:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    142a:	f81e 1008 	ldrb.w	r1, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    142e:	3403      	adds	r4, #3
		*p++ = base64_enc_map[C3 & 0x3F];
    1430:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1434:	e7a6      	b.n	1384 <base64_encode+0x48>
    1436:	bf00      	nop
    1438:	0000ea3b 	.word	0x0000ea3b

0000143c <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    143c:	468c      	mov	ip, r1
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    143e:	2100      	movs	r1, #0
{
    1440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1444:	4607      	mov	r7, r0
	for (i = n = j = 0U; i < slen; i++) {
    1446:	460d      	mov	r5, r1
    1448:	4608      	mov	r0, r1
{
    144a:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    144c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1568 <base64_decode+0x12c>
	for (i = n = j = 0U; i < slen; i++) {
    1450:	42b5      	cmp	r5, r6
    1452:	d30a      	bcc.n	146a <base64_decode+0x2e>
    1454:	462e      	mov	r6, r5
    1456:	e004      	b.n	1462 <base64_decode+0x26>
			++i;
    1458:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    145a:	42ae      	cmp	r6, r5
			++x;
    145c:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    1460:	d105      	bne.n	146e <base64_decode+0x32>
		}

		n++;
	}

	if (n == 0) {
    1462:	bb90      	cbnz	r0, 14ca <base64_decode+0x8e>
		*olen = 0;
    1464:	6010      	str	r0, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		x = 0U;
    146a:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    146e:	5d5c      	ldrb	r4, [r3, r5]
    1470:	2c20      	cmp	r4, #32
    1472:	d0f1      	beq.n	1458 <base64_decode+0x1c>
		if (i == slen) {
    1474:	42ae      	cmp	r6, r5
    1476:	d0f4      	beq.n	1462 <base64_decode+0x26>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1478:	eba6 0905 	sub.w	r9, r6, r5
    147c:	f1b9 0f01 	cmp.w	r9, #1
    1480:	d013      	beq.n	14aa <base64_decode+0x6e>
    1482:	2c0d      	cmp	r4, #13
    1484:	d111      	bne.n	14aa <base64_decode+0x6e>
    1486:	eb03 0905 	add.w	r9, r3, r5
    148a:	f899 9001 	ldrb.w	r9, [r9, #1]
    148e:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    1492:	d018      	beq.n	14c6 <base64_decode+0x8a>
		if (x != 0U) {
    1494:	f1be 0f00 	cmp.w	lr, #0
    1498:	d104      	bne.n	14a4 <base64_decode+0x68>
		if (src[i] == '=' && ++j > 2) {
    149a:	2c3d      	cmp	r4, #61	; 0x3d
    149c:	d107      	bne.n	14ae <base64_decode+0x72>
    149e:	3101      	adds	r1, #1
    14a0:	2902      	cmp	r1, #2
    14a2:	d907      	bls.n	14b4 <base64_decode+0x78>
			return -EINVAL;
    14a4:	f06f 0015 	mvn.w	r0, #21
    14a8:	e7dd      	b.n	1466 <base64_decode+0x2a>
		if (src[i] == '\n') {
    14aa:	2c0a      	cmp	r4, #10
    14ac:	e7f1      	b.n	1492 <base64_decode+0x56>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    14ae:	f014 0f80 	tst.w	r4, #128	; 0x80
    14b2:	d1f7      	bne.n	14a4 <base64_decode+0x68>
    14b4:	f818 4004 	ldrb.w	r4, [r8, r4]
    14b8:	2c7f      	cmp	r4, #127	; 0x7f
    14ba:	d0f3      	beq.n	14a4 <base64_decode+0x68>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    14bc:	2c3f      	cmp	r4, #63	; 0x3f
    14be:	d801      	bhi.n	14c4 <base64_decode+0x88>
    14c0:	2900      	cmp	r1, #0
    14c2:	d1ef      	bne.n	14a4 <base64_decode+0x68>
		n++;
    14c4:	3001      	adds	r0, #1
	for (i = n = j = 0U; i < slen; i++) {
    14c6:	3501      	adds	r5, #1
    14c8:	e7c2      	b.n	1450 <base64_decode+0x14>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    14ca:	f04f 0e06 	mov.w	lr, #6
    14ce:	f000 0507 	and.w	r5, r0, #7
    14d2:	08c4      	lsrs	r4, r0, #3
    14d4:	fb0e f505 	mul.w	r5, lr, r5
    14d8:	fb0e f404 	mul.w	r4, lr, r4
    14dc:	3507      	adds	r5, #7
	n -= j;
    14de:	1a64      	subs	r4, r4, r1
    14e0:	eb04 04d5 	add.w	r4, r4, r5, lsr #3
	if (dst == NULL || dlen < n) {
    14e4:	b18f      	cbz	r7, 150a <base64_decode+0xce>
    14e6:	4564      	cmp	r4, ip
    14e8:	d80f      	bhi.n	150a <base64_decode+0xce>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14ea:	2400      	movs	r4, #0
    14ec:	469c      	mov	ip, r3
    14ee:	441e      	add	r6, r3
    14f0:	2003      	movs	r0, #3
	if (dst == NULL || dlen < n) {
    14f2:	463b      	mov	r3, r7
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14f4:	4621      	mov	r1, r4
		j -= (base64_dec_map[*src] == 64U);
    14f6:	f8df e070 	ldr.w	lr, [pc, #112]	; 1568 <base64_decode+0x12c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    14fa:	f8df 8070 	ldr.w	r8, [pc, #112]	; 156c <base64_decode+0x130>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    14fe:	4566      	cmp	r6, ip
    1500:	d107      	bne.n	1512 <base64_decode+0xd6>
	*olen = p - dst;
    1502:	1bdb      	subs	r3, r3, r7
	return 0;
    1504:	2000      	movs	r0, #0
	*olen = p - dst;
    1506:	6013      	str	r3, [r2, #0]
	return 0;
    1508:	e7ad      	b.n	1466 <base64_decode+0x2a>
		return -ENOMEM;
    150a:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    150e:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    1510:	e7a9      	b.n	1466 <base64_decode+0x2a>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1512:	f81c 9b01 	ldrb.w	r9, [ip], #1
    1516:	f1a9 050a 	sub.w	r5, r9, #10
    151a:	b2ed      	uxtb	r5, r5
    151c:	2d16      	cmp	r5, #22
    151e:	d803      	bhi.n	1528 <base64_decode+0xec>
    1520:	fa28 f505 	lsr.w	r5, r8, r5
    1524:	07ed      	lsls	r5, r5, #31
    1526:	d4ea      	bmi.n	14fe <base64_decode+0xc2>
		j -= (base64_dec_map[*src] == 64U);
    1528:	f81e 5009 	ldrb.w	r5, [lr, r9]
		if (++n == 4) {
    152c:	3101      	adds	r1, #1
		j -= (base64_dec_map[*src] == 64U);
    152e:	2d40      	cmp	r5, #64	; 0x40
    1530:	bf08      	it	eq
    1532:	3801      	subeq	r0, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1534:	f005 053f 	and.w	r5, r5, #63	; 0x3f
		if (++n == 4) {
    1538:	2904      	cmp	r1, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    153a:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
		if (++n == 4) {
    153e:	d1de      	bne.n	14fe <base64_decode+0xc2>
			if (j > 0) {
    1540:	b178      	cbz	r0, 1562 <base64_decode+0x126>
				*p++ = (unsigned char)(x >> 16);
    1542:	0c21      	lsrs	r1, r4, #16
			if (j > 1) {
    1544:	2801      	cmp	r0, #1
				*p++ = (unsigned char)(x >> 16);
    1546:	7019      	strb	r1, [r3, #0]
			if (j > 1) {
    1548:	d102      	bne.n	1550 <base64_decode+0x114>
				*p++ = (unsigned char)(x >> 16);
    154a:	3301      	adds	r3, #1
			n = 0;
    154c:	2100      	movs	r1, #0
    154e:	e7d6      	b.n	14fe <base64_decode+0xc2>
			if (j > 2) {
    1550:	2802      	cmp	r0, #2
				*p++ = (unsigned char)(x >> 8);
    1552:	ea4f 2114 	mov.w	r1, r4, lsr #8
    1556:	7059      	strb	r1, [r3, #1]
				*p++ = (unsigned char)(x);
    1558:	bf16      	itet	ne
    155a:	709c      	strbne	r4, [r3, #2]
				*p++ = (unsigned char)(x >> 8);
    155c:	3302      	addeq	r3, #2
				*p++ = (unsigned char)(x);
    155e:	3303      	addne	r3, #3
    1560:	e7f4      	b.n	154c <base64_decode+0x110>
			n = 0;
    1562:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1564:	e7cb      	b.n	14fe <base64_decode+0xc2>
    1566:	bf00      	nop
    1568:	0000e9bb 	.word	0x0000e9bb
    156c:	00400009 	.word	0x00400009

00001570 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1574:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    1578:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    157a:	f019 0808 	ands.w	r8, r9, #8
{
    157e:	4693      	mov	fp, r2
	if (processing) {
    1580:	d00d      	beq.n	159e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1582:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1584:	bf0c      	ite	eq
    1586:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    158a:	f049 0920 	orrne.w	r9, r9, #32
    158e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1592:	f38b 8811 	msr	BASEPRI, fp
    1596:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    159a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    159e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    15a2:	2902      	cmp	r1, #2
    15a4:	d107      	bne.n	15b6 <process_event+0x46>
			evt = process_recheck(mgr);
    15a6:	4620      	mov	r0, r4
    15a8:	f008 fe45 	bl	a236 <process_recheck>
		if (evt == EVT_NOP) {
    15ac:	2800      	cmp	r0, #0
    15ae:	d0f0      	beq.n	1592 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    15b0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15b2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    15b4:	d14e      	bne.n	1654 <process_event+0xe4>
			res = mgr->last_res;
    15b6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15b8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    15ba:	2f00      	cmp	r7, #0
    15bc:	da15      	bge.n	15ea <process_event+0x7a>
		*clients = mgr->clients;
    15be:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15c0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    15c4:	e9c4 8800 	strd	r8, r8, [r4]
    15c8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    15cc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    15ce:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15d0:	8b21      	ldrh	r1, [r4, #24]
    15d2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    15d6:	45ca      	cmp	sl, r9
    15d8:	d002      	beq.n	15e0 <process_event+0x70>
		if (do_monitors
    15da:	68a3      	ldr	r3, [r4, #8]
    15dc:	2b00      	cmp	r3, #0
    15de:	d15a      	bne.n	1696 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    15e0:	b90d      	cbnz	r5, 15e6 <process_event+0x76>
		    || (transit != NULL)) {
    15e2:	2e00      	cmp	r6, #0
    15e4:	d071      	beq.n	16ca <process_event+0x15a>
    15e6:	2300      	movs	r3, #0
    15e8:	e056      	b.n	1698 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15ea:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    15ee:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    15f0:	2a01      	cmp	r2, #1
    15f2:	d81e      	bhi.n	1632 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15f4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    15f8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    15fa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15fc:	b289      	uxth	r1, r1
    15fe:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1602:	d10a      	bne.n	161a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1604:	b13d      	cbz	r5, 1616 <process_event+0xa6>
    1606:	462a      	mov	r2, r5
    1608:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    160a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    160c:	3301      	adds	r3, #1
    160e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1610:	2a00      	cmp	r2, #0
    1612:	d1fa      	bne.n	160a <process_event+0x9a>
    1614:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1616:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    161a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    161c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    161e:	f008 fe0a 	bl	a236 <process_recheck>
    1622:	4606      	mov	r6, r0
    1624:	2800      	cmp	r0, #0
    1626:	d0d3      	beq.n	15d0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1628:	8b23      	ldrh	r3, [r4, #24]
    162a:	f043 0320 	orr.w	r3, r3, #32
    162e:	8323      	strh	r3, [r4, #24]
    1630:	e7cd      	b.n	15ce <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1632:	2b04      	cmp	r3, #4
    1634:	d10c      	bne.n	1650 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1636:	f021 0107 	bic.w	r1, r1, #7
    163a:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    163c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    163e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1640:	f008 fdf9 	bl	a236 <process_recheck>
    1644:	4605      	mov	r5, r0
    1646:	2800      	cmp	r0, #0
    1648:	d0c1      	beq.n	15ce <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    164a:	f041 0120 	orr.w	r1, r1, #32
    164e:	8321      	strh	r1, [r4, #24]
    1650:	2500      	movs	r5, #0
    1652:	e7bc      	b.n	15ce <process_event+0x5e>
		} else if (evt == EVT_START) {
    1654:	2803      	cmp	r0, #3
    1656:	d109      	bne.n	166c <process_event+0xfc>
			transit = mgr->transitions->start;
    1658:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    165a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    165e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1660:	f043 0306 	orr.w	r3, r3, #6
}
    1664:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    1666:	8323      	strh	r3, [r4, #24]
		res = 0;
    1668:	462f      	mov	r7, r5
    166a:	e7b1      	b.n	15d0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    166c:	2804      	cmp	r0, #4
    166e:	d106      	bne.n	167e <process_event+0x10e>
			transit = mgr->transitions->stop;
    1670:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1672:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1676:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1678:	f043 0304 	orr.w	r3, r3, #4
    167c:	e7f2      	b.n	1664 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    167e:	2805      	cmp	r0, #5
    1680:	d106      	bne.n	1690 <process_event+0x120>
			transit = mgr->transitions->reset;
    1682:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1684:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1688:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    168a:	f043 0305 	orr.w	r3, r3, #5
    168e:	e7e9      	b.n	1664 <process_event+0xf4>
    1690:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1692:	462e      	mov	r6, r5
    1694:	e7e8      	b.n	1668 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1696:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1698:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    169c:	8321      	strh	r1, [r4, #24]
    169e:	f38b 8811 	msr	BASEPRI, fp
    16a2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    16a6:	b9fb      	cbnz	r3, 16e8 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    16a8:	bb85      	cbnz	r5, 170c <process_event+0x19c>
			if (transit != NULL) {
    16aa:	b116      	cbz	r6, 16b2 <process_event+0x142>
				transit(mgr, transition_complete);
    16ac:	4620      	mov	r0, r4
    16ae:	491f      	ldr	r1, [pc, #124]	; (172c <process_event+0x1bc>)
    16b0:	47b0      	blx	r6
	__asm__ volatile(
    16b2:	f04f 0320 	mov.w	r3, #32
    16b6:	f3ef 8b11 	mrs	fp, BASEPRI
    16ba:	f383 8812 	msr	BASEPRI_MAX, r3
    16be:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    16c2:	8b23      	ldrh	r3, [r4, #24]
    16c4:	f023 0308 	bic.w	r3, r3, #8
    16c8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    16ca:	8b23      	ldrh	r3, [r4, #24]
    16cc:	06da      	lsls	r2, r3, #27
    16ce:	d525      	bpl.n	171c <process_event+0x1ac>
			evt = EVT_COMPLETE;
    16d0:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    16d2:	f023 0310 	bic.w	r3, r3, #16
    16d6:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    16d8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    16dc:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    16e0:	2900      	cmp	r1, #0
    16e2:	f47f af5e 	bne.w	15a2 <process_event+0x32>
out:
    16e6:	e754      	b.n	1592 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    16e8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16ea:	2900      	cmp	r1, #0
    16ec:	d0dc      	beq.n	16a8 <process_event+0x138>
	return node->next;
    16ee:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    16f2:	463b      	mov	r3, r7
    16f4:	4652      	mov	r2, sl
    16f6:	4620      	mov	r0, r4
    16f8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    16fc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16fe:	f1b9 0f00 	cmp.w	r9, #0
    1702:	d0d1      	beq.n	16a8 <process_event+0x138>
    1704:	4649      	mov	r1, r9
    1706:	f8d9 9000 	ldr.w	r9, [r9]
    170a:	e7f2      	b.n	16f2 <process_event+0x182>
    170c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    170e:	463b      	mov	r3, r7
    1710:	4652      	mov	r2, sl
    1712:	4620      	mov	r0, r4
    1714:	682d      	ldr	r5, [r5, #0]
    1716:	f008 fdaa 	bl	a26e <notify_one>
    171a:	e7c5      	b.n	16a8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    171c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1720:	bf1e      	ittt	ne
    1722:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    1726:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1728:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    172a:	e7d5      	b.n	16d8 <process_event+0x168>
    172c:	0000a29b 	.word	0x0000a29b

00001730 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1734:	468a      	mov	sl, r1
	size_t count = 0;
    1736:	f04f 0900 	mov.w	r9, #0
{
    173a:	b08f      	sub	sp, #60	; 0x3c
    173c:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    173e:	1e53      	subs	r3, r2, #1
{
    1740:	9001      	str	r0, [sp, #4]
	fmt--;
    1742:	9302      	str	r3, [sp, #8]

start:
	while (*++fmt != '%') {
    1744:	9b02      	ldr	r3, [sp, #8]
    1746:	7858      	ldrb	r0, [r3, #1]
    1748:	1c5c      	adds	r4, r3, #1
    174a:	2825      	cmp	r0, #37	; 0x25
    174c:	d121      	bne.n	1792 <z_cbvprintf_impl+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    174e:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    1752:	f04f 37ff 	mov.w	r7, #4294967295

	for (fmt++ ; ; fmt++) {
    1756:	4618      	mov	r0, r3
	length_mod = 0;
    1758:	4661      	mov	r1, ip
	min_width = -1;
    175a:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    175c:	260a      	movs	r6, #10
	for (fmt++ ; ; fmt++) {
    175e:	3002      	adds	r0, #2
	padding_mode = 0;
    1760:	f8cd c00c 	str.w	ip, [sp, #12]
		switch (*fmt) {
    1764:	7802      	ldrb	r2, [r0, #0]
    1766:	9002      	str	r0, [sp, #8]
    1768:	2a39      	cmp	r2, #57	; 0x39
    176a:	f100 0001 	add.w	r0, r0, #1
    176e:	d859      	bhi.n	1824 <z_cbvprintf_impl+0xf4>
    1770:	2a1f      	cmp	r2, #31
    1772:	d818      	bhi.n	17a6 <z_cbvprintf_impl+0x76>
    1774:	2a00      	cmp	r2, #0
    1776:	f000 81f7 	beq.w	1b68 <CONFIG_USB_DEVICE_VID+0x253>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    177a:	4651      	mov	r1, sl
    177c:	9b01      	ldr	r3, [sp, #4]
    177e:	2025      	movs	r0, #37	; 0x25
    1780:	4798      	blx	r3
			OUTC(*fmt);
    1782:	9b02      	ldr	r3, [sp, #8]
    1784:	4651      	mov	r1, sl
    1786:	7818      	ldrb	r0, [r3, #0]
    1788:	9b01      	ldr	r3, [sp, #4]
    178a:	4798      	blx	r3
    178c:	f109 0902 	add.w	r9, r9, #2
			goto start;
    1790:	e7d8      	b.n	1744 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    1792:	2800      	cmp	r0, #0
    1794:	f000 81e8 	beq.w	1b68 <CONFIG_USB_DEVICE_VID+0x253>
		OUTC(*fmt);
    1798:	4651      	mov	r1, sl
    179a:	9b01      	ldr	r3, [sp, #4]
    179c:	4798      	blx	r3
    179e:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    17a2:	9402      	str	r4, [sp, #8]
    17a4:	e7ce      	b.n	1744 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    17a6:	f1a2 0320 	sub.w	r3, r2, #32
    17aa:	2b19      	cmp	r3, #25
    17ac:	d8e5      	bhi.n	177a <z_cbvprintf_impl+0x4a>
    17ae:	f20f 0e08 	addw	lr, pc, #8
    17b2:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    17b6:	bf00      	nop
    17b8:	00001821 	.word	0x00001821
    17bc:	0000177b 	.word	0x0000177b
    17c0:	0000177b 	.word	0x0000177b
    17c4:	00001821 	.word	0x00001821
    17c8:	0000177b 	.word	0x0000177b
    17cc:	000018a5 	.word	0x000018a5
    17d0:	0000177b 	.word	0x0000177b
    17d4:	0000177b 	.word	0x0000177b
    17d8:	0000177b 	.word	0x0000177b
    17dc:	0000177b 	.word	0x0000177b
    17e0:	000018e7 	.word	0x000018e7
    17e4:	00001821 	.word	0x00001821
    17e8:	0000177b 	.word	0x0000177b
    17ec:	000018fb 	.word	0x000018fb
    17f0:	000018b3 	.word	0x000018b3
    17f4:	0000177b 	.word	0x0000177b
    17f8:	000018bf 	.word	0x000018bf
    17fc:	000018db 	.word	0x000018db
    1800:	000018db 	.word	0x000018db
    1804:	000018db 	.word	0x000018db
    1808:	000018db 	.word	0x000018db
    180c:	000018db 	.word	0x000018db
    1810:	000018db 	.word	0x000018db
    1814:	000018db 	.word	0x000018db
    1818:	000018db 	.word	0x000018db
    181c:	000018db 	.word	0x000018db
    1820:	4694      	mov	ip, r2
    1822:	e79f      	b.n	1764 <z_cbvprintf_impl+0x34>
    1824:	2a58      	cmp	r2, #88	; 0x58
    1826:	f000 811b 	beq.w	1a60 <CONFIG_USB_DEVICE_VID+0x14b>
    182a:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    182e:	fa5f fe83 	uxtb.w	lr, r3
    1832:	f1be 0f17 	cmp.w	lr, #23
    1836:	d8a0      	bhi.n	177a <z_cbvprintf_impl+0x4a>
    1838:	2b17      	cmp	r3, #23
    183a:	d89e      	bhi.n	177a <z_cbvprintf_impl+0x4a>
    183c:	f20f 0e04 	addw	lr, pc, #4
    1840:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1844:	00001ac3 	.word	0x00001ac3
    1848:	00001921 	.word	0x00001921
    184c:	0000177b 	.word	0x0000177b
    1850:	0000177b 	.word	0x0000177b
    1854:	0000177b 	.word	0x0000177b
    1858:	00001901 	.word	0x00001901
    185c:	00001921 	.word	0x00001921
    1860:	0000177b 	.word	0x0000177b
    1864:	0000177b 	.word	0x0000177b
    1868:	00001901 	.word	0x00001901
    186c:	0000177b 	.word	0x0000177b
    1870:	0000177b 	.word	0x0000177b
    1874:	0000177b 	.word	0x0000177b
    1878:	00001a0b 	.word	0x00001a0b
    187c:	0000177b 	.word	0x0000177b
    1880:	0000177b 	.word	0x0000177b
    1884:	00001aa3 	.word	0x00001aa3
    1888:	0000177b 	.word	0x0000177b
    188c:	00001921 	.word	0x00001921
    1890:	0000177b 	.word	0x0000177b
    1894:	0000177b 	.word	0x0000177b
    1898:	00001a0b 	.word	0x00001a0b
    189c:	0000177b 	.word	0x0000177b
    18a0:	00001901 	.word	0x00001901
			OUTC('%');
    18a4:	4651      	mov	r1, sl
    18a6:	2025      	movs	r0, #37	; 0x25
    18a8:	9b01      	ldr	r3, [sp, #4]
    18aa:	4798      	blx	r3
    18ac:	f109 0901 	add.w	r9, r9, #1
			goto start;
    18b0:	e748      	b.n	1744 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    18b2:	9b03      	ldr	r3, [sp, #12]
			precision = 0;
    18b4:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    18b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    18ba:	9303      	str	r3, [sp, #12]
			continue;
    18bc:	e752      	b.n	1764 <z_cbvprintf_impl+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    18be:	2c00      	cmp	r4, #0
    18c0:	da0b      	bge.n	18da <z_cbvprintf_impl+0x1aa>
    18c2:	2f00      	cmp	r7, #0
    18c4:	da0b      	bge.n	18de <z_cbvprintf_impl+0x1ae>
    18c6:	9b03      	ldr	r3, [sp, #12]
    18c8:	2b00      	cmp	r3, #0
    18ca:	f000 8149 	beq.w	1b60 <CONFIG_USB_DEVICE_VID+0x24b>
				min_width = 10 * min_width + *fmt - '0';
    18ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    18d2:	fb06 2404 	mla	r4, r6, r4, r2
    18d6:	3c30      	subs	r4, #48	; 0x30
    18d8:	e744      	b.n	1764 <z_cbvprintf_impl+0x34>
			if (precision >= 0) {
    18da:	2f00      	cmp	r7, #0
    18dc:	dbf7      	blt.n	18ce <z_cbvprintf_impl+0x19e>
				precision = 10 * precision + *fmt - '0';
    18de:	fb06 2707 	mla	r7, r6, r7, r2
    18e2:	3f30      	subs	r7, #48	; 0x30
    18e4:	e73e      	b.n	1764 <z_cbvprintf_impl+0x34>
			if (precision >= 0) {
    18e6:	2f00      	cmp	r7, #0
    18e8:	f855 3b04 	ldr.w	r3, [r5], #4
    18ec:	db01      	blt.n	18f2 <z_cbvprintf_impl+0x1c2>
				precision = va_arg(ap, int);
    18ee:	461f      	mov	r7, r3
    18f0:	e738      	b.n	1764 <z_cbvprintf_impl+0x34>
				if (min_width < 0) {
    18f2:	1e1c      	subs	r4, r3, #0
    18f4:	f6bf af36 	bge.w	1764 <z_cbvprintf_impl+0x34>
					min_width = -min_width;
    18f8:	4264      	negs	r4, r4
		switch (*fmt) {
    18fa:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    18fc:	9303      	str	r3, [sp, #12]
    18fe:	e731      	b.n	1764 <z_cbvprintf_impl+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    1900:	2a68      	cmp	r2, #104	; 0x68
    1902:	d103      	bne.n	190c <z_cbvprintf_impl+0x1dc>
    1904:	2968      	cmp	r1, #104	; 0x68
    1906:	d106      	bne.n	1916 <CONFIG_USB_DEVICE_VID+0x1>
				length_mod = 'H';
    1908:	2148      	movs	r1, #72	; 0x48
    190a:	e72b      	b.n	1764 <z_cbvprintf_impl+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    190c:	2a6c      	cmp	r2, #108	; 0x6c
    190e:	d102      	bne.n	1916 <CONFIG_USB_DEVICE_VID+0x1>
    1910:	296c      	cmp	r1, #108	; 0x6c
    1912:	f000 8127 	beq.w	1b64 <CONFIG_USB_DEVICE_VID+0x24f>
			} else if (length_mod == '\0') {
    1916:	2900      	cmp	r1, #0
    1918:	f47f af2f 	bne.w	177a <z_cbvprintf_impl+0x4a>
    191c:	4611      	mov	r1, r2
		switch (*fmt) {
    191e:	e721      	b.n	1764 <z_cbvprintf_impl+0x34>
			if (length_mod == 'z') {
    1920:	297a      	cmp	r1, #122	; 0x7a
    1922:	d107      	bne.n	1934 <CONFIG_USB_DEVICE_VID+0x1f>
			} else if (*fmt == 'u') {
    1924:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    1926:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
    192a:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
    192c:	d162      	bne.n	19f4 <CONFIG_USB_DEVICE_VID+0xdf>
				d = va_arg(ap, unsigned int);
    192e:	f04f 0800 	mov.w	r8, #0
    1932:	e00d      	b.n	1950 <CONFIG_USB_DEVICE_VID+0x3b>
			} else if (length_mod == 'l') {
    1934:	296c      	cmp	r1, #108	; 0x6c
    1936:	d0f5      	beq.n	1924 <CONFIG_USB_DEVICE_VID+0xf>
			} else if (length_mod == 'L') {
    1938:	294c      	cmp	r1, #76	; 0x4c
    193a:	d1f3      	bne.n	1924 <CONFIG_USB_DEVICE_VID+0xf>
					unsigned long long llu =
    193c:	1deb      	adds	r3, r5, #7
    193e:	f023 0307 	bic.w	r3, r3, #7
    1942:	461e      	mov	r6, r3
				if (*fmt == 'u') {
    1944:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
    1946:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
    194a:	d107      	bne.n	195c <CONFIG_USB_DEVICE_VID+0x47>
					unsigned long long llu =
    194c:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
    1950:	f1bc 0f20 	cmp.w	ip, #32
    1954:	d151      	bne.n	19fa <CONFIG_USB_DEVICE_VID+0xe5>
				prefix = " ";
    1956:	4b86      	ldr	r3, [pc, #536]	; (1b70 <CONFIG_USB_DEVICE_VID+0x25b>)
				min_width--;
    1958:	3c01      	subs	r4, #1
    195a:	e009      	b.n	1970 <CONFIG_USB_DEVICE_VID+0x5b>
					d = (int_value_type) lld;
    195c:	4605      	mov	r5, r0
    195e:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1960:	f1b8 0f00 	cmp.w	r8, #0
    1964:	daf4      	bge.n	1950 <CONFIG_USB_DEVICE_VID+0x3b>
				d = -d;
    1966:	426d      	negs	r5, r5
				prefix = "-";
    1968:	4b82      	ldr	r3, [pc, #520]	; (1b74 <CONFIG_USB_DEVICE_VID+0x25f>)
				d = -d;
    196a:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
    196e:	3c01      	subs	r4, #1
	int i = 0;
    1970:	f04f 0b00 	mov.w	fp, #0
	prefix = "";
    1974:	9300      	str	r3, [sp, #0]
	int i = 0;
    1976:	ab0d      	add	r3, sp, #52	; 0x34
    1978:	9305      	str	r3, [sp, #20]
		unsigned int c = num % base;
    197a:	4628      	mov	r0, r5
    197c:	4641      	mov	r1, r8
    197e:	220a      	movs	r2, #10
    1980:	2300      	movs	r3, #0
    1982:	f8cd b010 	str.w	fp, [sp, #16]
    1986:	f7fe fbe5 	bl	154 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    198a:	9b05      	ldr	r3, [sp, #20]
    198c:	3230      	adds	r2, #48	; 0x30
    198e:	f803 2901 	strb.w	r2, [r3], #-1
    1992:	e9cd 3505 	strd	r3, r5, [sp, #20]
		num /= base;
    1996:	4628      	mov	r0, r5
    1998:	2300      	movs	r3, #0
    199a:	4641      	mov	r1, r8
    199c:	220a      	movs	r2, #10
    199e:	f8cd 801c 	str.w	r8, [sp, #28]
    19a2:	f7fe fbd7 	bl	154 <__aeabi_uldivmod>
	} while (num);
    19a6:	9b06      	ldr	r3, [sp, #24]
		num /= base;
    19a8:	4605      	mov	r5, r0
	} while (num);
    19aa:	2b0a      	cmp	r3, #10
    19ac:	9b07      	ldr	r3, [sp, #28]
		num /= base;
    19ae:	4688      	mov	r8, r1
	} while (num);
    19b0:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    19b4:	f10b 3bff 	add.w	fp, fp, #4294967295
	} while (num);
    19b8:	d2df      	bcs.n	197a <CONFIG_USB_DEVICE_VID+0x65>
	return -i;
    19ba:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    19bc:	9a04      	ldr	r2, [sp, #16]
	return -i;
    19be:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    19c2:	ab0e      	add	r3, sp, #56	; 0x38
    19c4:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    19c6:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    19c8:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    19cc:	da04      	bge.n	19d8 <CONFIG_USB_DEVICE_VID+0xc3>
    19ce:	9b03      	ldr	r3, [sp, #12]
    19d0:	f013 0f01 	tst.w	r3, #1
    19d4:	bf18      	it	ne
    19d6:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    19d8:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    19da:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
    19de:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
    19e2:	bfd4      	ite	le
    19e4:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
    19e8:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
    19ea:	079b      	lsls	r3, r3, #30
    19ec:	f100 8081 	bmi.w	1af2 <CONFIG_USB_DEVICE_VID+0x1dd>
    19f0:	4627      	mov	r7, r4
    19f2:	e077      	b.n	1ae4 <CONFIG_USB_DEVICE_VID+0x1cf>
				d = va_arg(ap, int);
    19f4:	ea4f 78e5 	mov.w	r8, r5, asr #31
    19f8:	e7b2      	b.n	1960 <CONFIG_USB_DEVICE_VID+0x4b>
			} else if (special == '+') {
    19fa:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    19fe:	bf0a      	itet	eq
    1a00:	4b5d      	ldreq	r3, [pc, #372]	; (1b78 <CONFIG_USB_DEVICE_VID+0x263>)
	prefix = "";
    1a02:	4b5e      	ldrne	r3, [pc, #376]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
				min_width--;
    1a04:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1a08:	e7b2      	b.n	1970 <CONFIG_USB_DEVICE_VID+0x5b>
			if (*fmt == 'p') {
    1a0a:	2a70      	cmp	r2, #112	; 0x70
    1a0c:	d128      	bne.n	1a60 <CONFIG_USB_DEVICE_VID+0x14b>
				x = (uintptr_t)va_arg(ap, void *);
    1a0e:	462e      	mov	r6, r5
    1a10:	f856 1b04 	ldr.w	r1, [r6], #4
    1a14:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1a16:	2900      	cmp	r1, #0
    1a18:	d05c      	beq.n	1ad4 <CONFIG_USB_DEVICE_VID+0x1bf>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1a1a:	4859      	ldr	r0, [pc, #356]	; (1b80 <CONFIG_USB_DEVICE_VID+0x26b>)
    1a1c:	9000      	str	r0, [sp, #0]
				min_width -= 2;
    1a1e:	3c02      	subs	r4, #2
	int i = 0;
    1a20:	2500      	movs	r5, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1a22:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1a26:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
    1a2a:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    1a2e:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
    1a32:	2a09      	cmp	r2, #9
			c += alpha;
    1a34:	bf88      	it	hi
    1a36:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
    1a38:	3230      	adds	r2, #48	; 0x30
    1a3a:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    1a3e:	2910      	cmp	r1, #16
		num /= base;
    1a40:	ea4f 1211 	mov.w	r2, r1, lsr #4
    1a44:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    1a48:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1a4c:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1a50:	f105 3cff 	add.w	ip, r5, #4294967295
	} while (num);
    1a54:	d221      	bcs.n	1a9a <CONFIG_USB_DEVICE_VID+0x185>
			data = buf + sizeof(buf) - data_len;
    1a56:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    1a58:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
    1a5c:	441d      	add	r5, r3
    1a5e:	e7b2      	b.n	19c6 <CONFIG_USB_DEVICE_VID+0xb1>
			} else if (length_mod == 'l') {
    1a60:	296c      	cmp	r1, #108	; 0x6c
    1a62:	d104      	bne.n	1a6e <CONFIG_USB_DEVICE_VID+0x159>
				x = va_arg(ap, unsigned int);
    1a64:	462e      	mov	r6, r5
    1a66:	2300      	movs	r3, #0
    1a68:	f856 1b04 	ldr.w	r1, [r6], #4
    1a6c:	e008      	b.n	1a80 <CONFIG_USB_DEVICE_VID+0x16b>
			} else if (length_mod == 'L') {
    1a6e:	294c      	cmp	r1, #76	; 0x4c
    1a70:	d1f8      	bne.n	1a64 <CONFIG_USB_DEVICE_VID+0x14f>
				unsigned long long llx =
    1a72:	3507      	adds	r5, #7
    1a74:	f025 0507 	bic.w	r5, r5, #7
    1a78:	462e      	mov	r6, r5
    1a7a:	686b      	ldr	r3, [r5, #4]
    1a7c:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
    1a80:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1a84:	d106      	bne.n	1a94 <CONFIG_USB_DEVICE_VID+0x17f>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1a86:	4d3f      	ldr	r5, [pc, #252]	; (1b84 <CONFIG_USB_DEVICE_VID+0x26f>)
    1a88:	f012 0f20 	tst.w	r2, #32
    1a8c:	483c      	ldr	r0, [pc, #240]	; (1b80 <CONFIG_USB_DEVICE_VID+0x26b>)
    1a8e:	bf08      	it	eq
    1a90:	4628      	moveq	r0, r5
    1a92:	e7c3      	b.n	1a1c <CONFIG_USB_DEVICE_VID+0x107>
	prefix = "";
    1a94:	4839      	ldr	r0, [pc, #228]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
    1a96:	9000      	str	r0, [sp, #0]
    1a98:	e7c2      	b.n	1a20 <CONFIG_USB_DEVICE_VID+0x10b>
		buftop[--i] = c + '0';
    1a9a:	4665      	mov	r5, ip
		num /= base;
    1a9c:	4611      	mov	r1, r2
    1a9e:	4603      	mov	r3, r0
    1aa0:	e7c5      	b.n	1a2e <CONFIG_USB_DEVICE_VID+0x119>
			data = va_arg(ap, char *);
    1aa2:	462e      	mov	r6, r5
    1aa4:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
    1aa8:	4628      	mov	r0, r5
    1aaa:	f009 fcfe 	bl	b4aa <strlen>
			if (precision >= 0 && data_len > precision) {
    1aae:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    1ab0:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1ab2:	db02      	blt.n	1aba <CONFIG_USB_DEVICE_VID+0x1a5>
    1ab4:	42b8      	cmp	r0, r7
    1ab6:	bfa8      	it	ge
    1ab8:	46bb      	movge	fp, r7
    1aba:	4b30      	ldr	r3, [pc, #192]	; (1b7c <CONFIG_USB_DEVICE_VID+0x267>)
    1abc:	2700      	movs	r7, #0
    1abe:	9300      	str	r3, [sp, #0]
    1ac0:	e78a      	b.n	19d8 <CONFIG_USB_DEVICE_VID+0xc3>
			c = va_arg(ap, int);
    1ac2:	462e      	mov	r6, r5
			buf[0] = c;
    1ac4:	f856 3b04 	ldr.w	r3, [r6], #4
			data_len = 1;
    1ac8:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1acc:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    1ad0:	ad08      	add	r5, sp, #32
    1ad2:	e7f2      	b.n	1aba <CONFIG_USB_DEVICE_VID+0x1a5>
					data_len = 5;
    1ad4:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1ad8:	4d2b      	ldr	r5, [pc, #172]	; (1b88 <CONFIG_USB_DEVICE_VID+0x273>)
    1ada:	e7ee      	b.n	1aba <CONFIG_USB_DEVICE_VID+0x1a5>
			while (--min_width >= 0) {
				OUTC(' ');
    1adc:	4651      	mov	r1, sl
    1ade:	2020      	movs	r0, #32
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	4798      	blx	r3
			while (--min_width >= 0) {
    1ae4:	3f01      	subs	r7, #1
    1ae6:	d5f9      	bpl.n	1adc <CONFIG_USB_DEVICE_VID+0x1c7>
    1ae8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    1aec:	3c01      	subs	r4, #1
    1aee:	4499      	add	r9, r3
    1af0:	1ae4      	subs	r4, r4, r3
    1af2:	9b00      	ldr	r3, [sp, #0]
    1af4:	eba9 0903 	sub.w	r9, r9, r3
    1af8:	e004      	b.n	1b04 <CONFIG_USB_DEVICE_VID+0x1ef>
    1afa:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1afc:	4651      	mov	r1, sl
    1afe:	9b01      	ldr	r3, [sp, #4]
    1b00:	4798      	blx	r3
    1b02:	9b00      	ldr	r3, [sp, #0]
    1b04:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
    1b08:	f813 0b01 	ldrb.w	r0, [r3], #1
    1b0c:	2800      	cmp	r0, #0
    1b0e:	d1f4      	bne.n	1afa <CONFIG_USB_DEVICE_VID+0x1e5>
		precision -= data_len;
    1b10:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
    1b12:	f1b9 0901 	subs.w	r9, r9, #1
    1b16:	d513      	bpl.n	1b40 <CONFIG_USB_DEVICE_VID+0x22b>
    1b18:	46d9      	mov	r9, fp
    1b1a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
			OUTC('0');
		}
		while (--data_len >= 0) {
    1b1e:	f1b9 0901 	subs.w	r9, r9, #1
    1b22:	d512      	bpl.n	1b4a <CONFIG_USB_DEVICE_VID+0x235>
    1b24:	f1bb 0f00 	cmp.w	fp, #0
    1b28:	bfa8      	it	ge
    1b2a:	44d8      	addge	r8, fp
    1b2c:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1b2e:	3d01      	subs	r5, #1
    1b30:	d511      	bpl.n	1b56 <CONFIG_USB_DEVICE_VID+0x241>
    1b32:	2c00      	cmp	r4, #0
    1b34:	bfa8      	it	ge
    1b36:	44a0      	addge	r8, r4
    1b38:	4635      	mov	r5, r6
    1b3a:	eb08 0907 	add.w	r9, r8, r7
    1b3e:	e601      	b.n	1744 <z_cbvprintf_impl+0x14>
			OUTC('0');
    1b40:	4651      	mov	r1, sl
    1b42:	9b01      	ldr	r3, [sp, #4]
    1b44:	2030      	movs	r0, #48	; 0x30
    1b46:	4798      	blx	r3
    1b48:	e7e3      	b.n	1b12 <CONFIG_USB_DEVICE_VID+0x1fd>
			OUTC(*data++);
    1b4a:	4651      	mov	r1, sl
    1b4c:	f815 0b01 	ldrb.w	r0, [r5], #1
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	4798      	blx	r3
    1b54:	e7e3      	b.n	1b1e <CONFIG_USB_DEVICE_VID+0x209>
			OUTC(' ');
    1b56:	4651      	mov	r1, sl
    1b58:	9b01      	ldr	r3, [sp, #4]
    1b5a:	2020      	movs	r0, #32
    1b5c:	4798      	blx	r3
    1b5e:	e7e6      	b.n	1b2e <CONFIG_USB_DEVICE_VID+0x219>
				padding_mode = PAD_ZERO;
    1b60:	2301      	movs	r3, #1
    1b62:	e6cb      	b.n	18fc <z_cbvprintf_impl+0x1cc>
				length_mod = 'L';
    1b64:	214c      	movs	r1, #76	; 0x4c
    1b66:	e5fd      	b.n	1764 <z_cbvprintf_impl+0x34>
		}

		goto start;
	}
}
    1b68:	4648      	mov	r0, r9
    1b6a:	b00f      	add	sp, #60	; 0x3c
    1b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b70:	0000ea7d 	.word	0x0000ea7d
    1b74:	0000ea7b 	.word	0x0000ea7b
    1b78:	0000ea7f 	.word	0x0000ea7f
    1b7c:	0000eb05 	.word	0x0000eb05
    1b80:	0000ea84 	.word	0x0000ea84
    1b84:	0000ea81 	.word	0x0000ea81
    1b88:	0000ea87 	.word	0x0000ea87

00001b8c <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1b8c:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    1b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b92:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1b96:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1b9a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1b9e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    1ba2:	4770      	bx	lr
    1ba4:	50842500 	.word	0x50842500

00001ba8 <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    1ba8:	b510      	push	{r4, lr}
    1baa:	f04f 0320 	mov.w	r3, #32
    1bae:	f3ef 8411 	mrs	r4, BASEPRI
    1bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    1bb6:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1bba:	2201      	movs	r2, #1
    1bbc:	4b0c      	ldr	r3, [pc, #48]	; (1bf0 <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1bbe:	490d      	ldr	r1, [pc, #52]	; (1bf4 <nordicsemi_nrf53_init+0x4c>)
    1bc0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1bc4:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1bc6:	2000      	movs	r0, #0
    1bc8:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    1bcc:	f7ff ffde 	bl	1b8c <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1bd0:	4610      	mov	r0, r2
    1bd2:	f7ff ffdb 	bl	1b8c <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1bd6:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1bda:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1bde:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    1be2:	f384 8811 	msr	BASEPRI, r4
    1be6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1bea:	2000      	movs	r0, #0
    1bec:	bd10      	pop	{r4, pc}
    1bee:	bf00      	nop
    1bf0:	50001000 	.word	0x50001000
    1bf4:	50004000 	.word	0x50004000

00001bf8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1bf8:	b148      	cbz	r0, 1c0e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1bfa:	4b05      	ldr	r3, [pc, #20]	; (1c10 <arch_busy_wait+0x18>)
    1bfc:	681a      	ldr	r2, [r3, #0]
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <arch_busy_wait+0x1c>)
    1c00:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1c04:	4b04      	ldr	r3, [pc, #16]	; (1c18 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    1c06:	4350      	muls	r0, r2
    1c08:	f043 0301 	orr.w	r3, r3, #1
    1c0c:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1c0e:	4770      	bx	lr
    1c10:	2000a15c 	.word	0x2000a15c
    1c14:	000f4240 	.word	0x000f4240
    1c18:	0000e340 	.word	0x0000e340

00001c1c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1c1c:	f004 be70 	b.w	6900 <SystemInit>

00001c20 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1c20:	4b0c      	ldr	r3, [pc, #48]	; (1c54 <class_handler+0x34>)
{
    1c22:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1c24:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c26:	4e0c      	ldr	r6, [pc, #48]	; (1c58 <class_handler+0x38>)
    1c28:	4b0c      	ldr	r3, [pc, #48]	; (1c5c <class_handler+0x3c>)
    1c2a:	42b3      	cmp	r3, r6
    1c2c:	d303      	bcc.n	1c36 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1c2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1c32:	bcf0      	pop	{r4, r5, r6, r7}
    1c34:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1c36:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1c38:	42bd      	cmp	r5, r7
    1c3a:	d309      	bcc.n	1c50 <class_handler+0x30>
		if (iface->class_handler &&
    1c3c:	691c      	ldr	r4, [r3, #16]
    1c3e:	b13c      	cbz	r4, 1c50 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1c40:	f895 c002 	ldrb.w	ip, [r5, #2]
    1c44:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1c46:	45ac      	cmp	ip, r5
    1c48:	d102      	bne.n	1c50 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1c4a:	4623      	mov	r3, r4
}
    1c4c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1c4e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c50:	3324      	adds	r3, #36	; 0x24
    1c52:	e7ea      	b.n	1c2a <class_handler+0xa>
    1c54:	2001abd8 	.word	0x2001abd8
    1c58:	2000a438 	.word	0x2000a438
    1c5c:	2000a414 	.word	0x2000a414

00001c60 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c64:	4605      	mov	r5, r0
    1c66:	460e      	mov	r6, r1
    1c68:	4617      	mov	r7, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c6a:	4c12      	ldr	r4, [pc, #72]	; (1cb4 <custom_handler+0x54>)
    1c6c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1cb8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1c70:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1cbc <custom_handler+0x5c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1c74:	4544      	cmp	r4, r8
    1c76:	d303      	bcc.n	1c80 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    1c78:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    1c80:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1c82:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    1c86:	429a      	cmp	r2, r3
    1c88:	d312      	bcc.n	1cb0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    1c8a:	69a3      	ldr	r3, [r4, #24]
    1c8c:	b183      	cbz	r3, 1cb0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1c8e:	7890      	ldrb	r0, [r2, #2]
    1c90:	7929      	ldrb	r1, [r5, #4]
    1c92:	4288      	cmp	r0, r1
    1c94:	d105      	bne.n	1ca2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    1c96:	463a      	mov	r2, r7
    1c98:	4631      	mov	r1, r6
    1c9a:	4628      	mov	r0, r5
}
    1c9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    1ca0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1ca2:	7952      	ldrb	r2, [r2, #5]
    1ca4:	2a01      	cmp	r2, #1
    1ca6:	d103      	bne.n	1cb0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    1ca8:	463a      	mov	r2, r7
    1caa:	4631      	mov	r1, r6
    1cac:	4628      	mov	r0, r5
    1cae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1cb0:	3424      	adds	r4, #36	; 0x24
    1cb2:	e7df      	b.n	1c74 <custom_handler+0x14>
    1cb4:	2000a414 	.word	0x2000a414
    1cb8:	2000a438 	.word	0x2000a438
    1cbc:	2001abd8 	.word	0x2001abd8

00001cc0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cc4:	4605      	mov	r5, r0
    1cc6:	460e      	mov	r6, r1
    1cc8:	4617      	mov	r7, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1cca:	4c0a      	ldr	r4, [pc, #40]	; (1cf4 <vendor_handler+0x34>)
    1ccc:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1cf8 <vendor_handler+0x38>
    1cd0:	4544      	cmp	r4, r8
    1cd2:	d302      	bcc.n	1cda <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1cd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1cd8:	e009      	b.n	1cee <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    1cda:	6963      	ldr	r3, [r4, #20]
    1cdc:	b90b      	cbnz	r3, 1ce2 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1cde:	3424      	adds	r4, #36	; 0x24
    1ce0:	e7f6      	b.n	1cd0 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1ce2:	463a      	mov	r2, r7
    1ce4:	4631      	mov	r1, r6
    1ce6:	4628      	mov	r0, r5
    1ce8:	4798      	blx	r3
    1cea:	2800      	cmp	r0, #0
    1cec:	d1f7      	bne.n	1cde <vendor_handler+0x1e>
}
    1cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cf2:	bf00      	nop
    1cf4:	2000a414 	.word	0x2000a414
    1cf8:	2000a438 	.word	0x2000a438

00001cfc <set_endpoint>:
{
    1cfc:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1cfe:	7883      	ldrb	r3, [r0, #2]
    1d00:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1d04:	7903      	ldrb	r3, [r0, #4]
    1d06:	7942      	ldrb	r2, [r0, #5]
    1d08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1d0c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1d10:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    1d12:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1d14:	f003 0303 	and.w	r3, r3, #3
    1d18:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    1d1c:	f002 fd98 	bl	4850 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1d20:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1d24:	d004      	beq.n	1d30 <set_endpoint+0x34>
	} else if (ret) {
    1d26:	b118      	cbz	r0, 1d30 <set_endpoint+0x34>
		return false;
    1d28:	2000      	movs	r0, #0
}
    1d2a:	b003      	add	sp, #12
    1d2c:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1d30:	f89d 0000 	ldrb.w	r0, [sp]
    1d34:	f002 fe12 	bl	495c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    1d38:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1d3c:	d001      	beq.n	1d42 <set_endpoint+0x46>
	} else if (ret) {
    1d3e:	2800      	cmp	r0, #0
    1d40:	d1f2      	bne.n	1d28 <set_endpoint+0x2c>
	usb_dev.configured = true;
    1d42:	2001      	movs	r0, #1
    1d44:	4b01      	ldr	r3, [pc, #4]	; (1d4c <set_endpoint+0x50>)
    1d46:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    1d4a:	e7ee      	b.n	1d2a <set_endpoint+0x2e>
    1d4c:	2001abd8 	.word	0x2001abd8

00001d50 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1d50:	2208      	movs	r2, #8
    1d52:	2100      	movs	r1, #0
    1d54:	4801      	ldr	r0, [pc, #4]	; (1d5c <usb_reset_alt_setting+0xc>)
    1d56:	f009 bbe3 	b.w	b520 <memset>
    1d5a:	bf00      	nop
    1d5c:	2001ac93 	.word	0x2001ac93

00001d60 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1d60:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d62:	4b0b      	ldr	r3, [pc, #44]	; (1d90 <is_ep_valid.part.0+0x30>)
    1d64:	4c0b      	ldr	r4, [pc, #44]	; (1d94 <is_ep_valid.part.0+0x34>)
    1d66:	42a3      	cmp	r3, r4
    1d68:	d301      	bcc.n	1d6e <is_ep_valid.part.0+0xe>
	return false;
    1d6a:	2000      	movs	r0, #0
}
    1d6c:	bd70      	pop	{r4, r5, r6, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1d6e:	2200      	movs	r2, #0
		ep_data = cfg_data->endpoint;
    1d70:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1d72:	7f1e      	ldrb	r6, [r3, #28]
			if (ep_data[n].ep_addr == ep) {
    1d74:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1d76:	b2d5      	uxtb	r5, r2
    1d78:	42ae      	cmp	r6, r5
    1d7a:	d801      	bhi.n	1d80 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1d7c:	3324      	adds	r3, #36	; 0x24
    1d7e:	e7f2      	b.n	1d66 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1d80:	3201      	adds	r2, #1
    1d82:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1d86:	4285      	cmp	r5, r0
    1d88:	d1f5      	bne.n	1d76 <is_ep_valid.part.0+0x16>
				return true;
    1d8a:	2001      	movs	r0, #1
    1d8c:	e7ee      	b.n	1d6c <is_ep_valid.part.0+0xc>
    1d8e:	bf00      	nop
    1d90:	2000a414 	.word	0x2000a414
    1d94:	2000a438 	.word	0x2000a438

00001d98 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    1d98:	4809      	ldr	r0, [pc, #36]	; (1dc0 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    1d9a:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    1d9c:	7803      	ldrb	r3, [r0, #0]
    1d9e:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    1da2:	330a      	adds	r3, #10
    1da4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    1da8:	b13b      	cbz	r3, 1dba <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    1daa:	f100 0208 	add.w	r2, r0, #8
    1dae:	f100 0110 	add.w	r1, r0, #16
    1db2:	4798      	blx	r3
    1db4:	43c0      	mvns	r0, r0
    1db6:	0fc0      	lsrs	r0, r0, #31
}
    1db8:	bd08      	pop	{r3, pc}
		return false;
    1dba:	4618      	mov	r0, r3
    1dbc:	e7fc      	b.n	1db8 <usb_handle_request.constprop.0+0x20>
    1dbe:	bf00      	nop
    1dc0:	2001abd8 	.word	0x2001abd8

00001dc4 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    1dc4:	2804      	cmp	r0, #4
{
    1dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dca:	4604      	mov	r4, r0
    1dcc:	460e      	mov	r6, r1
    1dce:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1e54 <forward_status_cb+0x90>
	if (status == USB_DC_DISCONNECTED) {
    1dd2:	d10e      	bne.n	1df2 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    1dd4:	f7ff ffbc 	bl	1d50 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    1dd8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1e58 <forward_status_cb+0x94>
    1ddc:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    1de0:	b15b      	cbz	r3, 1dfa <forward_status_cb+0x36>
			usb_cancel_transfers();
    1de2:	f000 fd97 	bl	2914 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    1de6:	2c04      	cmp	r4, #4
    1de8:	d001      	beq.n	1dee <forward_status_cb+0x2a>
    1dea:	2c01      	cmp	r4, #1
    1dec:	d105      	bne.n	1dfa <forward_status_cb+0x36>
    1dee:	4d1b      	ldr	r5, [pc, #108]	; (1e5c <forward_status_cb+0x98>)
    1df0:	e016      	b.n	1e20 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    1df2:	2805      	cmp	r0, #5
    1df4:	d0f0      	beq.n	1dd8 <forward_status_cb+0x14>
    1df6:	2801      	cmp	r0, #1
    1df8:	d0ee      	beq.n	1dd8 <forward_status_cb+0x14>
    1dfa:	4d18      	ldr	r5, [pc, #96]	; (1e5c <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dfc:	4545      	cmp	r5, r8
    1dfe:	d31f      	bcc.n	1e40 <forward_status_cb+0x7c>
	if (usb_dev.user_status_callback) {
    1e00:	4b15      	ldr	r3, [pc, #84]	; (1e58 <forward_status_cb+0x94>)
    1e02:	6a1b      	ldr	r3, [r3, #32]
    1e04:	b323      	cbz	r3, 1e50 <forward_status_cb+0x8c>
		usb_dev.user_status_callback(status, param);
    1e06:	4631      	mov	r1, r6
    1e08:	4620      	mov	r0, r4
}
    1e0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    1e0e:	4718      	bx	r3
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e10:	2700      	movs	r7, #0
		ep_data = cfg_data->endpoint;
    1e12:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1e16:	7f2a      	ldrb	r2, [r5, #28]
    1e18:	b2fb      	uxtb	r3, r7
    1e1a:	429a      	cmp	r2, r3
    1e1c:	d803      	bhi.n	1e26 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e1e:	3524      	adds	r5, #36	; 0x24
    1e20:	4545      	cmp	r5, r8
    1e22:	d3f5      	bcc.n	1e10 <forward_status_cb+0x4c>
    1e24:	e008      	b.n	1e38 <forward_status_cb+0x74>
	return usb_dc_ep_disable(ep_data->ep_addr);
    1e26:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    1e2a:	7918      	ldrb	r0, [r3, #4]
    1e2c:	f002 fdc0 	bl	49b0 <usb_dc_ep_disable>
			if (ret < 0) {
    1e30:	2800      	cmp	r0, #0
    1e32:	f107 0701 	add.w	r7, r7, #1
    1e36:	daee      	bge.n	1e16 <forward_status_cb+0x52>
				usb_dev.configured = false;
    1e38:	2300      	movs	r3, #0
    1e3a:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    1e3e:	e7dc      	b.n	1dfa <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    1e40:	68eb      	ldr	r3, [r5, #12]
    1e42:	b11b      	cbz	r3, 1e4c <forward_status_cb+0x88>
			cfg_data->cb_usb_status(cfg_data, status, param);
    1e44:	4632      	mov	r2, r6
    1e46:	4621      	mov	r1, r4
    1e48:	4628      	mov	r0, r5
    1e4a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e4c:	3524      	adds	r5, #36	; 0x24
    1e4e:	e7d5      	b.n	1dfc <forward_status_cb+0x38>
}
    1e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e54:	2000a438 	.word	0x2000a438
    1e58:	2001abd8 	.word	0x2001abd8
    1e5c:	2000a414 	.word	0x2000a414

00001e60 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1e62:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1e64:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1e66:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1e68:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1e6c:	d007      	beq.n	1e7e <usb_halt_endpoint_req.isra.0+0x1e>
    1e6e:	4620      	mov	r0, r4
    1e70:	f7ff ff76 	bl	1d60 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1e74:	b188      	cbz	r0, 1e9a <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    1e76:	4b0f      	ldr	r3, [pc, #60]	; (1eb4 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1e78:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1e7c:	b168      	cbz	r0, 1e9a <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    1e7e:	4620      	mov	r0, r4
    1e80:	4e0c      	ldr	r6, [pc, #48]	; (1eb4 <usb_halt_endpoint_req.isra.0+0x54>)
		if (halt) {
    1e82:	b165      	cbz	r5, 1e9e <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    1e84:	f002 fd06 	bl	4894 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1e88:	69f3      	ldr	r3, [r6, #28]
    1e8a:	b90b      	cbnz	r3, 1e90 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    1e8c:	2001      	movs	r0, #1
    1e8e:	e004      	b.n	1e9a <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1e90:	2008      	movs	r0, #8
    1e92:	f10d 0107 	add.w	r1, sp, #7
    1e96:	4798      	blx	r3
		return true;
    1e98:	4628      	mov	r0, r5
}
    1e9a:	b002      	add	sp, #8
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    1e9e:	f002 fd21 	bl	48e4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1ea2:	69f3      	ldr	r3, [r6, #28]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d0f1      	beq.n	1e8c <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1ea8:	2009      	movs	r0, #9
    1eaa:	f10d 0107 	add.w	r1, sp, #7
    1eae:	4798      	blx	r3
    1eb0:	e7ec      	b.n	1e8c <usb_halt_endpoint_req.isra.0+0x2c>
    1eb2:	bf00      	nop
    1eb4:	2001abd8 	.word	0x2001abd8

00001eb8 <usb_handle_standard_request>:
{
    1eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    1ebc:	4e96      	ldr	r6, [pc, #600]	; (2118 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x118>)
{
    1ebe:	4605      	mov	r5, r0
	if (usb_dev.custom_req_handler &&
    1ec0:	69b3      	ldr	r3, [r6, #24]
{
    1ec2:	460f      	mov	r7, r1
    1ec4:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    1ec6:	b95b      	cbnz	r3, 1ee0 <usb_handle_standard_request+0x28>
	switch (setup->RequestType.recipient) {
    1ec8:	7828      	ldrb	r0, [r5, #0]
    1eca:	f000 031f 	and.w	r3, r0, #31
    1ece:	2b01      	cmp	r3, #1
    1ed0:	d07a      	beq.n	1fc8 <usb_handle_standard_request+0x110>
    1ed2:	2b02      	cmp	r3, #2
    1ed4:	f000 80e3 	beq.w	209e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9e>
    1ed8:	b13b      	cbz	r3, 1eea <usb_handle_standard_request+0x32>
		switch (setup->bRequest) {
    1eda:	f06f 0015 	mvn.w	r0, #21
    1ede:	e08d      	b.n	1ffc <usb_handle_standard_request+0x144>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    1ee0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    1ee2:	2800      	cmp	r0, #0
    1ee4:	d1f0      	bne.n	1ec8 <usb_handle_standard_request+0x10>
	int rc = 0;
    1ee6:	2000      	movs	r0, #0
    1ee8:	e088      	b.n	1ffc <usb_handle_standard_request+0x144>
	if (usb_reqtype_is_to_host(setup)) {
    1eea:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    1eee:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1ef0:	2a00      	cmp	r2, #0
    1ef2:	da2b      	bge.n	1f4c <usb_handle_standard_request+0x94>
		switch (setup->bRequest) {
    1ef4:	2806      	cmp	r0, #6
	uint8_t *data = *data_buf;
    1ef6:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    1efa:	d009      	beq.n	1f10 <usb_handle_standard_request+0x58>
    1efc:	2808      	cmp	r0, #8
    1efe:	d01f      	beq.n	1f40 <usb_handle_standard_request+0x88>
    1f00:	2800      	cmp	r0, #0
    1f02:	d1ea      	bne.n	1eda <usb_handle_standard_request+0x22>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    1f04:	2301      	movs	r3, #1
	data[1] = 0U;
    1f06:	7050      	strb	r0, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    1f08:	7013      	strb	r3, [r2, #0]
		*len = 2;
    1f0a:	2302      	movs	r3, #2
    1f0c:	603b      	str	r3, [r7, #0]
		return true;
    1f0e:	e075      	b.n	1ffc <usb_handle_standard_request+0x144>
			return usb_get_descriptor(setup, len, data_buf);
    1f10:	8869      	ldrh	r1, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    1f12:	0a0a      	lsrs	r2, r1, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    1f14:	1f10      	subs	r0, r2, #4
    1f16:	2801      	cmp	r0, #1
    1f18:	d9df      	bls.n	1eda <usb_handle_standard_request+0x22>
    1f1a:	2a07      	cmp	r2, #7
    1f1c:	d8dd      	bhi.n	1eda <usb_handle_standard_request+0x22>
	cur_index = 0U;
    1f1e:	4618      	mov	r0, r3
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    1f20:	b2cc      	uxtb	r4, r1
	p = (uint8_t *)usb_dev.descriptors;
    1f22:	6a71      	ldr	r1, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    1f24:	780b      	ldrb	r3, [r1, #0]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d0d7      	beq.n	1eda <usb_handle_standard_request+0x22>
		if (p[DESC_bDescriptorType] == type) {
    1f2a:	784d      	ldrb	r5, [r1, #1]
    1f2c:	4295      	cmp	r5, r2
    1f2e:	d103      	bne.n	1f38 <usb_handle_standard_request+0x80>
			if (cur_index == index) {
    1f30:	4284      	cmp	r4, r0
    1f32:	f000 80e9 	beq.w	2108 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x108>
			cur_index++;
    1f36:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    1f38:	4419      	add	r1, r3
    1f3a:	e7f3      	b.n	1f24 <usb_handle_standard_request+0x6c>
			*len = p[DESC_bLength];
    1f3c:	780b      	ldrb	r3, [r1, #0]
    1f3e:	e0e9      	b.n	2114 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x114>
			data[0] = usb_dev.configuration;
    1f40:	f896 10ba 	ldrb.w	r1, [r6, #186]	; 0xba
    1f44:	7011      	strb	r1, [r2, #0]
			*len = 1;
    1f46:	2201      	movs	r2, #1
    1f48:	603a      	str	r2, [r7, #0]
			return true;
    1f4a:	e7cc      	b.n	1ee6 <usb_handle_standard_request+0x2e>
		switch (setup->bRequest) {
    1f4c:	2805      	cmp	r0, #5
    1f4e:	d018      	beq.n	1f82 <usb_handle_standard_request+0xca>
    1f50:	2809      	cmp	r0, #9
    1f52:	d1c2      	bne.n	1eda <usb_handle_standard_request+0x22>
	if (setup->wValue == 0U) {
    1f54:	886c      	ldrh	r4, [r5, #2]
    1f56:	b144      	cbz	r4, 1f6a <usb_handle_standard_request+0xb2>
	uint8_t cur_config = 0xFF;
    1f58:	f04f 08ff 	mov.w	r8, #255	; 0xff
	bool found = false;
    1f5c:	4618      	mov	r0, r3
	uint8_t cur_alt_setting = 0xFF;
    1f5e:	46c1      	mov	r9, r8
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1f60:	6a77      	ldr	r7, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    1f62:	783c      	ldrb	r4, [r7, #0]
    1f64:	b99c      	cbnz	r4, 1f8e <usb_handle_standard_request+0xd6>
	if (found) {
    1f66:	2800      	cmp	r0, #0
    1f68:	d0b7      	beq.n	1eda <usb_handle_standard_request+0x22>
		usb_reset_alt_setting();
    1f6a:	f7ff fef1 	bl	1d50 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    1f6e:	886b      	ldrh	r3, [r5, #2]
    1f70:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    1f74:	69f3      	ldr	r3, [r6, #28]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d0b5      	beq.n	1ee6 <usb_handle_standard_request+0x2e>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    1f7a:	2003      	movs	r0, #3
    1f7c:	4967      	ldr	r1, [pc, #412]	; (211c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11c>)
    1f7e:	4798      	blx	r3
    1f80:	e7b1      	b.n	1ee6 <usb_handle_standard_request+0x2e>
			return !usb_dc_set_address(setup->wValue);
    1f82:	78a8      	ldrb	r0, [r5, #2]
    1f84:	f002 fc52 	bl	482c <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    1f88:	2800      	cmp	r0, #0
    1f8a:	d0ac      	beq.n	1ee6 <usb_handle_standard_request+0x2e>
    1f8c:	e7a5      	b.n	1eda <usb_handle_standard_request+0x22>
		switch (p[DESC_bDescriptorType]) {
    1f8e:	787b      	ldrb	r3, [r7, #1]
    1f90:	2b04      	cmp	r3, #4
    1f92:	d00c      	beq.n	1fae <usb_handle_standard_request+0xf6>
    1f94:	2b05      	cmp	r3, #5
    1f96:	d00d      	beq.n	1fb4 <usb_handle_standard_request+0xfc>
    1f98:	2b02      	cmp	r3, #2
    1f9a:	d105      	bne.n	1fa8 <usb_handle_standard_request+0xf0>
			cur_config = p[CONF_DESC_bConfigurationValue];
    1f9c:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    1fa0:	886a      	ldrh	r2, [r5, #2]
				found = true;
    1fa2:	4542      	cmp	r2, r8
    1fa4:	bf08      	it	eq
    1fa6:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    1fa8:	783b      	ldrb	r3, [r7, #0]
    1faa:	441f      	add	r7, r3
    1fac:	e7d9      	b.n	1f62 <usb_handle_standard_request+0xaa>
			cur_alt_setting =
    1fae:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    1fb2:	e7f9      	b.n	1fa8 <usb_handle_standard_request+0xf0>
			if ((cur_config != setup->wValue) ||
    1fb4:	886b      	ldrh	r3, [r5, #2]
    1fb6:	4543      	cmp	r3, r8
    1fb8:	d1f6      	bne.n	1fa8 <usb_handle_standard_request+0xf0>
    1fba:	f1b9 0f00 	cmp.w	r9, #0
    1fbe:	d1f3      	bne.n	1fa8 <usb_handle_standard_request+0xf0>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    1fc0:	4638      	mov	r0, r7
    1fc2:	f7ff fe9b 	bl	1cfc <set_endpoint>
			break;
    1fc6:	e7ef      	b.n	1fa8 <usb_handle_standard_request+0xf0>
	if (!is_device_configured() ||
    1fc8:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d084      	beq.n	1eda <usb_handle_standard_request+0x22>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1fd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    1fd2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1fd6:	4623      	mov	r3, r4
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    1fd8:	7928      	ldrb	r0, [r5, #4]
	while (p[DESC_bLength] != 0U) {
    1fda:	781a      	ldrb	r2, [r3, #0]
    1fdc:	2a00      	cmp	r2, #0
    1fde:	f43f af7c 	beq.w	1eda <usb_handle_standard_request+0x22>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    1fe2:	7859      	ldrb	r1, [r3, #1]
    1fe4:	2902      	cmp	r1, #2
    1fe6:	d104      	bne.n	1ff2 <usb_handle_standard_request+0x13a>
			if (interface < cfg_descr->bNumInterfaces) {
    1fe8:	f893 e004 	ldrb.w	lr, [r3, #4]
    1fec:	4586      	cmp	lr, r0
    1fee:	f200 8097 	bhi.w	2120 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x120>
		p += p[DESC_bLength];
    1ff2:	4413      	add	r3, r2
    1ff4:	e7f1      	b.n	1fda <usb_handle_standard_request+0x122>
			data[0] = 0U;
    1ff6:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    1ff8:	7050      	strb	r0, [r2, #1]
			*len = 2;
    1ffa:	6039      	str	r1, [r7, #0]
}
    1ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		p += p[DESC_bLength];
    2000:	440c      	add	r4, r1
    2002:	e09b      	b.n	213c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x13c>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2004:	280b      	cmp	r0, #11
    2006:	f47f af68 	bne.w	1eda <usb_handle_standard_request+0x22>
	bool ret = false;
    200a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    200c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	const uint8_t *if_desc = NULL;
    2010:	46b9      	mov	r9, r7
	uint8_t cur_alt_setting = 0xFF;
    2012:	46d0      	mov	r8, sl
    2014:	e006      	b.n	2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
		switch (p[DESC_bDescriptorType]) {
    2016:	7863      	ldrb	r3, [r4, #1]
    2018:	2b04      	cmp	r3, #4
    201a:	d00f      	beq.n	203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
    201c:	2b05      	cmp	r3, #5
    201e:	d022      	beq.n	2066 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x66>
		p += p[DESC_bLength];
    2020:	7823      	ldrb	r3, [r4, #0]
    2022:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2024:	7823      	ldrb	r3, [r4, #0]
    2026:	2b00      	cmp	r3, #0
    2028:	d1f5      	bne.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
	if (usb_dev.status_callback) {
    202a:	69f3      	ldr	r3, [r6, #28]
    202c:	b113      	cbz	r3, 2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    202e:	4649      	mov	r1, r9
    2030:	2007      	movs	r0, #7
    2032:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2034:	2f00      	cmp	r7, #0
    2036:	f47f af56 	bne.w	1ee6 <usb_handle_standard_request+0x2e>
    203a:	e74e      	b.n	1eda <usb_handle_standard_request+0x22>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    203c:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2040:	88aa      	ldrh	r2, [r5, #4]
    2042:	4653      	mov	r3, sl
    2044:	4592      	cmp	sl, r2
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2046:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
    204a:	d1e9      	bne.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
			    cur_alt_setting == setup->wValue) {
    204c:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
    204e:	fa1f f288 	uxth.w	r2, r8
    2052:	4588      	cmp	r8, r1
    2054:	d1e4      	bne.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2056:	2b07      	cmp	r3, #7
    2058:	d81e      	bhi.n	2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>
		return true;
    205a:	46a1      	mov	r9, r4
		usb_dev.alt_setting[iface] = alt_setting;
    205c:	4433      	add	r3, r6
				ret = usb_set_alt_setting(setup->wIndex,
    205e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    2062:	2701      	movs	r7, #1
    2064:	e7dc      	b.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
			if (cur_iface == setup->wIndex) {
    2066:	88ab      	ldrh	r3, [r5, #4]
    2068:	4553      	cmp	r3, sl
    206a:	d1d9      	bne.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
	if (cur_alt_setting != alt_setting) {
    206c:	78ab      	ldrb	r3, [r5, #2]
    206e:	4543      	cmp	r3, r8
    2070:	d00d      	beq.n	208e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8e>
		ret = reset_endpoint(ep_desc);
    2072:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2074:	4638      	mov	r0, r7
    2076:	f000 fc2f 	bl	28d8 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    207a:	4638      	mov	r0, r7
    207c:	f002 fc98 	bl	49b0 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2080:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2084:	d0ed      	beq.n	2062 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62>
	} else if (ret) {
    2086:	fab0 f780 	clz	r7, r0
    208a:	097f      	lsrs	r7, r7, #5
    208c:	e7c8      	b.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
		ret = set_endpoint(ep_desc);
    208e:	4620      	mov	r0, r4
    2090:	f7ff fe34 	bl	1cfc <set_endpoint>
    2094:	4607      	mov	r7, r0
    2096:	e7c3      	b.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
    2098:	46a1      	mov	r9, r4
	return false;
    209a:	2700      	movs	r7, #0
    209c:	e7c0      	b.n	2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
	if (usb_reqtype_is_to_host(setup)) {
    209e:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    20a2:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    20a4:	2a00      	cmp	r2, #0
    20a6:	da19      	bge.n	20dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xdc>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    20a8:	2b00      	cmp	r3, #0
    20aa:	f47f af16 	bne.w	1eda <usb_handle_standard_request+0x22>
	uint8_t ep = setup->wIndex;
    20ae:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    20b0:	0663      	lsls	r3, r4, #25
    20b2:	d00a      	beq.n	20ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xca>
    20b4:	4620      	mov	r0, r4
    20b6:	f7ff fe53 	bl	1d60 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    20ba:	2800      	cmp	r0, #0
    20bc:	f43f af0d 	beq.w	1eda <usb_handle_standard_request+0x22>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    20c0:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    20c4:	2b00      	cmp	r3, #0
    20c6:	f43f af08 	beq.w	1eda <usb_handle_standard_request+0x22>
    20ca:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    20ce:	4620      	mov	r0, r4
    20d0:	4629      	mov	r1, r5
    20d2:	f002 fc27 	bl	4924 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    20d6:	2000      	movs	r0, #0
    20d8:	7068      	strb	r0, [r5, #1]
    20da:	e716      	b.n	1f0a <usb_handle_standard_request+0x52>
		switch (setup->bRequest) {
    20dc:	2b01      	cmp	r3, #1
    20de:	d008      	beq.n	20f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf2>
    20e0:	2b03      	cmp	r3, #3
    20e2:	f47f aefa 	bne.w	1eda <usb_handle_standard_request+0x22>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    20e6:	886b      	ldrh	r3, [r5, #2]
    20e8:	2b00      	cmp	r3, #0
    20ea:	f47f aef6 	bne.w	1eda <usb_handle_standard_request+0x22>
				return usb_halt_endpoint_req(setup, true);
    20ee:	2101      	movs	r1, #1
    20f0:	e003      	b.n	20fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfa>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    20f2:	8869      	ldrh	r1, [r5, #2]
    20f4:	2900      	cmp	r1, #0
    20f6:	f47f aef0 	bne.w	1eda <usb_handle_standard_request+0x22>
				return usb_halt_endpoint_req(setup, true);
    20fa:	88a8      	ldrh	r0, [r5, #4]
    20fc:	f7ff feb0 	bl	1e60 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2100:	2800      	cmp	r0, #0
    2102:	f47f aef0 	bne.w	1ee6 <usb_handle_standard_request+0x2e>
    2106:	e6e8      	b.n	1eda <usb_handle_standard_request+0x22>
		if (type == USB_DESC_CONFIGURATION) {
    2108:	2a02      	cmp	r2, #2
		*data = p;
    210a:	f8c8 1000 	str.w	r1, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    210e:	f47f af15 	bne.w	1f3c <usb_handle_standard_request+0x84>
			*len = (p[CONF_DESC_wTotalLength]) |
    2112:	884b      	ldrh	r3, [r1, #2]
				*len = 1;
    2114:	603b      	str	r3, [r7, #0]
    2116:	e6e6      	b.n	1ee6 <usb_handle_standard_request+0x2e>
    2118:	2001abd8 	.word	0x2001abd8
    211c:	2001ac92 	.word	0x2001ac92
	if (usb_reqtype_is_to_host(setup)) {
    2120:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    2124:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2126:	2b00      	cmp	r3, #0
    2128:	f6bf af6c 	bge.w	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    212c:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    2130:	2800      	cmp	r0, #0
    2132:	f43f af60 	beq.w	1ff6 <usb_handle_standard_request+0x13e>
    2136:	280a      	cmp	r0, #10
    2138:	f47f aecf 	bne.w	1eda <usb_handle_standard_request+0x22>
	while (p[DESC_bLength] != 0U) {
    213c:	7821      	ldrb	r1, [r4, #0]
    213e:	2900      	cmp	r1, #0
    2140:	f43f aecb 	beq.w	1eda <usb_handle_standard_request+0x22>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2144:	7863      	ldrb	r3, [r4, #1]
    2146:	2b04      	cmp	r3, #4
    2148:	f47f af5a 	bne.w	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    214c:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    214e:	459c      	cmp	ip, r3
    2150:	f47f af56 	bne.w	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2154:	2b07      	cmp	r3, #7
	return 0;
    2156:	bf8e      	itee	hi
    2158:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    215a:	199b      	addls	r3, r3, r6
    215c:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2160:	7013      	strb	r3, [r2, #0]
				*len = 1;
    2162:	2301      	movs	r3, #1
    2164:	e7d6      	b.n	2114 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x114>
    2166:	bf00      	nop

00002168 <usb_disable>:
{
    2168:	b510      	push	{r4, lr}
	if (usb_dev.enabled != true) {
    216a:	4c06      	ldr	r4, [pc, #24]	; (2184 <usb_disable+0x1c>)
    216c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    2170:	b130      	cbz	r0, 2180 <usb_disable+0x18>
	ret = usb_dc_detach();
    2172:	f002 fb0f 	bl	4794 <usb_dc_detach>
	if (ret < 0) {
    2176:	2800      	cmp	r0, #0
	usb_dev.enabled = false;
    2178:	bfa4      	itt	ge
    217a:	2000      	movge	r0, #0
    217c:	f884 00b8 	strbge.w	r0, [r4, #184]	; 0xb8
}
    2180:	bd10      	pop	{r4, pc}
    2182:	bf00      	nop
    2184:	2001abd8 	.word	0x2001abd8

00002188 <usb_data_to_host>:
{
    2188:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    218a:	4c13      	ldr	r4, [pc, #76]	; (21d8 <usb_data_to_host+0x50>)
    218c:	7d23      	ldrb	r3, [r4, #20]
    218e:	b9cb      	cbnz	r3, 21c4 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2190:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2192:	ab01      	add	r3, sp, #4
    2194:	2080      	movs	r0, #128	; 0x80
    2196:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2198:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    219a:	f008 fcd2 	bl	ab42 <usb_write>
		usb_dev.data_buf += chunk;
    219e:	9a01      	ldr	r2, [sp, #4]
    21a0:	68a3      	ldr	r3, [r4, #8]
    21a2:	4413      	add	r3, r2
    21a4:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    21a6:	68e3      	ldr	r3, [r4, #12]
    21a8:	1a9b      	subs	r3, r3, r2
    21aa:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    21ac:	b943      	cbnz	r3, 21c0 <usb_data_to_host+0x38>
    21ae:	b13a      	cbz	r2, 21c0 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    21b0:	6923      	ldr	r3, [r4, #16]
    21b2:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    21b4:	429a      	cmp	r2, r3
    21b6:	dd03      	ble.n	21c0 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    21b8:	069b      	lsls	r3, r3, #26
    21ba:	d101      	bne.n	21c0 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    21bc:	2301      	movs	r3, #1
    21be:	7523      	strb	r3, [r4, #20]
}
    21c0:	b002      	add	sp, #8
    21c2:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    21c4:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    21c6:	2080      	movs	r0, #128	; 0x80
    21c8:	461a      	mov	r2, r3
    21ca:	4619      	mov	r1, r3
		usb_dev.zlp_flag = false;
    21cc:	7523      	strb	r3, [r4, #20]
}
    21ce:	b002      	add	sp, #8
    21d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    21d4:	f002 bc12 	b.w	49fc <usb_dc_ep_write>
    21d8:	2001abd8 	.word	0x2001abd8

000021dc <usb_handle_control_transfer>:
	uint32_t chunk = 0U;
    21dc:	2300      	movs	r3, #0
{
    21de:	b530      	push	{r4, r5, lr}
    21e0:	b085      	sub	sp, #20
    21e2:	4602      	mov	r2, r0
    21e4:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    21e6:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    21e8:	2800      	cmp	r0, #0
    21ea:	d15f      	bne.n	22ac <usb_handle_control_transfer+0xd0>
    21ec:	2900      	cmp	r1, #0
    21ee:	d13c      	bne.n	226a <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    21f0:	2208      	movs	r2, #8
    21f2:	460b      	mov	r3, r1
    21f4:	eb0d 0102 	add.w	r1, sp, r2
    21f8:	f009 f9dc 	bl	b5b4 <usb_dc_ep_read>
    21fc:	2800      	cmp	r0, #0
    21fe:	da04      	bge.n	220a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2200:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2202:	f002 fb47 	bl	4894 <usb_dc_ep_set_stall>
}
    2206:	b005      	add	sp, #20
    2208:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    220a:	4c2d      	ldr	r4, [pc, #180]	; (22c0 <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
    220c:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    2210:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    2214:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    2216:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		setup->bmRequestType = setup_raw.bmRequestType;
    221a:	7022      	strb	r2, [r4, #0]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    221c:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    221e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		usb_dev.data_buf = usb_dev.req_data;
    2222:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2226:	80a3      	strh	r3, [r4, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2228:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		if (usb_reqtype_is_to_device(setup)) {
    222c:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    222e:	e9c4 5503 	strd	r5, r5, [r4, #12]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2232:	80e3      	strh	r3, [r4, #6]
		usb_dev.data_buf = usb_dev.req_data;
    2234:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    2236:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    2238:	d40a      	bmi.n	2250 <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    223a:	2b80      	cmp	r3, #128	; 0x80
    223c:	d904      	bls.n	2248 <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    223e:	2080      	movs	r0, #128	; 0x80
    2240:	f002 fb28 	bl	4894 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2244:	2000      	movs	r0, #0
    2246:	e7dc      	b.n	2202 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    2248:	b113      	cbz	r3, 2250 <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
    224a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    224e:	e7da      	b.n	2206 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    2250:	f7ff fda2 	bl	1d98 <usb_handle_request.constprop.0>
    2254:	2800      	cmp	r0, #0
    2256:	d0d3      	beq.n	2200 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2258:	88e2      	ldrh	r2, [r4, #6]
    225a:	6923      	ldr	r3, [r4, #16]
    225c:	429a      	cmp	r2, r3
    225e:	bfd4      	ite	le
    2260:	60e2      	strle	r2, [r4, #12]
    2262:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    2264:	f7ff ff90 	bl	2188 <usb_data_to_host>
    2268:	e7cd      	b.n	2206 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    226a:	4c15      	ldr	r4, [pc, #84]	; (22c0 <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    226c:	ab01      	add	r3, sp, #4
    226e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    2272:	2d00      	cmp	r5, #0
    2274:	dc04      	bgt.n	2280 <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2276:	f009 f99d 	bl	b5b4 <usb_dc_ep_read>
    227a:	2800      	cmp	r0, #0
    227c:	dac3      	bge.n	2206 <usb_handle_control_transfer+0x2a>
    227e:	e7bf      	b.n	2200 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2280:	462a      	mov	r2, r5
    2282:	f009 f997 	bl	b5b4 <usb_dc_ep_read>
    2286:	2800      	cmp	r0, #0
    2288:	dbd9      	blt.n	223e <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
    228a:	9901      	ldr	r1, [sp, #4]
    228c:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    228e:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    2290:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    2292:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    2294:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2296:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2298:	2b00      	cmp	r3, #0
    229a:	d1b4      	bne.n	2206 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    229c:	f104 0338 	add.w	r3, r4, #56	; 0x38
    22a0:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    22a2:	f7ff fd79 	bl	1d98 <usb_handle_request.constprop.0>
    22a6:	2800      	cmp	r0, #0
    22a8:	d1dc      	bne.n	2264 <usb_handle_control_transfer+0x88>
    22aa:	e7a9      	b.n	2200 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    22ac:	2880      	cmp	r0, #128	; 0x80
    22ae:	d1aa      	bne.n	2206 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    22b0:	4b03      	ldr	r3, [pc, #12]	; (22c0 <usb_handle_control_transfer+0xe4>)
    22b2:	68da      	ldr	r2, [r3, #12]
    22b4:	2a00      	cmp	r2, #0
    22b6:	d1d5      	bne.n	2264 <usb_handle_control_transfer+0x88>
    22b8:	7d1b      	ldrb	r3, [r3, #20]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d1d2      	bne.n	2264 <usb_handle_control_transfer+0x88>
    22be:	e7a2      	b.n	2206 <usb_handle_control_transfer+0x2a>
    22c0:	2001abd8 	.word	0x2001abd8

000022c4 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    22c4:	4b05      	ldr	r3, [pc, #20]	; (22dc <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    22c6:	4a06      	ldr	r2, [pc, #24]	; (22e0 <usb_set_config+0x1c>)
	usb_dev.descriptors = usb_descriptors;
    22c8:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.req_handlers[type] = handler;
    22ca:	629a      	str	r2, [r3, #40]	; 0x28
    22cc:	4a05      	ldr	r2, [pc, #20]	; (22e4 <usb_set_config+0x20>)

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    22ce:	2000      	movs	r0, #0
	usb_dev.req_handlers[type] = handler;
    22d0:	62da      	str	r2, [r3, #44]	; 0x2c
    22d2:	4a05      	ldr	r2, [pc, #20]	; (22e8 <usb_set_config+0x24>)
    22d4:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    22d6:	4a05      	ldr	r2, [pc, #20]	; (22ec <usb_set_config+0x28>)
    22d8:	619a      	str	r2, [r3, #24]
}
    22da:	4770      	bx	lr
    22dc:	2001abd8 	.word	0x2001abd8
    22e0:	00001eb9 	.word	0x00001eb9
    22e4:	00001c21 	.word	0x00001c21
    22e8:	00001cc1 	.word	0x00001cc1
    22ec:	00001c61 	.word	0x00001c61

000022f0 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    22f0:	4b08      	ldr	r3, [pc, #32]	; (2314 <usb_device_init+0x24>)
{
    22f2:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    22f4:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    22f8:	b934      	cbnz	r4, 2308 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    22fa:	f000 f9a3 	bl	2644 <usb_get_device_descriptor>
	if (!device_descriptor) {
    22fe:	b130      	cbz	r0, 230e <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    2300:	f7ff ffe0 	bl	22c4 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    2304:	4620      	mov	r0, r4
}
    2306:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2308:	f06f 0077 	mvn.w	r0, #119	; 0x77
    230c:	e7fb      	b.n	2306 <usb_device_init+0x16>
		return -1;
    230e:	f04f 30ff 	mov.w	r0, #4294967295
    2312:	e7f8      	b.n	2306 <usb_device_init+0x16>
    2314:	2001abd8 	.word	0x2001abd8

00002318 <usb_enable>:
{
    2318:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    231c:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    231e:	4d35      	ldr	r5, [pc, #212]	; (23f4 <usb_enable+0xdc>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2320:	f04f 32ff 	mov.w	r2, #4294967295
    2324:	f04f 33ff 	mov.w	r3, #4294967295
    2328:	4833      	ldr	r0, [pc, #204]	; (23f8 <usb_enable+0xe0>)
    232a:	f006 fcc5 	bl	8cb8 <z_impl_k_mutex_lock>
    232e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    2332:	2e00      	cmp	r6, #0
    2334:	d15b      	bne.n	23ee <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    2336:	4831      	ldr	r0, [pc, #196]	; (23fc <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    2338:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    233a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    233c:	f002 fc74 	bl	4c28 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2340:	f002 f9e8 	bl	4714 <usb_dc_attach>
	if (ret < 0) {
    2344:	1e04      	subs	r4, r0, #0
    2346:	db36      	blt.n	23b6 <usb_enable+0x9e>
	ret = usb_transfer_init();
    2348:	f000 fb0c 	bl	2964 <usb_transfer_init>
	if (ret < 0) {
    234c:	1e04      	subs	r4, r0, #0
    234e:	db32      	blt.n	23b6 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2350:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    2352:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2354:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2358:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    235c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2360:	f002 fa76 	bl	4850 <usb_dc_ep_configure>
	if (ret < 0) {
    2364:	1e04      	subs	r4, r0, #0
    2366:	db26      	blt.n	23b6 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2368:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    236a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    236c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2370:	f002 fa6e 	bl	4850 <usb_dc_ep_configure>
	if (ret < 0) {
    2374:	1e04      	subs	r4, r0, #0
    2376:	db1e      	blt.n	23b6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2378:	4630      	mov	r0, r6
    237a:	4921      	ldr	r1, [pc, #132]	; (2400 <usb_enable+0xe8>)
    237c:	f002 fc40 	bl	4c00 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2380:	1e04      	subs	r4, r0, #0
    2382:	db18      	blt.n	23b6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2384:	4638      	mov	r0, r7
    2386:	491e      	ldr	r1, [pc, #120]	; (2400 <usb_enable+0xe8>)
    2388:	f002 fc3a 	bl	4c00 <usb_dc_ep_set_callback>
	if (ret < 0) {
    238c:	1e04      	subs	r4, r0, #0
    238e:	db12      	blt.n	23b6 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2390:	4c1c      	ldr	r4, [pc, #112]	; (2404 <usb_enable+0xec>)
    2392:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2408 <usb_enable+0xf0>
    2396:	4544      	cmp	r4, r8
    2398:	d314      	bcc.n	23c4 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    239a:	2000      	movs	r0, #0
    239c:	f002 fade 	bl	495c <usb_dc_ep_enable>
	if (ret < 0) {
    23a0:	1e04      	subs	r4, r0, #0
    23a2:	db08      	blt.n	23b6 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    23a4:	2080      	movs	r0, #128	; 0x80
    23a6:	f002 fad9 	bl	495c <usb_dc_ep_enable>
	if (ret < 0) {
    23aa:	1e04      	subs	r4, r0, #0
    23ac:	db03      	blt.n	23b6 <usb_enable+0x9e>
	usb_dev.enabled = true;
    23ae:	2301      	movs	r3, #1
	ret = 0;
    23b0:	2400      	movs	r4, #0
	usb_dev.enabled = true;
    23b2:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    23b6:	4810      	ldr	r0, [pc, #64]	; (23f8 <usb_enable+0xe0>)
    23b8:	f006 fcf6 	bl	8da8 <z_impl_k_mutex_unlock>
}
    23bc:	4620      	mov	r0, r4
    23be:	b002      	add	sp, #8
    23c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23c4:	2600      	movs	r6, #0
		ep_data = cfg_data->endpoint;
    23c6:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23c8:	7f22      	ldrb	r2, [r4, #28]
    23ca:	b2f3      	uxtb	r3, r6
    23cc:	429a      	cmp	r2, r3
    23ce:	d801      	bhi.n	23d4 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23d0:	3424      	adds	r4, #36	; 0x24
    23d2:	e7e0      	b.n	2396 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    23d4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    23d8:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    23dc:	7910      	ldrb	r0, [r2, #4]
    23de:	f002 fc0f 	bl	4c00 <usb_dc_ep_set_callback>
    23e2:	3601      	adds	r6, #1
    23e4:	2800      	cmp	r0, #0
    23e6:	d0ef      	beq.n	23c8 <usb_enable+0xb0>
    23e8:	f04f 34ff 	mov.w	r4, #4294967295
    23ec:	e7e3      	b.n	23b6 <usb_enable+0x9e>
		ret = -EALREADY;
    23ee:	f06f 0477 	mvn.w	r4, #119	; 0x77
    23f2:	e7e0      	b.n	23b6 <usb_enable+0x9e>
    23f4:	2001abd8 	.word	0x2001abd8
    23f8:	2000a30c 	.word	0x2000a30c
    23fc:	00001dc5 	.word	0x00001dc5
    2400:	000021dd 	.word	0x000021dd
    2404:	2000a414 	.word	0x2000a414
    2408:	2000a438 	.word	0x2000a438

0000240c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    240c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    240e:	4b1f      	ldr	r3, [pc, #124]	; (248c <usb_update_sn_string_descriptor+0x80>)
{
    2410:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2412:	aa05      	add	r2, sp, #20
    2414:	f103 0510 	add.w	r5, r3, #16
    2418:	4614      	mov	r4, r2
    241a:	6818      	ldr	r0, [r3, #0]
    241c:	6859      	ldr	r1, [r3, #4]
    241e:	3308      	adds	r3, #8
    2420:	c403      	stmia	r4!, {r0, r1}
    2422:	42ab      	cmp	r3, r5
    2424:	4622      	mov	r2, r4
    2426:	d1f7      	bne.n	2418 <usb_update_sn_string_descriptor+0xc>
    2428:	781b      	ldrb	r3, [r3, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    242a:	2210      	movs	r2, #16
	const char hex[] = "0123456789ABCDEF";
    242c:	7023      	strb	r3, [r4, #0]
	memset(hwid, 0, sizeof(hwid));
    242e:	2100      	movs	r1, #0
    2430:	a801      	add	r0, sp, #4
    2432:	f009 f875 	bl	b520 <memset>
	memset(sn, 0, sizeof(sn));
    2436:	2212      	movs	r2, #18
    2438:	2100      	movs	r1, #0
    243a:	4815      	ldr	r0, [pc, #84]	; (2490 <usb_update_sn_string_descriptor+0x84>)
    243c:	f009 f870 	bl	b520 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2440:	2110      	movs	r1, #16
    2442:	a801      	add	r0, sp, #4
    2444:	f009 f9b1 	bl	b7aa <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2448:	2800      	cmp	r0, #0
    244a:	dd1b      	ble.n	2484 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    244c:	2808      	cmp	r0, #8
    244e:	bfb8      	it	lt
    2450:	2008      	movlt	r0, #8
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2452:	2100      	movs	r1, #0
    2454:	3808      	subs	r0, #8
    2456:	ab01      	add	r3, sp, #4
    2458:	4a0d      	ldr	r2, [pc, #52]	; (2490 <usb_update_sn_string_descriptor+0x84>)
    245a:	4418      	add	r0, r3
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    245c:	f810 3b01 	ldrb.w	r3, [r0], #1
    2460:	ac0a      	add	r4, sp, #40	; 0x28
    2462:	eb04 1413 	add.w	r4, r4, r3, lsr #4
    2466:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    246a:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    246e:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2470:	ac0a      	add	r4, sp, #40	; 0x28
    2472:	4423      	add	r3, r4
    2474:	f813 3c14 	ldrb.w	r3, [r3, #-20]
		for (int i = 0; i < usblen; i++) {
    2478:	3101      	adds	r1, #1
    247a:	2908      	cmp	r1, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    247c:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    247e:	f102 0202 	add.w	r2, r2, #2
    2482:	d1eb      	bne.n	245c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2484:	4802      	ldr	r0, [pc, #8]	; (2490 <usb_update_sn_string_descriptor+0x84>)
    2486:	b00b      	add	sp, #44	; 0x2c
    2488:	bd30      	pop	{r4, r5, pc}
    248a:	bf00      	nop
    248c:	0000ea8d 	.word	0x0000ea8d
    2490:	2001de6a 	.word	0x2001de6a

00002494 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2498:	4604      	mov	r4, r0
    249a:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    249c:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    249e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    24a2:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
    24a4:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    24a6:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
    24a8:	7820      	ldrb	r0, [r4, #0]
    24aa:	b920      	cbnz	r0, 24b6 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    24ac:	4b61      	ldr	r3, [pc, #388]	; (2634 <usb_fix_descriptor+0x1a0>)
    24ae:	3402      	adds	r4, #2
    24b0:	429c      	cmp	r4, r3
    24b2:	d01f      	beq.n	24f4 <usb_fix_descriptor+0x60>
    24b4:	e7f2      	b.n	249c <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    24b6:	7863      	ldrb	r3, [r4, #1]
    24b8:	2b05      	cmp	r3, #5
    24ba:	d805      	bhi.n	24c8 <usb_fix_descriptor+0x34>
    24bc:	e8df f003 	tbb	[pc, r3]
    24c0:	78030478 	.word	0x78030478
    24c4:	2007      	.short	0x2007
    24c6:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    24c8:	7823      	ldrb	r3, [r4, #0]
    24ca:	441c      	add	r4, r3
    24cc:	e7ec      	b.n	24a8 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    24ce:	78e3      	ldrb	r3, [r4, #3]
    24d0:	2b00      	cmp	r3, #0
    24d2:	d1f9      	bne.n	24c8 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    24d4:	78a3      	ldrb	r3, [r4, #2]
    24d6:	b183      	cbz	r3, 24fa <usb_fix_descriptor+0x66>
			numof_ifaces++;
    24d8:	f109 0901 	add.w	r9, r9, #1
    24dc:	fa5f f989 	uxtb.w	r9, r9
			break;
    24e0:	e7f2      	b.n	24c8 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    24e2:	6872      	ldr	r2, [r6, #4]
    24e4:	4294      	cmp	r4, r2
    24e6:	f000 809d 	beq.w	2624 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24ea:	3624      	adds	r6, #36	; 0x24
    24ec:	429e      	cmp	r6, r3
    24ee:	d3f8      	bcc.n	24e2 <usb_fix_descriptor+0x4e>
					return -1;
    24f0:	f04f 30ff 	mov.w	r0, #4294967295
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    24f4:	b005      	add	sp, #20
    24f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24fa:	4e4f      	ldr	r6, [pc, #316]	; (2638 <usb_fix_descriptor+0x1a4>)
    24fc:	4b4f      	ldr	r3, [pc, #316]	; (263c <usb_fix_descriptor+0x1a8>)
    24fe:	e7f5      	b.n	24ec <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    2500:	2e00      	cmp	r6, #0
    2502:	d0f5      	beq.n	24f0 <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2504:	2300      	movs	r3, #0
    2506:	2101      	movs	r1, #1
    2508:	7f32      	ldrb	r2, [r6, #28]
    250a:	4293      	cmp	r3, r2
    250c:	d2f0      	bcs.n	24f0 <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    250e:	6a32      	ldr	r2, [r6, #32]
    2510:	78a7      	ldrb	r7, [r4, #2]
    2512:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2516:	7910      	ldrb	r0, [r2, #4]
    2518:	4287      	cmp	r7, r0
    251a:	d001      	beq.n	2520 <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    251c:	3301      	adds	r3, #1
    251e:	e7f3      	b.n	2508 <usb_fix_descriptor+0x74>
    2520:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2522:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2524:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2528:	f000 0003 	and.w	r0, r0, #3
    252c:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2530:	7920      	ldrb	r0, [r4, #4]
    2532:	fa5f f887 	uxtb.w	r8, r7
    2536:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    253a:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    253e:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2542:	2800      	cmp	r0, #0
    2544:	da28      	bge.n	2598 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2546:	f107 0010 	add.w	r0, r7, #16
    254a:	fa01 f000 	lsl.w	r0, r1, r0
    254e:	ea10 0f0b 	tst.w	r0, fp
    2552:	d129      	bne.n	25a8 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2554:	f068 007f 	orn	r0, r8, #127	; 0x7f
    2558:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    255c:	a802      	add	r0, sp, #8
    255e:	e9cd 3200 	strd	r3, r2, [sp]
    2562:	f009 f80f 	bl	b584 <usb_dc_ep_check_cap>
    2566:	e9dd 3200 	ldrd	r3, r2, [sp]
    256a:	2101      	movs	r1, #1
    256c:	b9e0      	cbnz	r0, 25a8 <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    256e:	f89d 3008 	ldrb.w	r3, [sp, #8]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2572:	f013 0f80 	tst.w	r3, #128	; 0x80
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2576:	70a3      	strb	r3, [r4, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2578:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    257a:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    257c:	bf1d      	ittte	ne
    257e:	f108 0810 	addne.w	r8, r8, #16
    2582:	fa5f f888 	uxtbne.w	r8, r8
    2586:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
    258a:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    258c:	bf14      	ite	ne
    258e:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
    2592:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    2596:	e797      	b.n	24c8 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    2598:	fa01 f007 	lsl.w	r0, r1, r7
    259c:	ea10 0f0b 	tst.w	r0, fp
    25a0:	d102      	bne.n	25a8 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
    25a2:	f88d 8008 	strb.w	r8, [sp, #8]
    25a6:	e7d9      	b.n	255c <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    25a8:	3701      	adds	r7, #1
    25aa:	2f10      	cmp	r7, #16
    25ac:	d1b9      	bne.n	2522 <usb_fix_descriptor+0x8e>
    25ae:	e7b5      	b.n	251c <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    25b0:	2d03      	cmp	r5, #3
    25b2:	d11d      	bne.n	25f0 <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    25b4:	f7ff ff2a 	bl	240c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    25b8:	4607      	mov	r7, r0
    25ba:	b168      	cbz	r0, 25d8 <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
    25bc:	f008 ff75 	bl	b4aa <strlen>
	if (!runtime_sn_len) {
    25c0:	4680      	mov	r8, r0
    25c2:	b148      	cbz	r0, 25d8 <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    25c4:	481e      	ldr	r0, [pc, #120]	; (2640 <usb_fix_descriptor+0x1ac>)
    25c6:	f008 ff70 	bl	b4aa <strlen>
	if (runtime_sn_len != default_sn_len) {
    25ca:	4580      	cmp	r8, r0
    25cc:	d104      	bne.n	25d8 <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    25ce:	4642      	mov	r2, r8
    25d0:	4639      	mov	r1, r7
    25d2:	1ca0      	adds	r0, r4, #2
    25d4:	f008 ff99 	bl	b50a <memcpy>
	for (int i = idx_max; i >= 0; i -= 2) {
    25d8:	f06f 0102 	mvn.w	r1, #2
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    25dc:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    25de:	1b09      	subs	r1, r1, r4
    25e0:	18e2      	adds	r2, r4, r3
    25e2:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    25e6:	42d1      	cmn	r1, r2
    25e8:	d513      	bpl.n	2612 <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
    25ea:	3501      	adds	r5, #1
    25ec:	b2ed      	uxtb	r5, r5
			break;
    25ee:	e76b      	b.n	24c8 <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
    25f0:	2d00      	cmp	r5, #0
    25f2:	d1f1      	bne.n	25d8 <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
    25f4:	f1ba 0f00 	cmp.w	sl, #0
    25f8:	f43f af7a 	beq.w	24f0 <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    25fc:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2600:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    2604:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2608:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    260c:	f88a 9004 	strb.w	r9, [sl, #4]
    2610:	e7eb      	b.n	25ea <usb_fix_descriptor+0x156>
		buf[i] = 0U;
    2612:	f04f 0000 	mov.w	r0, #0
    2616:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    261a:	f813 0901 	ldrb.w	r0, [r3], #-1
    261e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2622:	e7e0      	b.n	25e6 <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
    2624:	68b3      	ldr	r3, [r6, #8]
    2626:	2b00      	cmp	r3, #0
    2628:	f43f af56 	beq.w	24d8 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    262c:	4649      	mov	r1, r9
    262e:	4620      	mov	r0, r4
    2630:	4798      	blx	r3
    2632:	e751      	b.n	24d8 <usb_fix_descriptor+0x44>
    2634:	2000a411 	.word	0x2000a411
    2638:	2000a414 	.word	0x2000a414
    263c:	2000a438 	.word	0x2000a438
    2640:	0000ea8d 	.word	0x0000ea8d

00002644 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2644:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2646:	4804      	ldr	r0, [pc, #16]	; (2658 <usb_get_device_descriptor+0x14>)
    2648:	f7ff ff24 	bl	2494 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
    264c:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    264e:	4802      	ldr	r0, [pc, #8]	; (2658 <usb_get_device_descriptor+0x14>)
    2650:	bf18      	it	ne
    2652:	2000      	movne	r0, #0
    2654:	bd08      	pop	{r3, pc}
    2656:	bf00      	nop
    2658:	2000a330 	.word	0x2000a330

0000265c <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    265c:	4b09      	ldr	r3, [pc, #36]	; (2684 <usb_ep_get_transfer+0x28>)
    265e:	2100      	movs	r1, #0
    2660:	461a      	mov	r2, r3
{
    2662:	b510      	push	{r4, lr}
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2664:	781c      	ldrb	r4, [r3, #0]
    2666:	4284      	cmp	r4, r0
    2668:	d104      	bne.n	2674 <usb_ep_get_transfer+0x18>
    266a:	685c      	ldr	r4, [r3, #4]
    266c:	b114      	cbz	r4, 2674 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    266e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2672:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2674:	3101      	adds	r1, #1
    2676:	2904      	cmp	r1, #4
    2678:	f103 0340 	add.w	r3, r3, #64	; 0x40
    267c:	d1f2      	bne.n	2664 <usb_ep_get_transfer+0x8>
	return NULL;
    267e:	2000      	movs	r0, #0
    2680:	e7f7      	b.n	2672 <usb_ep_get_transfer+0x16>
    2682:	bf00      	nop
    2684:	2001ac9c 	.word	0x2001ac9c

00002688 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    268c:	f850 3c28 	ldr.w	r3, [r0, #-40]
{
    2690:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2692:	3310      	adds	r3, #16
	ep = trans->ep;
    2694:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    2698:	d110      	bne.n	26bc <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    269a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    269c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    26a0:	0799      	lsls	r1, r3, #30
    26a2:	d53c      	bpl.n	271e <usb_transfer_work+0x96>
		if (!trans->bsize) {
    26a4:	bb02      	cbnz	r2, 26e8 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    26a6:	f013 0304 	ands.w	r3, r3, #4
    26aa:	d104      	bne.n	26b6 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    26ac:	461a      	mov	r2, r3
    26ae:	4619      	mov	r1, r3
    26b0:	4630      	mov	r0, r6
    26b2:	f008 fa46 	bl	ab42 <usb_write>
			}
			trans->status = 0;
    26b6:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    26b8:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    26bc:	f854 3c28 	ldr.w	r3, [r4, #-40]
    26c0:	3310      	adds	r3, #16
    26c2:	d00e      	beq.n	26e2 <usb_transfer_work+0x5a>
    26c4:	f854 5c18 	ldr.w	r5, [r4, #-24]
    26c8:	b15d      	cbz	r5, 26e2 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    26ca:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    26ce:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    26d2:	f00b f99e 	bl	da12 <k_is_in_isr>
    26d6:	2800      	cmp	r0, #0
    26d8:	d04c      	beq.n	2774 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    26da:	4621      	mov	r1, r4
    26dc:	482d      	ldr	r0, [pc, #180]	; (2794 <usb_transfer_work+0x10c>)
    26de:	f00b fa70 	bl	dbc2 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    26e2:	b002      	add	sp, #8
    26e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    26e8:	f850 1c24 	ldr.w	r1, [r0, #-36]
    26ec:	ab01      	add	r3, sp, #4
    26ee:	4630      	mov	r0, r6
    26f0:	f008 fa27 	bl	ab42 <usb_write>
		if (ret) {
    26f4:	b110      	cbz	r0, 26fc <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    26f6:	f06f 0315 	mvn.w	r3, #21
    26fa:	e7dd      	b.n	26b8 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    26fc:	9a01      	ldr	r2, [sp, #4]
    26fe:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2702:	4413      	add	r3, r2
    2704:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2708:	f854 3c20 	ldr.w	r3, [r4, #-32]
    270c:	1a9b      	subs	r3, r3, r2
    270e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2712:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2716:	4413      	add	r3, r2
    2718:	f844 3c1c 	str.w	r3, [r4, #-28]
    271c:	e7ce      	b.n	26bc <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    271e:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2722:	ab01      	add	r3, sp, #4
    2724:	4630      	mov	r0, r6
    2726:	f002 f9e1 	bl	4aec <usb_dc_ep_read_wait>
		if (ret) {
    272a:	2800      	cmp	r0, #0
    272c:	d1e3      	bne.n	26f6 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    272e:	9d01      	ldr	r5, [sp, #4]
    2730:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2734:	442b      	add	r3, r5
    2736:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    273a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    273e:	1b5b      	subs	r3, r3, r5
    2740:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2744:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2748:	442b      	add	r3, r5
    274a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    274e:	2d00      	cmp	r5, #0
    2750:	d0b1      	beq.n	26b6 <usb_transfer_work+0x2e>
    2752:	4630      	mov	r0, r6
    2754:	f002 fa6e 	bl	4c34 <usb_dc_ep_mps>
    2758:	fbb5 f3f0 	udiv	r3, r5, r0
    275c:	fb03 5510 	mls	r5, r3, r0, r5
    2760:	2d00      	cmp	r5, #0
    2762:	d1a8      	bne.n	26b6 <usb_transfer_work+0x2e>
    2764:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2768:	2b00      	cmp	r3, #0
    276a:	d0a4      	beq.n	26b6 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    276c:	4630      	mov	r0, r6
    276e:	f002 fa05 	bl	4b7c <usb_dc_ep_read_continue>
    2772:	e7a3      	b.n	26bc <usb_transfer_work+0x34>
		trans->cb = NULL;
    2774:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2778:	f1a4 0010 	sub.w	r0, r4, #16
    277c:	f006 fb84 	bl	8e88 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    2780:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2784:	338c      	adds	r3, #140	; 0x8c
    2786:	d0ac      	beq.n	26e2 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    2788:	4642      	mov	r2, r8
    278a:	4639      	mov	r1, r7
    278c:	4630      	mov	r0, r6
    278e:	47a8      	blx	r5
    2790:	e7a7      	b.n	26e2 <usb_transfer_work+0x5a>
    2792:	bf00      	nop
    2794:	2000a438 	.word	0x2000a438

00002798 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2798:	1e4b      	subs	r3, r1, #1
    279a:	2b01      	cmp	r3, #1
{
    279c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    279e:	4606      	mov	r6, r0
    27a0:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    27a2:	d80f      	bhi.n	27c4 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    27a4:	f7ff ff5a 	bl	265c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    27a8:	4604      	mov	r4, r0
    27aa:	b968      	cbnz	r0, 27c8 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    27ac:	2d01      	cmp	r5, #1
    27ae:	d109      	bne.n	27c4 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    27b0:	ab01      	add	r3, sp, #4
    27b2:	2201      	movs	r2, #1
    27b4:	4630      	mov	r0, r6
    27b6:	f10d 0103 	add.w	r1, sp, #3
    27ba:	f002 f997 	bl	4aec <usb_dc_ep_read_wait>
			} while (bytes);
    27be:	9b01      	ldr	r3, [sp, #4]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d1f5      	bne.n	27b0 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    27c4:	b002      	add	sp, #8
    27c6:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    27c8:	f00b f923 	bl	da12 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    27cc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    27d0:	b108      	cbz	r0, 27d6 <usb_transfer_ep_callback+0x3e>
    27d2:	2d01      	cmp	r5, #1
    27d4:	d105      	bne.n	27e2 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    27d6:	4608      	mov	r0, r1
}
    27d8:	b002      	add	sp, #8
    27da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    27de:	f7ff bf53 	b.w	2688 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    27e2:	4803      	ldr	r0, [pc, #12]	; (27f0 <usb_transfer_ep_callback+0x58>)
}
    27e4:	b002      	add	sp, #8
    27e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    27ea:	f00b b9ea 	b.w	dbc2 <k_work_submit_to_queue>
    27ee:	bf00      	nop
    27f0:	2000a438 	.word	0x2000a438

000027f4 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    27f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27f8:	4606      	mov	r6, r0
    27fa:	4615      	mov	r5, r2
    27fc:	4698      	mov	r8, r3
    27fe:	9101      	str	r1, [sp, #4]
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2800:	f008 f9e5 	bl	abce <usb_transfer_is_busy>
    2804:	4604      	mov	r4, r0
    2806:	2800      	cmp	r0, #0
    2808:	d15c      	bne.n	28c4 <CONFIG_MAIN_STACK_SIZE+0xc4>
	__asm__ volatile(
    280a:	f04f 0320 	mov.w	r3, #32
    280e:	f3ef 8a11 	mrs	sl, BASEPRI
    2812:	f383 8812 	msr	BASEPRI_MAX, r3
    2816:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    281a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 28cc <CONFIG_MAIN_STACK_SIZE+0xcc>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    281e:	01a7      	lsls	r7, r4, #6
	return z_impl_k_sem_take(sem, timeout);
    2820:	2200      	movs	r2, #0
    2822:	2300      	movs	r3, #0
    2824:	4658      	mov	r0, fp
    2826:	f006 fb4f 	bl	8ec8 <z_impl_k_sem_take>
    282a:	b968      	cbnz	r0, 2848 <CONFIG_MAIN_STACK_SIZE+0x48>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    282c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 28d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
    2830:	eb09 0407 	add.w	r4, r9, r7
    2834:	6863      	ldr	r3, [r4, #4]
    2836:	f113 0f10 	cmn.w	r3, #16
    283a:	d114      	bne.n	2866 <CONFIG_MAIN_STACK_SIZE+0x66>
    283c:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    283e:	4658      	mov	r0, fp
    2840:	f006 fb22 	bl	8e88 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2844:	9b01      	ldr	r3, [sp, #4]
    2846:	e006      	b.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2848:	3401      	adds	r4, #1
    284a:	2c04      	cmp	r4, #4
    284c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2850:	d1e5      	bne.n	281e <CONFIG_MAIN_STACK_SIZE+0x1e>
		ret = -ENOMEM;
    2852:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2856:	f38a 8811 	msr	BASEPRI, sl
    285a:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    285e:	4618      	mov	r0, r3
    2860:	b003      	add	sp, #12
    2862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2866:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2868:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    286a:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    286e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2870:	4630      	mov	r0, r6
	trans->cb = cb;
    2872:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	trans->flags = flags;
    2876:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    287a:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    287c:	f06f 030f 	mvn.w	r3, #15
    2880:	6063      	str	r3, [r4, #4]
	trans->ep = ep;
    2882:	f809 6007 	strb.w	r6, [r9, r7]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2886:	f002 f9d5 	bl	4c34 <usb_dc_ep_mps>
    288a:	b158      	cbz	r0, 28a4 <CONFIG_MAIN_STACK_SIZE+0xa4>
    288c:	4630      	mov	r0, r6
    288e:	f002 f9d1 	bl	4c34 <usb_dc_ep_mps>
    2892:	fbb5 f2f0 	udiv	r2, r5, r0
    2896:	fb02 5510 	mls	r5, r2, r0, r5
    289a:	b11d      	cbz	r5, 28a4 <CONFIG_MAIN_STACK_SIZE+0xa4>
		trans->flags |= USB_TRANS_NO_ZLP;
    289c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    289e:	f043 0304 	orr.w	r3, r3, #4
    28a2:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    28a4:	f018 0f02 	tst.w	r8, #2
    28a8:	d007      	beq.n	28ba <CONFIG_MAIN_STACK_SIZE+0xba>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28aa:	372c      	adds	r7, #44	; 0x2c
    28ac:	4809      	ldr	r0, [pc, #36]	; (28d4 <CONFIG_MAIN_STACK_SIZE+0xd4>)
    28ae:	eb09 0107 	add.w	r1, r9, r7
    28b2:	f00b f986 	bl	dbc2 <k_work_submit_to_queue>
	int i, key, ret = 0;
    28b6:	2300      	movs	r3, #0
    28b8:	e7cd      	b.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
		ret = usb_dc_ep_read_continue(ep);
    28ba:	4630      	mov	r0, r6
    28bc:	f002 f95e 	bl	4b7c <usb_dc_ep_read_continue>
    28c0:	4603      	mov	r3, r0
    28c2:	e7c8      	b.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
		return -EBUSY;
    28c4:	f06f 030f 	mvn.w	r3, #15
    28c8:	e7c9      	b.n	285e <CONFIG_MAIN_STACK_SIZE+0x5e>
    28ca:	bf00      	nop
    28cc:	2001acb8 	.word	0x2001acb8
    28d0:	2001ac9c 	.word	0x2001ac9c
    28d4:	2000a438 	.word	0x2000a438

000028d8 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    28d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    28da:	f04f 0320 	mov.w	r3, #32
    28de:	f3ef 8411 	mrs	r4, BASEPRI
    28e2:	f383 8812 	msr	BASEPRI_MAX, r3
    28e6:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    28ea:	f7ff feb7 	bl	265c <usb_ep_get_transfer>
	if (!trans) {
    28ee:	b150      	cbz	r0, 2906 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    28f0:	6843      	ldr	r3, [r0, #4]
    28f2:	3310      	adds	r3, #16
    28f4:	d107      	bne.n	2906 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    28f6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28fa:	f100 012c 	add.w	r1, r0, #44	; 0x2c
	trans->status = -ECANCELED;
    28fe:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2900:	4803      	ldr	r0, [pc, #12]	; (2910 <usb_cancel_transfer+0x38>)
    2902:	f00b f95e 	bl	dbc2 <k_work_submit_to_queue>
	__asm__ volatile(
    2906:	f384 8811 	msr	BASEPRI, r4
    290a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    290e:	bd10      	pop	{r4, pc}
    2910:	2000a438 	.word	0x2000a438

00002914 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2918:	2504      	movs	r5, #4
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    291a:	f06f 078b 	mvn.w	r7, #139	; 0x8b
    291e:	4c0f      	ldr	r4, [pc, #60]	; (295c <usb_cancel_transfers+0x48>)
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2920:	f8df 803c 	ldr.w	r8, [pc, #60]	; 2960 <usb_cancel_transfers+0x4c>
	__asm__ volatile(
    2924:	f04f 0320 	mov.w	r3, #32
    2928:	f3ef 8611 	mrs	r6, BASEPRI
    292c:	f383 8812 	msr	BASEPRI_MAX, r3
    2930:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    2934:	6863      	ldr	r3, [r4, #4]
    2936:	3310      	adds	r3, #16
    2938:	d105      	bne.n	2946 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    293a:	4640      	mov	r0, r8
    293c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
			trans->status = -ECANCELED;
    2940:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2942:	f00b f93e 	bl	dbc2 <k_work_submit_to_queue>
	__asm__ volatile(
    2946:	f386 8811 	msr	BASEPRI, r6
    294a:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    294e:	3d01      	subs	r5, #1
    2950:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2954:	d1e6      	bne.n	2924 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    295a:	bf00      	nop
    295c:	2001ac9c 	.word	0x2001ac9c
    2960:	2000a438 	.word	0x2000a438

00002964 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2964:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2966:	2500      	movs	r5, #0
    2968:	4c09      	ldr	r4, [pc, #36]	; (2990 <usb_transfer_init+0x2c>)
		k_work_init(&ut_data[i].work, usb_transfer_work);
    296a:	4e0a      	ldr	r6, [pc, #40]	; (2994 <usb_transfer_init+0x30>)
    296c:	4631      	mov	r1, r6
    296e:	4620      	mov	r0, r4
    2970:	f00b f90a 	bl	db88 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2974:	2201      	movs	r2, #1
    2976:	f1a4 0010 	sub.w	r0, r4, #16
    297a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    297c:	3501      	adds	r5, #1
    297e:	f00b f8e5 	bl	db4c <z_impl_k_sem_init>
    2982:	2d04      	cmp	r5, #4
    2984:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2988:	d1f0      	bne.n	296c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    298a:	2000      	movs	r0, #0
    298c:	bd70      	pop	{r4, r5, r6, pc}
    298e:	bf00      	nop
    2990:	2001acc8 	.word	0x2001acc8
    2994:	00002689 	.word	0x00002689

00002998 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    2998:	b570      	push	{r4, r5, r6, lr}
    299a:	4604      	mov	r4, r0
    299c:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    299e:	7901      	ldrb	r1, [r0, #4]
    29a0:	4812      	ldr	r0, [pc, #72]	; (29ec <cdc_acm_class_handle_req+0x54>)
{
    29a2:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    29a4:	f008 f8f0 	bl	ab88 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    29a8:	b1e8      	cbz	r0, 29e6 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    29aa:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    29ae:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    29b0:	2a00      	cmp	r2, #0
    29b2:	db11      	blt.n	29d8 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    29b4:	2b20      	cmp	r3, #32
    29b6:	d004      	beq.n	29c2 <cdc_acm_class_handle_req+0x2a>
    29b8:	2b22      	cmp	r3, #34	; 0x22
    29ba:	d009      	beq.n	29d0 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    29bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    29c0:	e005      	b.n	29ce <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    29c2:	2207      	movs	r2, #7
    29c4:	6829      	ldr	r1, [r5, #0]
    29c6:	3810      	subs	r0, #16
    29c8:	f008 fd9f 	bl	b50a <memcpy>
			return 0;
    29cc:	2000      	movs	r0, #0
}
    29ce:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    29d0:	8863      	ldrh	r3, [r4, #2]
    29d2:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    29d6:	e7f9      	b.n	29cc <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    29d8:	2b21      	cmp	r3, #33	; 0x21
    29da:	d1ef      	bne.n	29bc <cdc_acm_class_handle_req+0x24>
			*len = sizeof(dev_data->line_coding);
    29dc:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    29de:	3810      	subs	r0, #16
    29e0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    29e2:	6033      	str	r3, [r6, #0]
    29e4:	e7f2      	b.n	29cc <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    29e6:	f06f 0012 	mvn.w	r0, #18
    29ea:	e7f0      	b.n	29ce <cdc_acm_class_handle_req+0x36>
    29ec:	2001ad9c 	.word	0x2001ad9c

000029f0 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    29f0:	4601      	mov	r1, r0
    29f2:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    29f4:	4803      	ldr	r0, [pc, #12]	; (2a04 <cdc_acm_int_in+0x14>)
    29f6:	f008 f8d4 	bl	aba2 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    29fa:	b110      	cbz	r0, 2a02 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    29fc:	2301      	movs	r3, #1
    29fe:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    2a02:	bd08      	pop	{r3, pc}
    2a04:	2001ad9c 	.word	0x2001ad9c

00002a08 <cdc_acm_irq_rx_enable>:
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;

	dev_data->rx_irq_ena = true;
    2a08:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2a0a:	6901      	ldr	r1, [r0, #16]
	dev_data->rx_irq_ena = true;
    2a0c:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    2a10:	680b      	ldr	r3, [r1, #0]
    2a12:	b133      	cbz	r3, 2a22 <cdc_acm_irq_rx_enable+0x1a>
    2a14:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    2a18:	b11b      	cbz	r3, 2a22 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2a1a:	4802      	ldr	r0, [pc, #8]	; (2a24 <cdc_acm_irq_rx_enable+0x1c>)
    2a1c:	3108      	adds	r1, #8
    2a1e:	f00b b8d0 	b.w	dbc2 <k_work_submit_to_queue>
	}
}
    2a22:	4770      	bx	lr
    2a24:	2000a438 	.word	0x2000a438

00002a28 <cdc_acm_irq_tx_enable>:
	dev_data->tx_irq_ena = true;
    2a28:	2301      	movs	r3, #1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2a2a:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2a2c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    2a30:	680b      	ldr	r3, [r1, #0]
    2a32:	b133      	cbz	r3, 2a42 <cdc_acm_irq_tx_enable+0x1a>
    2a34:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    2a38:	b11b      	cbz	r3, 2a42 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2a3a:	4802      	ldr	r0, [pc, #8]	; (2a44 <cdc_acm_irq_tx_enable+0x1c>)
    2a3c:	3108      	adds	r1, #8
    2a3e:	f00b b8c0 	b.w	dbc2 <k_work_submit_to_queue>
}
    2a42:	4770      	bx	lr
    2a44:	2000a438 	.word	0x2000a438

00002a48 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2a48:	2301      	movs	r3, #1
{
    2a4a:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    2a4c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2a50:	6813      	ldr	r3, [r2, #0]
{
    2a52:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    2a54:	b13b      	cbz	r3, 2a66 <cdc_acm_write_cb+0x1e>
    2a56:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    2a5a:	b123      	cbz	r3, 2a66 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2a5c:	4808      	ldr	r0, [pc, #32]	; (2a80 <cdc_acm_write_cb+0x38>)
    2a5e:	f102 0108 	add.w	r1, r2, #8
    2a62:	f00b f8ae 	bl	dbc2 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    2a66:	6f23      	ldr	r3, [r4, #112]	; 0x70
    2a68:	689a      	ldr	r2, [r3, #8]
    2a6a:	691b      	ldr	r3, [r3, #16]
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d006      	beq.n	2a7e <cdc_acm_write_cb+0x36>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2a70:	f104 0118 	add.w	r1, r4, #24
    2a74:	4802      	ldr	r0, [pc, #8]	; (2a80 <cdc_acm_write_cb+0x38>)
}
    2a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2a7a:	f00b b8a2 	b.w	dbc2 <k_work_submit_to_queue>
}
    2a7e:	bd10      	pop	{r4, pc}
    2a80:	2000a438 	.word	0x2000a438

00002a84 <cdc_acm_reset_port>:
	dev_data->tx_ready = false;
    2a84:	2100      	movs	r1, #0
{
    2a86:	4603      	mov	r3, r0
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2a88:	4a0b      	ldr	r2, [pc, #44]	; (2ab8 <cdc_acm_reset_port+0x34>)
	dev_data->tx_ready = false;
    2a8a:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2a8c:	6810      	ldr	r0, [r2, #0]
	dev_data->serial_state = 0;
    2a8e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2a92:	6758      	str	r0, [r3, #116]	; 0x74
    2a94:	8890      	ldrh	r0, [r2, #4]
    2a96:	7992      	ldrb	r2, [r2, #6]
    2a98:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    2a9c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->line_state = 0;
    2aa0:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2aa4:	2240      	movs	r2, #64	; 0x40
	dev_data->configured = false;
    2aa6:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
	dev_data->rx_paused = false;
    2aaa:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2aae:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    2ab2:	f008 bd35 	b.w	b520 <memset>
    2ab6:	bf00      	nop
    2ab8:	0000e330 	.word	0x0000e330

00002abc <cdc_acm_fifo_fill>:
{
    2abc:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2abe:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2ac0:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    2ac4:	b170      	cbz	r0, 2ae4 <cdc_acm_fifo_fill+0x28>
    2ac6:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    2aca:	b963      	cbnz	r3, 2ae6 <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
    2acc:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2ad0:	6f28      	ldr	r0, [r5, #112]	; 0x70
    2ad2:	f007 ffb5 	bl	aa40 <ring_buf_put>
    2ad6:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2ad8:	f105 0118 	add.w	r1, r5, #24
    2adc:	4803      	ldr	r0, [pc, #12]	; (2aec <cdc_acm_fifo_fill+0x30>)
    2ade:	f00b f870 	bl	dbc2 <k_work_submit_to_queue>
	return wrote;
    2ae2:	4620      	mov	r0, r4
}
    2ae4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2ae6:	2000      	movs	r0, #0
    2ae8:	e7fc      	b.n	2ae4 <cdc_acm_fifo_fill+0x28>
    2aea:	bf00      	nop
    2aec:	2000a438 	.word	0x2000a438

00002af0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2af0:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2af2:	6904      	ldr	r4, [r0, #16]
{
    2af4:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2af8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    2afc:	b18b      	cbz	r3, 2b22 <cdc_acm_poll_out+0x32>
    2afe:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    2b02:	b973      	cbnz	r3, 2b22 <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2b04:	f10d 0107 	add.w	r1, sp, #7
    2b08:	2201      	movs	r2, #1
    2b0a:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    2b0c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2b10:	f007 ff96 	bl	aa40 <ring_buf_put>
    2b14:	4601      	mov	r1, r0
    2b16:	b130      	cbz	r0, 2b26 <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2b18:	480a      	ldr	r0, [pc, #40]	; (2b44 <cdc_acm_poll_out+0x54>)
    2b1a:	f104 0118 	add.w	r1, r4, #24
    2b1e:	f00b f850 	bl	dbc2 <k_work_submit_to_queue>
}
    2b22:	b002      	add	sp, #8
    2b24:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2b26:	2201      	movs	r2, #1
    2b28:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2b2a:	f007 ffdb 	bl	aae4 <ring_buf_get>
    2b2e:	2800      	cmp	r0, #0
    2b30:	d0f7      	beq.n	2b22 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2b32:	2201      	movs	r2, #1
    2b34:	6f20      	ldr	r0, [r4, #112]	; 0x70
    2b36:	f10d 0107 	add.w	r1, sp, #7
    2b3a:	f007 ff81 	bl	aa40 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2b3e:	2800      	cmp	r0, #0
    2b40:	d1ea      	bne.n	2b18 <cdc_acm_poll_out+0x28>
    2b42:	e7ee      	b.n	2b22 <cdc_acm_poll_out+0x32>
    2b44:	2000a438 	.word	0x2000a438

00002b48 <tx_work_handler>:
	struct usb_cfg_data *cfg = (void *)dev->config;
    2b48:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
    2b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2b4c:	685b      	ldr	r3, [r3, #4]
{
    2b4e:	4605      	mov	r5, r0
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2b50:	6a1b      	ldr	r3, [r3, #32]
{
    2b52:	b085      	sub	sp, #20
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2b54:	7d1f      	ldrb	r7, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    2b56:	4638      	mov	r0, r7
    2b58:	f008 f839 	bl	abce <usb_transfer_is_busy>
    2b5c:	4606      	mov	r6, r0
    2b5e:	b9d8      	cbnz	r0, 2b98 <tx_work_handler+0x50>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2b66:	a903      	add	r1, sp, #12
    2b68:	f007 ff89 	bl	aa7e <ring_buf_get_claim>
	if (!len) {
    2b6c:	4604      	mov	r4, r0
    2b6e:	b198      	cbz	r0, 2b98 <tx_work_handler+0x50>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2b70:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    2b72:	f1a5 0318 	sub.w	r3, r5, #24
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2b76:	9301      	str	r3, [sp, #4]
    2b78:	4b08      	ldr	r3, [pc, #32]	; (2b9c <tx_work_handler+0x54>)
		len -= 1;
    2b7a:	bf08      	it	eq
    2b7c:	f100 34ff 	addeq.w	r4, r0, #4294967295
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2b80:	9903      	ldr	r1, [sp, #12]
    2b82:	9300      	str	r3, [sp, #0]
    2b84:	4622      	mov	r2, r4
    2b86:	2302      	movs	r3, #2
    2b88:	4638      	mov	r0, r7
	dev_data->tx_ready = false;
    2b8a:	742e      	strb	r6, [r5, #16]
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    2b8c:	f7ff fe32 	bl	27f4 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    2b90:	4621      	mov	r1, r4
    2b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2b94:	f007 ff92 	bl	aabc <ring_buf_get_finish>
}
    2b98:	b005      	add	sp, #20
    2b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b9c:	00002a49 	.word	0x00002a49

00002ba0 <cdc_acm_init>:
	parent->next = child;
    2ba0:	2300      	movs	r3, #0
{
    2ba2:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2ba4:	6904      	ldr	r4, [r0, #16]
    2ba6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2baa:	4b0c      	ldr	r3, [pc, #48]	; (2bdc <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    2bac:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    2bb0:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    2bb2:	f104 0288 	add.w	r2, r4, #136	; 0x88
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2bb6:	b969      	cbnz	r1, 2bd4 <cdc_acm_init+0x34>
	list->head = node;
    2bb8:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    2bbc:	f104 0008 	add.w	r0, r4, #8
    2bc0:	4907      	ldr	r1, [pc, #28]	; (2be0 <cdc_acm_init+0x40>)
    2bc2:	f00a ffe1 	bl	db88 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    2bc6:	f104 0018 	add.w	r0, r4, #24
    2bca:	4906      	ldr	r1, [pc, #24]	; (2be4 <cdc_acm_init+0x44>)
    2bcc:	f00a ffdc 	bl	db88 <k_work_init>
}
    2bd0:	2000      	movs	r0, #0
    2bd2:	bd10      	pop	{r4, pc}
	parent->next = child;
    2bd4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2bd6:	605a      	str	r2, [r3, #4]
}
    2bd8:	e7f0      	b.n	2bbc <cdc_acm_init+0x1c>
    2bda:	bf00      	nop
    2bdc:	2001ad9c 	.word	0x2001ad9c
    2be0:	0000abf9 	.word	0x0000abf9
    2be4:	00002b49 	.word	0x00002b49

00002be8 <cdc_acm_send_notification.isra.0>:
	notification.bmRequestType = 0xA1;
    2be8:	23a1      	movs	r3, #161	; 0xa1
static int cdc_acm_send_notification(const struct device *dev,
    2bea:	b530      	push	{r4, r5, lr}
    2bec:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    2bee:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    2bf2:	2320      	movs	r3, #32
    2bf4:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    2bf8:	2300      	movs	r3, #0
	struct usb_cfg_data * const cfg = (void *)dev->config;
    2bfa:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2bfc:	6905      	ldr	r5, [r0, #16]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    2bfe:	2002      	movs	r0, #2
	dev_data->notification_sent = 0U;
    2c00:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    2c04:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2c08:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    2c0a:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    2c0e:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2c12:	220a      	movs	r2, #10
    2c14:	7900      	ldrb	r0, [r0, #4]
    2c16:	a901      	add	r1, sp, #4
	notification.wValue = 0U;
    2c18:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    2c1c:	f007 ff91 	bl	ab42 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2c20:	4c05      	ldr	r4, [pc, #20]	; (2c38 <cdc_acm_send_notification.isra.0+0x50>)
    2c22:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    2c26:	b923      	cbnz	r3, 2c32 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    2c28:	2001      	movs	r0, #1
    2c2a:	f00b f8ea 	bl	de02 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2c2e:	3c01      	subs	r4, #1
    2c30:	d1f7      	bne.n	2c22 <cdc_acm_send_notification.isra.0+0x3a>
}
    2c32:	b005      	add	sp, #20
    2c34:	bd30      	pop	{r4, r5, pc}
    2c36:	bf00      	nop
    2c38:	000186a1 	.word	0x000186a1

00002c3c <cdc_acm_read_cb>:
{
    2c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2c3e:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2c40:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    2c44:	1e0a      	subs	r2, r1, #0
{
    2c46:	4605      	mov	r5, r0
	if (size <= 0) {
    2c48:	dd1d      	ble.n	2c86 <cdc_acm_read_cb+0x4a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    2c4a:	4631      	mov	r1, r6
    2c4c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    2c4e:	f007 fef7 	bl	aa40 <ring_buf_put>
	dev_data->rx_ready = true;
    2c52:	2301      	movs	r3, #1
    2c54:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    2c58:	6823      	ldr	r3, [r4, #0]
    2c5a:	b13b      	cbz	r3, 2c6c <cdc_acm_read_cb+0x30>
    2c5c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    2c60:	b123      	cbz	r3, 2c6c <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2c62:	480e      	ldr	r0, [pc, #56]	; (2c9c <cdc_acm_read_cb+0x60>)
    2c64:	f104 0108 	add.w	r1, r4, #8
    2c68:	f00a ffab 	bl	dbc2 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    2c6c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    2c6e:	684b      	ldr	r3, [r1, #4]
    2c70:	694a      	ldr	r2, [r1, #20]
    2c72:	1a9a      	subs	r2, r3, r2
    2c74:	69cb      	ldr	r3, [r1, #28]
    2c76:	1a9b      	subs	r3, r3, r2
    2c78:	2b3f      	cmp	r3, #63	; 0x3f
    2c7a:	d804      	bhi.n	2c86 <cdc_acm_read_cb+0x4a>
		dev_data->rx_paused = true;
    2c7c:	2301      	movs	r3, #1
    2c7e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    2c82:	b002      	add	sp, #8
    2c84:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    2c86:	4b06      	ldr	r3, [pc, #24]	; (2ca0 <cdc_acm_read_cb+0x64>)
    2c88:	2240      	movs	r2, #64	; 0x40
    2c8a:	9300      	str	r3, [sp, #0]
    2c8c:	4631      	mov	r1, r6
    2c8e:	2301      	movs	r3, #1
    2c90:	4628      	mov	r0, r5
    2c92:	9401      	str	r4, [sp, #4]
    2c94:	f7ff fdae 	bl	27f4 <usb_transfer>
    2c98:	e7f3      	b.n	2c82 <cdc_acm_read_cb+0x46>
    2c9a:	bf00      	nop
    2c9c:	2000a438 	.word	0x2000a438
    2ca0:	00002c3d 	.word	0x00002c3d

00002ca4 <cdc_acm_dev_status_cb>:
{
    2ca4:	b538      	push	{r3, r4, r5, lr}
    2ca6:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2ca8:	4601      	mov	r1, r0
    2caa:	4824      	ldr	r0, [pc, #144]	; (2d3c <cdc_acm_dev_status_cb+0x98>)
    2cac:	f007 ff61 	bl	ab72 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    2cb0:	4604      	mov	r4, r0
    2cb2:	b380      	cbz	r0, 2d16 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2cb4:	4602      	mov	r2, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    2cb6:	f852 3984 	ldr.w	r3, [r2], #-132
	switch (status) {
    2cba:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    2cbc:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    2cbe:	2905      	cmp	r1, #5
    2cc0:	d829      	bhi.n	2d16 <cdc_acm_dev_status_cb+0x72>
    2cc2:	e8df f001 	tbb	[pc, r1]
    2cc6:	2820      	.short	0x2820
    2cc8:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    2ccc:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    2cd0:	b931      	cbnz	r1, 2ce0 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    2cd2:	6a1b      	ldr	r3, [r3, #32]
    2cd4:	7b18      	ldrb	r0, [r3, #12]
    2cd6:	f7ff ffb1 	bl	2c3c <cdc_acm_read_cb>
			dev_data->configured = true;
    2cda:	2301      	movs	r3, #1
    2cdc:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    2ce0:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    2ce4:	b9bb      	cbnz	r3, 2d16 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    2ce6:	2301      	movs	r3, #1
    2ce8:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    2cec:	f854 3c84 	ldr.w	r3, [r4, #-132]
    2cf0:	b18b      	cbz	r3, 2d16 <cdc_acm_dev_status_cb+0x72>
    2cf2:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    2cf6:	b173      	cbz	r3, 2d16 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2cf8:	f1a4 017c 	sub.w	r1, r4, #124	; 0x7c
    2cfc:	4810      	ldr	r0, [pc, #64]	; (2d40 <cdc_acm_dev_status_cb+0x9c>)
}
    2cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2d02:	f00a bf5e 	b.w	dbc2 <k_work_submit_to_queue>
		cdc_acm_reset_port(dev_data);
    2d06:	4610      	mov	r0, r2
}
    2d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    2d0c:	f7ff beba 	b.w	2a84 <cdc_acm_reset_port>
		dev_data->suspended = true;
    2d10:	2301      	movs	r3, #1
    2d12:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    2d16:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    2d18:	f814 1c05 	ldrb.w	r1, [r4, #-5]
    2d1c:	2900      	cmp	r1, #0
    2d1e:	d0fa      	beq.n	2d16 <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    2d20:	2100      	movs	r1, #0
			if (dev_data->configured) {
    2d22:	f814 0c06 	ldrb.w	r0, [r4, #-6]
			dev_data->suspended = false;
    2d26:	f804 1c05 	strb.w	r1, [r4, #-5]
			if (dev_data->configured) {
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d0f3      	beq.n	2d16 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    2d2e:	6a1b      	ldr	r3, [r3, #32]
    2d30:	7b18      	ldrb	r0, [r3, #12]
}
    2d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    2d36:	f7ff bf81 	b.w	2c3c <cdc_acm_read_cb>
    2d3a:	bf00      	nop
    2d3c:	2001ad9c 	.word	0x2001ad9c
    2d40:	2000a438 	.word	0x2000a438

00002d44 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    2d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    2d46:	2400      	movs	r4, #0
    2d48:	4d08      	ldr	r5, [pc, #32]	; (2d6c <z_usb_work_q_init+0x28>)
    2d4a:	f04f 33ff 	mov.w	r3, #4294967295
    2d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2d52:	4628      	mov	r0, r5
    2d54:	4906      	ldr	r1, [pc, #24]	; (2d70 <z_usb_work_q_init+0x2c>)
    2d56:	9400      	str	r4, [sp, #0]
    2d58:	f006 f9be 	bl	90d8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    2d5c:	4905      	ldr	r1, [pc, #20]	; (2d74 <z_usb_work_q_init+0x30>)
    2d5e:	4628      	mov	r0, r5
    2d60:	f00a fe5d 	bl	da1e <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    2d64:	4620      	mov	r0, r4
    2d66:	b003      	add	sp, #12
    2d68:	bd30      	pop	{r4, r5, pc}
    2d6a:	bf00      	nop
    2d6c:	2000a438 	.word	0x2000a438
    2d70:	2005e388 	.word	0x2005e388
    2d74:	0000eaa8 	.word	0x0000eaa8

00002d78 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    2d78:	4b11      	ldr	r3, [pc, #68]	; (2dc0 <flash_area_open+0x48>)
{
    2d7a:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    2d7c:	681b      	ldr	r3, [r3, #0]
{
    2d7e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    2d80:	b18b      	cbz	r3, 2da6 <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    2d82:	4a10      	ldr	r2, [pc, #64]	; (2dc4 <flash_area_open+0x4c>)
    2d84:	6811      	ldr	r1, [r2, #0]
    2d86:	2200      	movs	r2, #0
    2d88:	428a      	cmp	r2, r1
    2d8a:	db02      	blt.n	2d92 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    2d8c:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    2d90:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    2d92:	461d      	mov	r5, r3
    2d94:	f813 6b10 	ldrb.w	r6, [r3], #16
    2d98:	4286      	cmp	r6, r0
    2d9a:	d007      	beq.n	2dac <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
    2d9c:	3201      	adds	r2, #1
    2d9e:	e7f3      	b.n	2d88 <flash_area_open+0x10>
	return 0;
    2da0:	2000      	movs	r0, #0
	*fap = area;
    2da2:	6025      	str	r5, [r4, #0]
	return 0;
    2da4:	e7f4      	b.n	2d90 <flash_area_open+0x18>
		return -EACCES;
    2da6:	f06f 000c 	mvn.w	r0, #12
    2daa:	e7f1      	b.n	2d90 <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    2dac:	68e8      	ldr	r0, [r5, #12]
    2dae:	b118      	cbz	r0, 2db8 <flash_area_open+0x40>
    2db0:	f00a fdb6 	bl	d920 <z_device_is_ready>
    2db4:	2800      	cmp	r0, #0
    2db6:	d1f3      	bne.n	2da0 <flash_area_open+0x28>
		return -ENODEV;
    2db8:	f06f 0012 	mvn.w	r0, #18
    2dbc:	e7e8      	b.n	2d90 <flash_area_open+0x18>
    2dbe:	bf00      	nop
    2dc0:	2000a0e8 	.word	0x2000a0e8
    2dc4:	0000e4a4 	.word	0x0000e4a4

00002dc8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2dc8:	b570      	push	{r4, r5, r6, lr}
    2dca:	b088      	sub	sp, #32
    2dcc:	4605      	mov	r5, r0
    2dce:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    2dd0:	b2c0      	uxtb	r0, r0
    2dd2:	4669      	mov	r1, sp
{
    2dd4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    2dd6:	f7ff ffcf 	bl	2d78 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    2dda:	2800      	cmp	r0, #0
    2ddc:	db1b      	blt.n	2e16 <flash_area_get_sectors+0x4e>
    2dde:	9800      	ldr	r0, [sp, #0]
    2de0:	b1c8      	cbz	r0, 2e16 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    2de2:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    2de4:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    2de6:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    2de8:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    2dea:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    2dec:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    2df0:	2300      	movs	r3, #0
	flash_dev = fa->fa_dev;
    2df2:	68c5      	ldr	r5, [r0, #12]
	cb_data->status = 0;
    2df4:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    2df8:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
    2dfa:	f008 f80e 	bl	ae1a <flash_area_close>
	if (flash_dev == NULL) {
    2dfe:	b16d      	cbz	r5, 2e1c <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    2e00:	4628      	mov	r0, r5
    2e02:	4908      	ldr	r1, [pc, #32]	; (2e24 <flash_area_get_sectors+0x5c>)
    2e04:	aa01      	add	r2, sp, #4
    2e06:	f008 fe50 	bl	baaa <flash_page_foreach>
	if (cb_data->status == 0) {
    2e0a:	9807      	ldr	r0, [sp, #28]
    2e0c:	b908      	cbnz	r0, 2e12 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    2e0e:	9b05      	ldr	r3, [sp, #20]
    2e10:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    2e12:	b008      	add	sp, #32
    2e14:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    2e16:	f06f 0015 	mvn.w	r0, #21
    2e1a:	e7fa      	b.n	2e12 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    2e1c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2e20:	e7f7      	b.n	2e12 <flash_area_get_sectors+0x4a>
    2e22:	bf00      	nop
    2e24:	0000aeb5 	.word	0x0000aeb5

00002e28 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2e28:	4801      	ldr	r0, [pc, #4]	; (2e30 <nrf_cc3xx_platform_abort_init+0x8>)
    2e2a:	f006 bebd 	b.w	9ba8 <nrf_cc3xx_platform_set_abort>
    2e2e:	bf00      	nop
    2e30:	0000e4a8 	.word	0x0000e4a8

00002e34 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2e34:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2e36:	4604      	mov	r4, r0
    2e38:	b918      	cbnz	r0, 2e42 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2e3a:	4b0d      	ldr	r3, [pc, #52]	; (2e70 <mutex_free_platform+0x3c>)
    2e3c:	480d      	ldr	r0, [pc, #52]	; (2e74 <mutex_free_platform+0x40>)
    2e3e:	685b      	ldr	r3, [r3, #4]
    2e40:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2e42:	6861      	ldr	r1, [r4, #4]
    2e44:	2908      	cmp	r1, #8
    2e46:	d00d      	beq.n	2e64 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2e48:	f031 0304 	bics.w	r3, r1, #4
    2e4c:	d00a      	beq.n	2e64 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2e4e:	f011 0102 	ands.w	r1, r1, #2
    2e52:	d008      	beq.n	2e66 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2e54:	4621      	mov	r1, r4
    2e56:	4808      	ldr	r0, [pc, #32]	; (2e78 <mutex_free_platform+0x44>)
    2e58:	f00a fdb2 	bl	d9c0 <k_mem_slab_free>
        mutex->mutex = NULL;
    2e5c:	2300      	movs	r3, #0
    2e5e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2e60:	2300      	movs	r3, #0
    2e62:	6063      	str	r3, [r4, #4]
}
    2e64:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2e66:	2214      	movs	r2, #20
    2e68:	6820      	ldr	r0, [r4, #0]
    2e6a:	f008 fb59 	bl	b520 <memset>
    2e6e:	e7f7      	b.n	2e60 <mutex_free_platform+0x2c>
    2e70:	2000a1e4 	.word	0x2000a1e4
    2e74:	0000eab1 	.word	0x0000eab1
    2e78:	2001ada4 	.word	0x2001ada4

00002e7c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2e7c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2e7e:	b340      	cbz	r0, 2ed2 <mutex_lock_platform+0x56>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2e80:	6843      	ldr	r3, [r0, #4]
    2e82:	2b04      	cmp	r3, #4
    2e84:	d00b      	beq.n	2e9e <mutex_lock_platform+0x22>
    2e86:	2b08      	cmp	r3, #8
    2e88:	d016      	beq.n	2eb8 <mutex_lock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2e8a:	b303      	cbz	r3, 2ece <mutex_lock_platform+0x52>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2e8c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2e8e:	f04f 32ff 	mov.w	r2, #4294967295
    2e92:	f04f 33ff 	mov.w	r3, #4294967295
    2e96:	f005 ff0f 	bl	8cb8 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    2e9a:	b158      	cbz	r0, 2eb4 <mutex_lock_platform+0x38>
    2e9c:	e015      	b.n	2eca <mutex_lock_platform+0x4e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2e9e:	2201      	movs	r2, #1
    2ea0:	6803      	ldr	r3, [r0, #0]
    2ea2:	e8d3 1fef 	ldaex	r1, [r3]
    2ea6:	2900      	cmp	r1, #0
    2ea8:	d103      	bne.n	2eb2 <mutex_lock_platform+0x36>
    2eaa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2eae:	2800      	cmp	r0, #0
    2eb0:	d1f7      	bne.n	2ea2 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2eb2:	d10a      	bne.n	2eca <mutex_lock_platform+0x4e>
    2eb4:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2eb6:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2eb8:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2eba:	4a07      	ldr	r2, [pc, #28]	; (2ed8 <mutex_lock_platform+0x5c>)
    2ebc:	781b      	ldrb	r3, [r3, #0]
    2ebe:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d0f4      	beq.n	2eb4 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2eca:	4804      	ldr	r0, [pc, #16]	; (2edc <mutex_lock_platform+0x60>)
    2ecc:	e7f3      	b.n	2eb6 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2ece:	4804      	ldr	r0, [pc, #16]	; (2ee0 <mutex_lock_platform+0x64>)
    2ed0:	e7f1      	b.n	2eb6 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2ed2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2ed6:	e7ee      	b.n	2eb6 <mutex_lock_platform+0x3a>
    2ed8:	50030000 	.word	0x50030000
    2edc:	ffff8fe9 	.word	0xffff8fe9
    2ee0:	ffff8fea 	.word	0xffff8fea

00002ee4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ee4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ee6:	b308      	cbz	r0, 2f2c <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2ee8:	6843      	ldr	r3, [r0, #4]
    2eea:	2b04      	cmp	r3, #4
    2eec:	d007      	beq.n	2efe <mutex_unlock_platform+0x1a>
    2eee:	2b08      	cmp	r3, #8
    2ef0:	d013      	beq.n	2f1a <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ef2:	b1f3      	cbz	r3, 2f32 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2ef4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2ef6:	f005 ff57 	bl	8da8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2efa:	2000      	movs	r0, #0
    2efc:	e00c      	b.n	2f18 <mutex_unlock_platform+0x34>
    2efe:	2200      	movs	r2, #0
    2f00:	6803      	ldr	r3, [r0, #0]
    2f02:	e8d3 1fef 	ldaex	r1, [r3]
    2f06:	2901      	cmp	r1, #1
    2f08:	d103      	bne.n	2f12 <mutex_unlock_platform+0x2e>
    2f0a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2f0e:	2800      	cmp	r0, #0
    2f10:	d1f7      	bne.n	2f02 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f12:	4809      	ldr	r0, [pc, #36]	; (2f38 <mutex_unlock_platform+0x54>)
    2f14:	bf08      	it	eq
    2f16:	4610      	moveq	r0, r2
    }
}
    2f18:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    2f1a:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    2f1c:	2000      	movs	r0, #0
    2f1e:	781b      	ldrb	r3, [r3, #0]
    2f20:	4a06      	ldr	r2, [pc, #24]	; (2f3c <mutex_unlock_platform+0x58>)
    2f22:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f26:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2f2a:	e7f5      	b.n	2f18 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2f2c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2f30:	e7f2      	b.n	2f18 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f32:	4803      	ldr	r0, [pc, #12]	; (2f40 <mutex_unlock_platform+0x5c>)
    2f34:	e7f0      	b.n	2f18 <mutex_unlock_platform+0x34>
    2f36:	bf00      	nop
    2f38:	ffff8fe9 	.word	0xffff8fe9
    2f3c:	50030000 	.word	0x50030000
    2f40:	ffff8fea 	.word	0xffff8fea

00002f44 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f44:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2f46:	4604      	mov	r4, r0
    2f48:	b918      	cbnz	r0, 2f52 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2f4a:	4b16      	ldr	r3, [pc, #88]	; (2fa4 <mutex_init_platform+0x60>)
    2f4c:	4816      	ldr	r0, [pc, #88]	; (2fa8 <mutex_init_platform+0x64>)
    2f4e:	685b      	ldr	r3, [r3, #4]
    2f50:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2f52:	6863      	ldr	r3, [r4, #4]
    2f54:	2b04      	cmp	r3, #4
    2f56:	d023      	beq.n	2fa0 <mutex_init_platform+0x5c>
    2f58:	2b08      	cmp	r3, #8
    2f5a:	d021      	beq.n	2fa0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2f5c:	b9cb      	cbnz	r3, 2f92 <mutex_init_platform+0x4e>
    2f5e:	6823      	ldr	r3, [r4, #0]
    2f60:	b9bb      	cbnz	r3, 2f92 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2f62:	f04f 32ff 	mov.w	r2, #4294967295
    2f66:	f04f 33ff 	mov.w	r3, #4294967295
    2f6a:	4621      	mov	r1, r4
    2f6c:	480f      	ldr	r0, [pc, #60]	; (2fac <mutex_init_platform+0x68>)
    2f6e:	f005 fdbd 	bl	8aec <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2f72:	b908      	cbnz	r0, 2f78 <mutex_init_platform+0x34>
    2f74:	6823      	ldr	r3, [r4, #0]
    2f76:	b91b      	cbnz	r3, 2f80 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2f78:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <mutex_init_platform+0x60>)
    2f7a:	480d      	ldr	r0, [pc, #52]	; (2fb0 <mutex_init_platform+0x6c>)
    2f7c:	685b      	ldr	r3, [r3, #4]
    2f7e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2f80:	2214      	movs	r2, #20
    2f82:	2100      	movs	r1, #0
    2f84:	6820      	ldr	r0, [r4, #0]
    2f86:	f008 facb 	bl	b520 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2f8a:	6863      	ldr	r3, [r4, #4]
    2f8c:	f043 0302 	orr.w	r3, r3, #2
    2f90:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2f92:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2f94:	f00a fd5c 	bl	da50 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2f98:	6863      	ldr	r3, [r4, #4]
    2f9a:	f043 0301 	orr.w	r3, r3, #1
    2f9e:	6063      	str	r3, [r4, #4]
}
    2fa0:	bd10      	pop	{r4, pc}
    2fa2:	bf00      	nop
    2fa4:	2000a1e4 	.word	0x2000a1e4
    2fa8:	0000eab1 	.word	0x0000eab1
    2fac:	2001ada4 	.word	0x2001ada4
    2fb0:	0000ead7 	.word	0x0000ead7

00002fb4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2fb4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2fb6:	4906      	ldr	r1, [pc, #24]	; (2fd0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2fb8:	2340      	movs	r3, #64	; 0x40
    2fba:	2214      	movs	r2, #20
    2fbc:	4805      	ldr	r0, [pc, #20]	; (2fd4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2fbe:	f00a fce4 	bl	d98a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2fc6:	4904      	ldr	r1, [pc, #16]	; (2fd8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2fc8:	4804      	ldr	r0, [pc, #16]	; (2fdc <nrf_cc3xx_platform_mutex_init+0x28>)
    2fca:	f006 be4f 	b.w	9c6c <nrf_cc3xx_platform_set_mutexes>
    2fce:	bf00      	nop
    2fd0:	2001adc0 	.word	0x2001adc0
    2fd4:	2001ada4 	.word	0x2001ada4
    2fd8:	0000e4c0 	.word	0x0000e4c0
    2fdc:	0000e4b0 	.word	0x0000e4b0

00002fe0 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    2fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    2fe2:	4e23      	ldr	r6, [pc, #140]	; (3070 <boot_uart_fifo_callback+0x90>)
    2fe4:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    2fe6:	6883      	ldr	r3, [r0, #8]
    2fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fea:	b103      	cbz	r3, 2fee <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    2fec:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    2fee:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    2ff0:	6883      	ldr	r3, [r0, #8]
    2ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d132      	bne.n	305e <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    2ff8:	4c1e      	ldr	r4, [pc, #120]	; (3074 <boot_uart_fifo_callback+0x94>)
	return list->head;
    2ffa:	4d1f      	ldr	r5, [pc, #124]	; (3078 <boot_uart_fifo_callback+0x98>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    2ffc:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    2ffe:	6883      	ldr	r3, [r0, #8]
    3000:	699b      	ldr	r3, [r3, #24]
    3002:	2b00      	cmp	r3, #0
    3004:	d02e      	beq.n	3064 <boot_uart_fifo_callback+0x84>
	return api->fifo_read(dev, rx_data, size);
    3006:	2201      	movs	r2, #1
    3008:	f10d 0107 	add.w	r1, sp, #7
    300c:	4798      	blx	r3
		if (rx != 1) {
    300e:	2801      	cmp	r0, #1
    3010:	d128      	bne.n	3064 <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    3012:	6823      	ldr	r3, [r4, #0]
    3014:	b943      	cbnz	r3, 3028 <boot_uart_fifo_callback+0x48>
    3016:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3018:	b323      	cbz	r3, 3064 <boot_uart_fifo_callback+0x84>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    301a:	6869      	ldr	r1, [r5, #4]
	return node->next;
    301c:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    301e:	428b      	cmp	r3, r1
	list->head = node;
    3020:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3022:	d100      	bne.n	3026 <boot_uart_fifo_callback+0x46>
	list->tail = node;
    3024:	606a      	str	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    3026:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    3028:	4a14      	ldr	r2, [pc, #80]	; (307c <boot_uart_fifo_callback+0x9c>)
			cmd->line[cur++] = byte;
    302a:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    302e:	8811      	ldrh	r1, [r2, #0]
    3030:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3034:	d204      	bcs.n	3040 <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    3036:	6823      	ldr	r3, [r4, #0]
    3038:	1c4f      	adds	r7, r1, #1
    303a:	440b      	add	r3, r1
    303c:	8017      	strh	r7, [r2, #0]
    303e:	7218      	strb	r0, [r3, #8]
		}

		if (byte ==  '\n') {
    3040:	280a      	cmp	r0, #10
    3042:	d1db      	bne.n	2ffc <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    3044:	2000      	movs	r0, #0
			cmd->len = cur;
    3046:	6823      	ldr	r3, [r4, #0]
    3048:	8811      	ldrh	r1, [r2, #0]
    304a:	6018      	str	r0, [r3, #0]
    304c:	6059      	str	r1, [r3, #4]
	return list->tail;
    304e:	490c      	ldr	r1, [pc, #48]	; (3080 <boot_uart_fifo_callback+0xa0>)
    3050:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    3052:	b94d      	cbnz	r5, 3068 <boot_uart_fifo_callback+0x88>
	list->head = node;
    3054:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    3058:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    305a:	6020      	str	r0, [r4, #0]
    305c:	e7cd      	b.n	2ffa <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    305e:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    3060:	2800      	cmp	r0, #0
    3062:	d1c9      	bne.n	2ff8 <boot_uart_fifo_callback+0x18>
		}
	}
}
    3064:	b003      	add	sp, #12
    3066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    3068:	602b      	str	r3, [r5, #0]
	list->tail = node;
    306a:	604b      	str	r3, [r1, #4]
}
    306c:	e7f4      	b.n	3058 <boot_uart_fifo_callback+0x78>
    306e:	bf00      	nop
    3070:	2001b6e8 	.word	0x2001b6e8
    3074:	2001b2c8 	.word	0x2001b2c8
    3078:	2001b2c0 	.word	0x2001b2c0
    307c:	2001c568 	.word	0x2001c568
    3080:	2001b6e0 	.word	0x2001b6e0

00003084 <console_out>:
	uart_poll_out(uart_dev, c);
    3084:	4b04      	ldr	r3, [pc, #16]	; (3098 <console_out+0x14>)
{
    3086:	b510      	push	{r4, lr}
    3088:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    308a:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    308c:	6883      	ldr	r3, [r0, #8]
    308e:	b2e1      	uxtb	r1, r4
    3090:	685b      	ldr	r3, [r3, #4]
    3092:	4798      	blx	r3
}
    3094:	4620      	mov	r0, r4
    3096:	bd10      	pop	{r4, pc}
    3098:	2001b6e8 	.word	0x2001b6e8

0000309c <console_read>:
{
    309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    309e:	4606      	mov	r6, r0
    30a0:	460f      	mov	r7, r1
    30a2:	4615      	mov	r5, r2
	__asm__ volatile(
    30a4:	f04f 0320 	mov.w	r3, #32
    30a8:	f3ef 8c11 	mrs	ip, BASEPRI
    30ac:	f383 8812 	msr	BASEPRI_MAX, r3
    30b0:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    30b4:	4918      	ldr	r1, [pc, #96]	; (3118 <console_read+0x7c>)
    30b6:	680b      	ldr	r3, [r1, #0]
    30b8:	b143      	cbz	r3, 30cc <console_read+0x30>
	return list->tail;
    30ba:	4a18      	ldr	r2, [pc, #96]	; (311c <console_read+0x80>)
    30bc:	6850      	ldr	r0, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    30be:	4298      	cmp	r0, r3
    30c0:	d004      	beq.n	30cc <console_read+0x30>
	parent->next = child;
    30c2:	2400      	movs	r4, #0
    30c4:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    30c6:	b990      	cbnz	r0, 30ee <console_read+0x52>
	list->head = node;
    30c8:	e9c2 3300 	strd	r3, r3, [r2]
	return list->head;
    30cc:	4b14      	ldr	r3, [pc, #80]	; (3120 <console_read+0x84>)
    30ce:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET(slist, snode)
    30d0:	b128      	cbz	r0, 30de <console_read+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    30d2:	685c      	ldr	r4, [r3, #4]
	return node->next;
    30d4:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    30d6:	42a0      	cmp	r0, r4
	list->head = node;
    30d8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    30da:	bf08      	it	eq
    30dc:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
    30de:	f38c 8811 	msr	BASEPRI, ip
    30e2:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    30e6:	6008      	str	r0, [r1, #0]
	if (node == NULL) {
    30e8:	b920      	cbnz	r0, 30f4 <console_read+0x58>
		*newline = 0;
    30ea:	6028      	str	r0, [r5, #0]
}
    30ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    30ee:	6003      	str	r3, [r0, #0]
	list->tail = node;
    30f0:	6053      	str	r3, [r2, #4]
}
    30f2:	e7eb      	b.n	30cc <console_read+0x30>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    30f4:	6844      	ldr	r4, [r0, #4]
	*line = cmd->line;
    30f6:	f100 0108 	add.w	r1, r0, #8
	if (len > str_size - 1) {
    30fa:	42a7      	cmp	r7, r4
		len = str_size - 1;
    30fc:	bfd8      	it	le
    30fe:	f107 34ff 	addle.w	r4, r7, #4294967295
	memcpy(str, line, len);
    3102:	4622      	mov	r2, r4
    3104:	4630      	mov	r0, r6
    3106:	f008 fa00 	bl	b50a <memcpy>
	str[len] = '\0';
    310a:	2300      	movs	r3, #0
    310c:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    310e:	2301      	movs	r3, #1
    3110:	602b      	str	r3, [r5, #0]
	return len + 1;
    3112:	18e0      	adds	r0, r4, r3
    3114:	e7ea      	b.n	30ec <console_read+0x50>
    3116:	bf00      	nop
    3118:	2001b2cc 	.word	0x2001b2cc
    311c:	2001b2c0 	.word	0x2001b2c0
    3120:	2001b6e0 	.word	0x2001b6e0

00003124 <boot_console_init>:
{
    3124:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    3126:	2400      	movs	r4, #0
    3128:	4b1f      	ldr	r3, [pc, #124]	; (31a8 <boot_console_init+0x84>)
	list->head = node;
    312a:	4a20      	ldr	r2, [pc, #128]	; (31ac <boot_console_init+0x88>)
	list->tail = NULL;
    312c:	e9c3 4400 	strd	r4, r4, [r3]
	list->head = node;
    3130:	4b1f      	ldr	r3, [pc, #124]	; (31b0 <boot_console_init+0x8c>)
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
    3132:	4d20      	ldr	r5, [pc, #128]	; (31b4 <boot_console_init+0x90>)
    3134:	4820      	ldr	r0, [pc, #128]	; (31b8 <boot_console_init+0x94>)
	parent->next = child;
    3136:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    313a:	6013      	str	r3, [r2, #0]
	parent->next = child;
    313c:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    3140:	6019      	str	r1, [r3, #0]
	list->tail = node;
    3142:	6051      	str	r1, [r2, #4]
    3144:	6028      	str	r0, [r5, #0]
    3146:	f00a fbeb 	bl	d920 <z_device_is_ready>
#endif

	if (!device_is_ready(uart_dev)) {
    314a:	b920      	cbnz	r0, 3156 <boot_console_init+0x32>
		return (-1);
    314c:	f04f 34ff 	mov.w	r4, #4294967295
}
    3150:	4620      	mov	r0, r4
    3152:	b003      	add	sp, #12
    3154:	bd30      	pop	{r4, r5, pc}
	}

#if CONFIG_BOOT_SERIAL_CDC_ACM
	int rc = usb_enable(NULL);
    3156:	4620      	mov	r0, r4
    3158:	f7ff f8de 	bl	2318 <usb_enable>
	if (rc) {
    315c:	4604      	mov	r4, r0
    315e:	2800      	cmp	r0, #0
    3160:	d1f4      	bne.n	314c <boot_console_init+0x28>
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    3162:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3164:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3166:	b123      	cbz	r3, 3172 <boot_console_init+0x4e>
    3168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    316a:	b113      	cbz	r3, 3172 <boot_console_init+0x4e>
		api->irq_callback_set(dev, cb, user_data);
    316c:	4622      	mov	r2, r4
    316e:	4913      	ldr	r1, [pc, #76]	; (31bc <boot_console_init+0x98>)
    3170:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    3172:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    3174:	6883      	ldr	r3, [r0, #8]
    3176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3178:	b10b      	cbz	r3, 317e <boot_console_init+0x5a>
	return api->irq_rx_ready(dev);
    317a:	4798      	blx	r3
    317c:	b148      	cbz	r0, 3192 <boot_console_init+0x6e>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    317e:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read == NULL) {
    3180:	6883      	ldr	r3, [r0, #8]
    3182:	699b      	ldr	r3, [r3, #24]
    3184:	b903      	cbnz	r3, 3188 <boot_console_init+0x64>
    3186:	e7fe      	b.n	3186 <boot_console_init+0x62>
	return api->fifo_read(dev, rx_data, size);
    3188:	2201      	movs	r2, #1
    318a:	f10d 0107 	add.w	r1, sp, #7
    318e:	4798      	blx	r3
    3190:	e7f4      	b.n	317c <boot_console_init+0x58>
			;
		}
	}

	cur = 0;
    3192:	2200      	movs	r2, #0
    3194:	4b0a      	ldr	r3, [pc, #40]	; (31c0 <boot_console_init+0x9c>)

	uart_irq_rx_enable(uart_dev);
    3196:	6828      	ldr	r0, [r5, #0]
	cur = 0;
    3198:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    319a:	6883      	ldr	r3, [r0, #8]
    319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    319e:	2b00      	cmp	r3, #0
    31a0:	d0d6      	beq.n	3150 <boot_console_init+0x2c>
		api->irq_rx_enable(dev);
    31a2:	4798      	blx	r3
	return boot_uart_fifo_init();
    31a4:	e7d4      	b.n	3150 <boot_console_init+0x2c>
    31a6:	bf00      	nop
    31a8:	2001b6e0 	.word	0x2001b6e0
    31ac:	2001b2c0 	.word	0x2001b2c0
    31b0:	2001b2d0 	.word	0x2001b2d0
    31b4:	2001b6e8 	.word	0x2001b6e8
    31b8:	0000e038 	.word	0x0000e038
    31bc:	00002fe1 	.word	0x00002fe1
    31c0:	2001c568 	.word	0x2001c568

000031c4 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    31c4:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    31c8:	2000      	movs	r0, #0
{
    31ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bs_hdr->nh_op++;
    31ce:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 32bc <boot_serial_output+0xf8>
{
    31d2:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    bs_hdr->nh_op++;
    31d6:	f8d9 1000 	ldr.w	r1, [r9]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    31da:	f8ad 300c 	strh.w	r3, [sp, #12]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    31de:	4b38      	ldr	r3, [pc, #224]	; (32c0 <boot_serial_output+0xfc>)
    31e0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 32c4 <boot_serial_output+0x100>
    31e4:	681e      	ldr	r6, [r3, #0]
    bs_hdr->nh_op++;
    31e6:	780b      	ldrb	r3, [r1, #0]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    31e8:	eba6 0608 	sub.w	r6, r6, r8
    bs_hdr->nh_op++;
    31ec:	3301      	adds	r3, #1
    31ee:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    31f0:	ba73      	rev16	r3, r6
    31f2:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    31f4:	888b      	ldrh	r3, [r1, #4]

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    31f6:	2208      	movs	r2, #8
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    31f8:	ba5b      	rev16	r3, r3
    31fa:	808b      	strh	r3, [r1, #4]
    bs_hdr->nh_flags = 0;
    31fc:	7048      	strb	r0, [r1, #1]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    31fe:	f006 ffce 	bl	a19e <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    3202:	4632      	mov	r2, r6
    3204:	4641      	mov	r1, r8
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    3206:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16_itu_t(crc, data, len);
    320a:	f006 ffc8 	bl	a19e <crc16_itu_t>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    320e:	2702      	movs	r7, #2
    boot_uf->write(pkt_start, sizeof(pkt_start));
    3210:	4d2d      	ldr	r5, [pc, #180]	; (32c8 <boot_serial_output+0x104>)
    crc = htons(crc);
    3212:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    3214:	682b      	ldr	r3, [r5, #0]
    3216:	b2b4      	uxth	r4, r6
    crc = htons(crc);
    3218:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    321c:	2102      	movs	r1, #2
    321e:	a803      	add	r0, sp, #12
    3220:	685b      	ldr	r3, [r3, #4]
    3222:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    3224:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    3228:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    322a:	f10d 0112 	add.w	r1, sp, #18
    322e:	2202      	movs	r2, #2
    3230:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    3232:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    3236:	f008 f968 	bl	b50a <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    323a:	f8d9 1000 	ldr.w	r1, [r9]
    323e:	2208      	movs	r2, #8
    3240:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    3244:	f8ad 7012 	strh.w	r7, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    3248:	f008 f95f 	bl	b50a <memcpy>
    totlen += sizeof(*bs_hdr);
    324c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    3250:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    3252:	3008      	adds	r0, #8
    3254:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    3256:	4632      	mov	r2, r6
    3258:	4641      	mov	r1, r8
    totlen += sizeof(*bs_hdr);
    325a:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    325e:	4418      	add	r0, r3
    3260:	f008 f953 	bl	b50a <memcpy>
    totlen += len;
    3264:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    3268:	ab06      	add	r3, sp, #24
    totlen += len;
    326a:	4420      	add	r0, r4
    326c:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    326e:	463a      	mov	r2, r7
    totlen += len;
    3270:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    3274:	a904      	add	r1, sp, #16
    3276:	4418      	add	r0, r3
    3278:	f008 f947 	bl	b50a <memcpy>
    totlen += sizeof(crc);
    327c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    3280:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    3282:	443b      	add	r3, r7
    3284:	b29b      	uxth	r3, r3
    3286:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    328a:	9300      	str	r3, [sp, #0]
    328c:	f240 1169 	movw	r1, #361	; 0x169
    3290:	ab06      	add	r3, sp, #24
    3292:	a849      	add	r0, sp, #292	; 0x124
    3294:	f7fe f852 	bl	133c <base64_encode>
    totlen = enc_len;
    3298:	9905      	ldr	r1, [sp, #20]
    base64_encode((unsigned char *)encoded_buf, sizeof(encoded_buf), &enc_len, (unsigned char *)buf, totlen);
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    329a:	682b      	ldr	r3, [r5, #0]
    totlen = enc_len;
    329c:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    32a0:	a849      	add	r0, sp, #292	; 0x124
    32a2:	685b      	ldr	r3, [r3, #4]
    32a4:	b289      	uxth	r1, r1
    32a6:	4798      	blx	r3
    boot_uf->write("\n", 1);
    32a8:	682b      	ldr	r3, [r5, #0]
    32aa:	2101      	movs	r1, #1
    32ac:	685b      	ldr	r3, [r3, #4]
    32ae:	4807      	ldr	r0, [pc, #28]	; (32cc <boot_serial_output+0x108>)
    32b0:	4798      	blx	r3
    BOOT_LOG_INF("TX");
}
    32b2:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    32b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    32ba:	bf00      	nop
    32bc:	2001b6f0 	.word	0x2001b6f0
    32c0:	2001b6f4 	.word	0x2001b6f4
    32c4:	2001de7d 	.word	0x2001de7d
    32c8:	2001b6ec 	.word	0x2001b6ec
    32cc:	0000eb04 	.word	0x0000eb04

000032d0 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    32d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    32d2:	680c      	ldr	r4, [r1, #0]
    32d4:	4f16      	ldr	r7, [pc, #88]	; (3330 <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    32d6:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    32d8:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    32da:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    32dc:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    32e0:	9000      	str	r0, [sp, #0]
    32e2:	4b14      	ldr	r3, [pc, #80]	; (3334 <boot_serial_in_dec.constprop.0+0x64>)
    32e4:	1938      	adds	r0, r7, r4
    32e6:	aa03      	add	r2, sp, #12
    32e8:	3101      	adds	r1, #1
    32ea:	f7fe f8a7 	bl	143c <base64_decode>
    if (err) {
    32ee:	4604      	mov	r4, r0
    32f0:	b9d8      	cbnz	r0, 332a <boot_serial_in_dec.constprop.0+0x5a>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    32f2:	682b      	ldr	r3, [r5, #0]
    32f4:	9a03      	ldr	r2, [sp, #12]
    32f6:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    32f8:	2b02      	cmp	r3, #2
    *out_off += rc;
    32fa:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    32fc:	d912      	bls.n	3324 <boot_serial_in_dec.constprop.0+0x54>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    32fe:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    3300:	3b02      	subs	r3, #2
    3302:	ba76      	rev16	r6, r6
    3304:	b2b6      	uxth	r6, r6
    3306:	429e      	cmp	r6, r3
    3308:	d10c      	bne.n	3324 <boot_serial_in_dec.constprop.0+0x54>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    330a:	4632      	mov	r2, r6
    330c:	1cb9      	adds	r1, r7, #2
    330e:	f006 ff46 	bl	a19e <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    3312:	b938      	cbnz	r0, 3324 <boot_serial_in_dec.constprop.0+0x54>
    3314:	2e02      	cmp	r6, #2
    3316:	d905      	bls.n	3324 <boot_serial_in_dec.constprop.0+0x54>
        return 0;
    }
    *out_off -= sizeof(crc);
    3318:	682b      	ldr	r3, [r5, #0]
    331a:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    331c:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    331e:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    3320:	70bc      	strb	r4, [r7, #2]

    return 1;
    3322:	2401      	movs	r4, #1
}
    3324:	4620      	mov	r0, r4
    3326:	b005      	add	sp, #20
    3328:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    332a:	f04f 34ff 	mov.w	r4, #4294967295
    332e:	e7f9      	b.n	3324 <boot_serial_in_dec.constprop.0+0x54>
    3330:	2001df7d 	.word	0x2001df7d
    3334:	2001e180 	.word	0x2001e180

00003338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    3338:	b507      	push	{r0, r1, r2, lr}
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    333a:	e9cd 0100 	strd	r0, r1, [sp]
    333e:	4669      	mov	r1, sp
    3340:	4802      	ldr	r0, [pc, #8]	; (334c <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    3342:	f007 ffe3 	bl	b30c <zcbor_tstr_encode>
}
    3346:	b003      	add	sp, #12
    3348:	f85d fb04 	ldr.w	pc, [sp], #4
    334c:	2001b6f4 	.word	0x2001b6f4

00003350 <bs_rc_rsp>:
{
    3350:	b538      	push	{r3, r4, r5, lr}
    3352:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    3354:	4c0a      	ldr	r4, [pc, #40]	; (3380 <bs_rc_rsp+0x30>)
    3356:	210a      	movs	r1, #10
    3358:	4620      	mov	r0, r4
    335a:	f007 ffe9 	bl	b330 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    335e:	2102      	movs	r1, #2
    3360:	4808      	ldr	r0, [pc, #32]	; (3384 <bs_rc_rsp+0x34>)
    3362:	f7ff ffe9 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_uint32_put(cbor_state, rc_code);
    3366:	4629      	mov	r1, r5
    3368:	4620      	mov	r0, r4
    336a:	f007 ffcb 	bl	b304 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    336e:	4620      	mov	r0, r4
    3370:	210a      	movs	r1, #10
    3372:	f007 fffb 	bl	b36c <zcbor_map_end_encode>
}
    3376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    337a:	f7ff bf23 	b.w	31c4 <boot_serial_output>
    337e:	bf00      	nop
    3380:	2001b6f4 	.word	0x2001b6f4
    3384:	0000e8a2 	.word	0x0000e8a2

00003388 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    3388:	2300      	movs	r3, #0
{
    338a:	b507      	push	{r0, r1, r2, lr}
        (size_t)bs_obuf + sizeof(bs_obuf), 0);
    338c:	4a05      	ldr	r2, [pc, #20]	; (33a4 <reset_cbor_state+0x1c>)
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    338e:	9300      	str	r3, [sp, #0]
    3390:	2102      	movs	r1, #2
    3392:	f502 7380 	add.w	r3, r2, #256	; 0x100
    3396:	4804      	ldr	r0, [pc, #16]	; (33a8 <reset_cbor_state+0x20>)
    3398:	f007 fff7 	bl	b38a <zcbor_new_encode_state>
}
    339c:	b003      	add	sp, #12
    339e:	f85d fb04 	ldr.w	pc, [sp], #4
    33a2:	bf00      	nop
    33a4:	2001de7d 	.word	0x2001de7d
    33a8:	2001b6f4 	.word	0x2001b6f4

000033ac <boot_serial_input>:
{
    33ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    33b0:	2907      	cmp	r1, #7
{
    33b2:	4604      	mov	r4, r0
    33b4:	b0a1      	sub	sp, #132	; 0x84
    if (len < sizeof(*hdr) ||
    33b6:	f240 80b6 	bls.w	3526 <FIH_LABEL_FIH_CALL_END_956+0x16>
    33ba:	7803      	ldrb	r3, [r0, #0]
    33bc:	f013 07fd 	ands.w	r7, r3, #253	; 0xfd
    33c0:	f040 80b1 	bne.w	3526 <FIH_LABEL_FIH_CALL_END_956+0x16>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    33c4:	8843      	ldrh	r3, [r0, #2]
    33c6:	f1a1 0508 	sub.w	r5, r1, #8
    33ca:	ba5b      	rev16	r3, r3
    33cc:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    33ce:	42ab      	cmp	r3, r5
    33d0:	f0c0 80a9 	bcc.w	3526 <FIH_LABEL_FIH_CALL_END_956+0x16>
    bs_hdr = hdr;
    33d4:	4b8b      	ldr	r3, [pc, #556]	; (3604 <FIH_LABEL_FIH_CALL_END_956+0xf4>)
    buf += sizeof(*hdr);
    33d6:	f100 0608 	add.w	r6, r0, #8
    bs_hdr = hdr;
    33da:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    33dc:	8883      	ldrh	r3, [r0, #4]
    33de:	ba5b      	rev16	r3, r3
    33e0:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    33e2:	f7ff ffd1 	bl	3388 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    33e6:	88a0      	ldrh	r0, [r4, #4]
    33e8:	2801      	cmp	r0, #1
    33ea:	f040 819e 	bne.w	372a <FIH_LABEL_FIH_CALL_END_956+0x21a>
        switch (hdr->nh_id) {
    33ee:	79e4      	ldrb	r4, [r4, #7]
    33f0:	b144      	cbz	r4, 3404 <boot_serial_input+0x58>
    33f2:	2c01      	cmp	r4, #1
    33f4:	f000 809a 	beq.w	352c <FIH_LABEL_FIH_CALL_END_956+0x1c>
            bs_rc_rsp(MGMT_ERR_ENOTSUP);
    33f8:	2008      	movs	r0, #8
}
    33fa:	b021      	add	sp, #132	; 0x84
    33fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            bs_rc_rsp(0);
    3400:	f7ff bfa6 	b.w	3350 <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    3404:	4601      	mov	r1, r0
    3406:	4880      	ldr	r0, [pc, #512]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3408:	f007 ff92 	bl	b330 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    340c:	2106      	movs	r1, #6
    340e:	487f      	ldr	r0, [pc, #508]	; (360c <FIH_LABEL_FIH_CALL_END_956+0xfc>)
    3410:	f7ff ff92 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    3414:	2105      	movs	r1, #5
    3416:	487c      	ldr	r0, [pc, #496]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3418:	f007 ff7b 	bl	b312 <zcbor_list_start_encode>
            if (hdr.ih_magic == IMAGE_MAGIC)
    341c:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 3610 <FIH_LABEL_FIH_CALL_END_956+0x100>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    3420:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 3614 <FIH_LABEL_FIH_CALL_END_956+0x104>
        for (slot = 0; slot < 2; slot++) {
    3424:	2600      	movs	r6, #0
            zcbor_map_start_encode(cbor_state, 20);
    3426:	4f78      	ldr	r7, [pc, #480]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3428:	e000      	b.n	342c <boot_serial_input+0x80>
    342a:	2601      	movs	r6, #1
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    342c:	4631      	mov	r1, r6
    342e:	4620      	mov	r0, r4
    3430:	f006 fcf4 	bl	9e1c <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    3434:	a907      	add	r1, sp, #28
    3436:	b2c0      	uxtb	r0, r0
    3438:	f7ff fc9e 	bl	2d78 <flash_area_open>
    343c:	4605      	mov	r5, r0
    343e:	2800      	cmp	r0, #0
    3440:	d14c      	bne.n	34dc <boot_serial_input+0x130>
            int rc = BOOT_HOOK_CALL(boot_read_image_header_hook,
    3442:	4631      	mov	r1, r6
    3444:	4620      	mov	r0, r4
    3446:	aa08      	add	r2, sp, #32
    3448:	f002 fdc6 	bl	5fd8 <boot_read_image_header_hook>
            if (rc == BOOT_HOOK_REGULAR)
    344c:	2801      	cmp	r0, #1
    344e:	d106      	bne.n	345e <boot_serial_input+0xb2>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    3450:	2320      	movs	r3, #32
    3452:	4629      	mov	r1, r5
    3454:	9807      	ldr	r0, [sp, #28]
    3456:	eb0d 0203 	add.w	r2, sp, r3
    345a:	f007 fcdf 	bl	ae1c <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    345e:	9b08      	ldr	r3, [sp, #32]
    3460:	4543      	cmp	r3, r8
    3462:	d040      	beq.n	34e6 <FIH_LABEL_FIH_CALL_START_882>
            fih_int fih_rc = FIH_FAILURE;
    3464:	4b6c      	ldr	r3, [pc, #432]	; (3618 <FIH_LABEL_FIH_CALL_END_956+0x108>)
    3466:	681d      	ldr	r5, [r3, #0]
            flash_area_close(fap);
    3468:	9807      	ldr	r0, [sp, #28]
    346a:	f007 fcd6 	bl	ae1a <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    346e:	f8d9 3000 	ldr.w	r3, [r9]
    3472:	42ab      	cmp	r3, r5
    3474:	d132      	bne.n	34dc <boot_serial_input+0x130>
            zcbor_map_start_encode(cbor_state, 20);
    3476:	2114      	movs	r1, #20
    3478:	4638      	mov	r0, r7
    347a:	f007 ff59 	bl	b330 <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "image");
    347e:	2105      	movs	r1, #5
    3480:	4866      	ldr	r0, [pc, #408]	; (361c <FIH_LABEL_FIH_CALL_END_956+0x10c>)
    3482:	f7ff ff59 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, image_index);
    3486:	4621      	mov	r1, r4
    3488:	4638      	mov	r0, r7
    348a:	f007 ff3b 	bl	b304 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    348e:	2104      	movs	r1, #4
    3490:	4863      	ldr	r0, [pc, #396]	; (3620 <FIH_LABEL_FIH_CALL_END_956+0x110>)
    3492:	f7ff ff51 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    3496:	4631      	mov	r1, r6
    3498:	4638      	mov	r0, r7
    349a:	f007 ff33 	bl	b304 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    349e:	2107      	movs	r1, #7
    34a0:	4860      	ldr	r0, [pc, #384]	; (3624 <FIH_LABEL_FIH_CALL_END_956+0x114>)
    34a2:	f7ff ff49 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   snprintf(dst, maxlen, "%hu.%hu.%hu.%u", (uint16_t)ver->iv_major,
    34a6:	2140      	movs	r1, #64	; 0x40
    34a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    34aa:	4a5f      	ldr	r2, [pc, #380]	; (3628 <FIH_LABEL_FIH_CALL_END_956+0x118>)
    34ac:	9302      	str	r3, [sp, #8]
    34ae:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    34b2:	eb0d 0001 	add.w	r0, sp, r1
    34b6:	9301      	str	r3, [sp, #4]
    34b8:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    34bc:	9300      	str	r3, [sp, #0]
    34be:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    34c2:	f000 fd9d 	bl	4000 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    34c6:	a810      	add	r0, sp, #64	; 0x40
    34c8:	f007 ffef 	bl	b4aa <strlen>
    34cc:	4601      	mov	r1, r0
    34ce:	a810      	add	r0, sp, #64	; 0x40
    34d0:	f7ff ff32 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    34d4:	2114      	movs	r1, #20
    34d6:	4638      	mov	r0, r7
    34d8:	f007 ff48 	bl	b36c <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    34dc:	2e00      	cmp	r6, #0
    34de:	d0a4      	beq.n	342a <boot_serial_input+0x7e>
    IMAGES_ITER(image_index) {
    34e0:	b9bc      	cbnz	r4, 3512 <FIH_LABEL_FIH_CALL_END_956+0x2>
    34e2:	4634      	mov	r4, r6
    34e4:	e79e      	b.n	3424 <boot_serial_input+0x78>

000034e6 <FIH_LABEL_FIH_CALL_START_882>:
                BOOT_HOOK_CALL_FIH(boot_image_check_hook,
    34e6:	4631      	mov	r1, r6
    34e8:	4620      	mov	r0, r4
    34ea:	f002 fd8b 	bl	6004 <boot_image_check_hook>
    34ee:	4605      	mov	r5, r0

000034f0 <FIH_LABEL_FIH_CALL_END_904>:
                if (fih_eq(fih_rc, BOOT_HOOK_REGULAR))
    34f0:	2801      	cmp	r0, #1
    34f2:	d1b9      	bne.n	3468 <boot_serial_input+0xbc>

000034f4 <FIH_LABEL_FIH_CALL_START_926>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    34f4:	2340      	movs	r3, #64	; 0x40
    34f6:	2100      	movs	r1, #0
    34f8:	9301      	str	r3, [sp, #4]
    34fa:	446b      	add	r3, sp
    34fc:	9300      	str	r3, [sp, #0]
    34fe:	4608      	mov	r0, r1
    3500:	e9cd 1103 	strd	r1, r1, [sp, #12]
    3504:	9b07      	ldr	r3, [sp, #28]
    3506:	9102      	str	r1, [sp, #8]
    3508:	aa08      	add	r2, sp, #32
    350a:	f7fd f887 	bl	61c <bootutil_img_validate>
    350e:	4605      	mov	r5, r0

00003510 <FIH_LABEL_FIH_CALL_END_956>:
    3510:	e7aa      	b.n	3468 <boot_serial_input+0xbc>
    zcbor_list_end_encode(cbor_state, 5);
    3512:	2105      	movs	r1, #5
    3514:	483c      	ldr	r0, [pc, #240]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3516:	f007 ff1a 	bl	b34e <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    351a:	4621      	mov	r1, r4
    351c:	483a      	ldr	r0, [pc, #232]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    351e:	f007 ff25 	bl	b36c <zcbor_map_end_encode>
    boot_serial_output();
    3522:	f7ff fe4f 	bl	31c4 <boot_serial_output>
}
    3526:	b021      	add	sp, #132	; 0x84
    3528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    352c:	4630      	mov	r0, r6
    352e:	4629      	mov	r1, r5
    3530:	ab07      	add	r3, sp, #28
    3532:	aa10      	add	r2, sp, #64	; 0x40
    const struct flash_area *fap = NULL;
    3534:	9706      	str	r7, [sp, #24]
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    3536:	f000 fa15 	bl	3964 <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    353a:	4606      	mov	r6, r0
    353c:	b300      	cbz	r0, 3580 <FIH_LABEL_FIH_CALL_END_956+0x70>
        rc = MGMT_ERR_EINVAL;
    353e:	2403      	movs	r4, #3
    zcbor_map_start_encode(cbor_state, 10);
    3540:	210a      	movs	r1, #10
    3542:	4831      	ldr	r0, [pc, #196]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3544:	f007 fef4 	bl	b330 <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    3548:	2102      	movs	r1, #2
    354a:	4838      	ldr	r0, [pc, #224]	; (362c <FIH_LABEL_FIH_CALL_END_956+0x11c>)
    354c:	f7ff fef4 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_uint32_put(cbor_state, rc);
    3550:	4621      	mov	r1, r4
    3552:	482d      	ldr	r0, [pc, #180]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3554:	f007 fed6 	bl	b304 <zcbor_uint32_put>
    if (rc == 0) {
    3558:	b944      	cbnz	r4, 356c <FIH_LABEL_FIH_CALL_END_956+0x5c>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    355a:	2103      	movs	r1, #3
    355c:	4834      	ldr	r0, [pc, #208]	; (3630 <FIH_LABEL_FIH_CALL_END_956+0x120>)
    355e:	f7ff feeb 	bl	3338 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    3562:	4b34      	ldr	r3, [pc, #208]	; (3634 <FIH_LABEL_FIH_CALL_END_956+0x124>)
    3564:	4828      	ldr	r0, [pc, #160]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3566:	6819      	ldr	r1, [r3, #0]
    3568:	f007 fecc 	bl	b304 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    356c:	210a      	movs	r1, #10
    356e:	4826      	ldr	r0, [pc, #152]	; (3608 <FIH_LABEL_FIH_CALL_END_956+0xf8>)
    3570:	f007 fefc 	bl	b36c <zcbor_map_end_encode>
    boot_serial_output();
    3574:	f7ff fe26 	bl	31c4 <boot_serial_output>
    flash_area_close(fap);
    3578:	9806      	ldr	r0, [sp, #24]
    357a:	f007 fc4e 	bl	ae1a <flash_area_close>
}
    357e:	e7d2      	b.n	3526 <FIH_LABEL_FIH_CALL_END_956+0x16>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    3580:	9b07      	ldr	r3, [sp, #28]
    3582:	429d      	cmp	r5, r3
    3584:	d1db      	bne.n	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    3586:	f04f 3aff 	mov.w	sl, #4294967295
    for (int i = 0; i < upload._Upload_members_count; i++) {
    358a:	4632      	mov	r2, r6
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    358c:	46d0      	mov	r8, sl
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    358e:	4635      	mov	r5, r6
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    3590:	46b1      	mov	r9, r6
    3592:	981f      	ldr	r0, [sp, #124]	; 0x7c
    3594:	ab10      	add	r3, sp, #64	; 0x40
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3596:	4282      	cmp	r2, r0
    3598:	d120      	bne.n	35dc <FIH_LABEL_FIH_CALL_END_956+0xcc>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    359a:	f1b8 3fff 	cmp.w	r8, #4294967295
    359e:	d0ce      	beq.n	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    35a0:	f1b9 0f00 	cmp.w	r9, #0
    35a4:	d0cb      	beq.n	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    rc = flash_area_open(flash_area_id_from_direct_image(img_num), &fap);
    35a6:	4630      	mov	r0, r6
    35a8:	f7fc ffd0 	bl	54c <flash_area_id_from_direct_image>
    35ac:	a906      	add	r1, sp, #24
    35ae:	b2c0      	uxtb	r0, r0
    35b0:	f7ff fbe2 	bl	2d78 <flash_area_open>
    if (rc) {
    35b4:	4604      	mov	r4, r0
    35b6:	2800      	cmp	r0, #0
    35b8:	d1c1      	bne.n	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    if (img_chunk_off == 0) {
    35ba:	4f1e      	ldr	r7, [pc, #120]	; (3634 <FIH_LABEL_FIH_CALL_END_956+0x124>)
    35bc:	f1b8 0f00 	cmp.w	r8, #0
    35c0:	f040 808a 	bne.w	36d8 <FIH_LABEL_FIH_CALL_END_956+0x1c8>
        const size_t area_size = flash_area_get_size(fap);
    35c4:	9806      	ldr	r0, [sp, #24]
        curr_off = 0;
    35c6:	603c      	str	r4, [r7, #0]
	return (uint32_t)fa->fa_size;
    35c8:	f8d0 8008 	ldr.w	r8, [r0, #8]
        if (flash_area_sector_from_off(boot_status_off(fap), &status_sector)) {
    35cc:	f006 fcdb 	bl	9f86 <boot_status_off>
    35d0:	4919      	ldr	r1, [pc, #100]	; (3638 <FIH_LABEL_FIH_CALL_END_956+0x128>)
    35d2:	f7fc ffc5 	bl	560 <flash_area_sector_from_off>
    35d6:	b388      	cbz	r0, 363c <FIH_LABEL_FIH_CALL_END_956+0x12c>
            rc = MGMT_ERR_EUNKNOWN;
    35d8:	2401      	movs	r4, #1
    35da:	e7b1      	b.n	3540 <FIH_LABEL_FIH_CALL_END_956+0x30>
        switch(member->_Member_choice) {
    35dc:	7a19      	ldrb	r1, [r3, #8]
    35de:	2903      	cmp	r1, #3
    35e0:	d804      	bhi.n	35ec <FIH_LABEL_FIH_CALL_END_956+0xdc>
    35e2:	e8df f001 	tbb	[pc, r1]
    35e6:	0602      	.short	0x0602
    35e8:	0c09      	.short	0x0c09
                img_num = member->_Member_image;
    35ea:	681e      	ldr	r6, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    35ec:	3201      	adds	r2, #1
    35ee:	330c      	adds	r3, #12
    35f0:	e7d1      	b.n	3596 <FIH_LABEL_FIH_CALL_END_956+0x86>
                img_chunk_len = member->_Member_data.len;
    35f2:	e9d3 9500 	ldrd	r9, r5, [r3]
                break;
    35f6:	e7f9      	b.n	35ec <FIH_LABEL_FIH_CALL_END_956+0xdc>
                img_size_tmp = member->_Member_len;
    35f8:	f8d3 a000 	ldr.w	sl, [r3]
                break;
    35fc:	e7f6      	b.n	35ec <FIH_LABEL_FIH_CALL_END_956+0xdc>
                img_chunk_off = member->_Member_off;
    35fe:	f8d3 8000 	ldr.w	r8, [r3]
                break;
    3602:	e7f3      	b.n	35ec <FIH_LABEL_FIH_CALL_END_956+0xdc>
    3604:	2001b6f0 	.word	0x2001b6f0
    3608:	2001b6f4 	.word	0x2001b6f4
    360c:	0000eb06 	.word	0x0000eb06
    3610:	96f3b83d 	.word	0x96f3b83d
    3614:	2000a718 	.word	0x2000a718
    3618:	2000a000 	.word	0x2000a000
    361c:	0000eb0d 	.word	0x0000eb0d
    3620:	0000eb13 	.word	0x0000eb13
    3624:	0000eb18 	.word	0x0000eb18
    3628:	0000eb20 	.word	0x0000eb20
    362c:	0000e8a2 	.word	0x0000e8a2
    3630:	0000eb2f 	.word	0x0000eb2f
    3634:	2001b724 	.word	0x2001b724
    3638:	2001b730 	.word	0x2001b730
        if (img_size_tmp > area_size) {
    363c:	45d0      	cmp	r8, sl
    363e:	f4ff af7e 	bcc.w	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
        not_yet_erased = 0;
    3642:	4b4b      	ldr	r3, [pc, #300]	; (3770 <FIH_LABEL_FIH_CALL_END_956+0x260>)
    3644:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    3646:	4b4b      	ldr	r3, [pc, #300]	; (3774 <FIH_LABEL_FIH_CALL_END_956+0x264>)
    3648:	f8c3 a000 	str.w	sl, [r3]
                                 curr_off + img_chunk_len - 1);
    364c:	683a      	ldr	r2, [r7, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    364e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 3770 <FIH_LABEL_FIH_CALL_END_956+0x260>
                                 curr_off + img_chunk_len - 1);
    3652:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    3654:	f8d8 1000 	ldr.w	r1, [r8]
    3658:	9806      	ldr	r0, [sp, #24]
    365a:	442a      	add	r2, r5
    365c:	f007 fc5a 	bl	af14 <erase_range>
    if (not_yet_erased < 0) {
    3660:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    3662:	f8c8 0000 	str.w	r0, [r8]
    if (not_yet_erased < 0) {
    3666:	f6ff af6a 	blt.w	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    366a:	9806      	ldr	r0, [sp, #24]
    366c:	f007 fc14 	bl	ae98 <flash_area_align>
    3670:	fbb5 f2f0 	udiv	r2, r5, r0
    3674:	fb02 5210 	mls	r2, r2, r0, r5
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    3678:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 3774 <FIH_LABEL_FIH_CALL_END_956+0x264>
    367c:	6839      	ldr	r1, [r7, #0]
    367e:	f8da 3000 	ldr.w	r3, [sl]
    img_chunk_len -= rem_bytes;
    3682:	fa5f f882 	uxtb.w	r8, r2
    3686:	eba5 0808 	sub.w	r8, r5, r8
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    368a:	440d      	add	r5, r1
    368c:	429d      	cmp	r5, r3
    368e:	bf38      	it	cc
    3690:	2200      	movcc	r2, #0
    rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    3692:	9806      	ldr	r0, [sp, #24]
    3694:	b2d5      	uxtb	r5, r2
    3696:	4643      	mov	r3, r8
    3698:	464a      	mov	r2, r9
    369a:	f007 fbd4 	bl	ae46 <flash_area_write>
    if (rc == 0 && rem_bytes) {
    369e:	2800      	cmp	r0, #0
    36a0:	f47f af4d 	bne.w	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    36a4:	bb15      	cbnz	r5, 36ec <FIH_LABEL_FIH_CALL_END_956+0x1dc>
        curr_off += img_chunk_len + rem_bytes;
    36a6:	683a      	ldr	r2, [r7, #0]
        if (curr_off == img_size) {
    36a8:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_chunk_len + rem_bytes;
    36ac:	4442      	add	r2, r8
    36ae:	442a      	add	r2, r5
        if (curr_off == img_size) {
    36b0:	429a      	cmp	r2, r3
        curr_off += img_chunk_len + rem_bytes;
    36b2:	603a      	str	r2, [r7, #0]
        if (curr_off == img_size) {
    36b4:	f47f af44 	bne.w	3540 <FIH_LABEL_FIH_CALL_END_956+0x30>
	return fs->fs_off;
    36b8:	4b2f      	ldr	r3, [pc, #188]	; (3778 <FIH_LABEL_FIH_CALL_END_956+0x268>)
            if (erase_range(fap, start, start) < 0) {
    36ba:	9806      	ldr	r0, [sp, #24]
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	4611      	mov	r1, r2
    36c0:	f007 fc28 	bl	af14 <erase_range>
    36c4:	2800      	cmp	r0, #0
    36c6:	db87      	blt.n	35d8 <FIH_LABEL_FIH_CALL_END_956+0xc8>
            rc = BOOT_HOOK_CALL(boot_serial_uploaded_hook, 0, img_num, fap,
    36c8:	4630      	mov	r0, r6
    36ca:	f8da 2000 	ldr.w	r2, [sl]
    36ce:	9906      	ldr	r1, [sp, #24]
    36d0:	f008 faf4 	bl	bcbc <boot_serial_uploaded_hook>
    36d4:	4604      	mov	r4, r0
            if (rc) {
    36d6:	e733      	b.n	3540 <FIH_LABEL_FIH_CALL_END_956+0x30>
    } else if (img_chunk_off != curr_off) {
    36d8:	683b      	ldr	r3, [r7, #0]
    36da:	4543      	cmp	r3, r8
    36dc:	f47f af30 	bne.w	3540 <FIH_LABEL_FIH_CALL_END_956+0x30>
    } else if (curr_off + img_chunk_len > img_size) {
    36e0:	4b24      	ldr	r3, [pc, #144]	; (3774 <FIH_LABEL_FIH_CALL_END_956+0x264>)
    36e2:	44a8      	add	r8, r5
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	4598      	cmp	r8, r3
    36e8:	d9b0      	bls.n	364c <FIH_LABEL_FIH_CALL_END_956+0x13c>
    36ea:	e728      	b.n	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    36ec:	9806      	ldr	r0, [sp, #24]
    36ee:	f007 fbda 	bl	aea6 <flash_area_erased_val>
    36f2:	2208      	movs	r2, #8
    36f4:	4601      	mov	r1, r0
    36f6:	a808      	add	r0, sp, #32
    36f8:	f007 ff12 	bl	b520 <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    36fc:	462a      	mov	r2, r5
    36fe:	eb09 0108 	add.w	r1, r9, r8
    3702:	a808      	add	r0, sp, #32
    3704:	f007 ff01 	bl	b50a <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    3708:	f8dd 9018 	ldr.w	r9, [sp, #24]
    370c:	6839      	ldr	r1, [r7, #0]
    370e:	4648      	mov	r0, r9
    3710:	eb08 0b01 	add.w	fp, r8, r1
    3714:	f007 fbc0 	bl	ae98 <flash_area_align>
    3718:	4659      	mov	r1, fp
    371a:	4603      	mov	r3, r0
    371c:	aa08      	add	r2, sp, #32
    371e:	4648      	mov	r0, r9
    3720:	f007 fb91 	bl	ae46 <flash_area_write>
    if (rc == 0) {
    3724:	2800      	cmp	r0, #0
    3726:	d0be      	beq.n	36a6 <FIH_LABEL_FIH_CALL_END_956+0x196>
    3728:	e709      	b.n	353e <FIH_LABEL_FIH_CALL_END_956+0x2e>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    372a:	b998      	cbnz	r0, 3754 <FIH_LABEL_FIH_CALL_END_956+0x244>
        switch (hdr->nh_id) {
    372c:	79e3      	ldrb	r3, [r4, #7]
    372e:	2b01      	cmp	r3, #1
    3730:	f43f ae63 	beq.w	33fa <boot_serial_input+0x4e>
    3734:	2b05      	cmp	r3, #5
    3736:	d003      	beq.n	3740 <FIH_LABEL_FIH_CALL_END_956+0x230>
    3738:	2b00      	cmp	r3, #0
    373a:	f47f ae5d 	bne.w	33f8 <boot_serial_input+0x4c>
    373e:	e6f2      	b.n	3526 <FIH_LABEL_FIH_CALL_END_956+0x16>
    bs_rc_rsp(0);
    3740:	f7ff fe06 	bl	3350 <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    3744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3748:	2100      	movs	r1, #0
    374a:	f005 ff01 	bl	9550 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    374e:	2001      	movs	r0, #1
    3750:	f007 f9e8 	bl	ab24 <sys_reboot>
        if (bs_peruser_system_specific(hdr, buf, len, cbor_state) == 0) {
    3754:	462a      	mov	r2, r5
    3756:	4631      	mov	r1, r6
    3758:	4620      	mov	r0, r4
    375a:	4b08      	ldr	r3, [pc, #32]	; (377c <FIH_LABEL_FIH_CALL_END_956+0x26c>)
    375c:	f7fc ff18 	bl	590 <bs_peruser_system_specific>
    3760:	2800      	cmp	r0, #0
    3762:	f47f aee0 	bne.w	3526 <FIH_LABEL_FIH_CALL_END_956+0x16>
}
    3766:	b021      	add	sp, #132	; 0x84
    3768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            boot_serial_output();
    376c:	f7ff bd2a 	b.w	31c4 <boot_serial_output>
    3770:	2001b72c 	.word	0x2001b72c
    3774:	2001b728 	.word	0x2001b728
    3778:	2001b730 	.word	0x2001b730
    377c:	2001b6f4 	.word	0x2001b6f4

00003780 <boot_serial_start>:
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    bs_entry = true;
    3780:	2301      	movs	r3, #1
{
    3782:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    int dec_off = 0;
    3786:	2500      	movs	r5, #0
{
    3788:	4606      	mov	r6, r0
    bs_entry = true;
    378a:	4f30      	ldr	r7, [pc, #192]	; (384c <boot_serial_start+0xcc>)
    378c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3850 <boot_serial_start+0xd0>
    3790:	703b      	strb	r3, [r7, #0]
    boot_uf = f;
    3792:	4b30      	ldr	r3, [pc, #192]	; (3854 <boot_serial_start+0xd4>)
    3794:	4c30      	ldr	r4, [pc, #192]	; (3858 <boot_serial_start+0xd8>)
    int dec_off = 0;
    3796:	9500      	str	r5, [sp, #0]
    boot_uf = f;
    3798:	6018      	str	r0, [r3, #0]
    379a:	4b30      	ldr	r3, [pc, #192]	; (385c <boot_serial_start+0xdc>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    379c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 3860 <boot_serial_start+0xe0>
    37a0:	f5c5 7100 	rsb	r1, r5, #512	; 0x200
    37a4:	f8c8 4600 	str.w	r4, [r8, #1536]	; 0x600
    37a8:	aa01      	add	r2, sp, #4
    37aa:	f8c8 4604 	str.w	r4, [r8, #1540]	; 0x604
    37ae:	3101      	adds	r1, #1
    37b0:	f8c8 4608 	str.w	r4, [r8, #1544]	; 0x608
    37b4:	eb09 0005 	add.w	r0, r9, r5
    37b8:	f8c8 460c 	str.w	r4, [r8, #1548]	; 0x60c
    37bc:	f8c8 4610 	str.w	r4, [r8, #1552]	; 0x610
    37c0:	f8c8 4614 	str.w	r4, [r8, #1556]	; 0x614
    37c4:	f8c8 4618 	str.w	r4, [r8, #1560]	; 0x618
    37c8:	f8c8 461c 	str.w	r4, [r8, #1564]	; 0x61c
    37cc:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
    37d0:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
    37d4:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
    37d8:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
    37dc:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    37e0:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    37e4:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
    37e8:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
    37ec:	6833      	ldr	r3, [r6, #0]
    37ee:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    37f0:	2800      	cmp	r0, #0
    37f2:	9b01      	ldr	r3, [sp, #4]
    37f4:	dc00      	bgt.n	37f8 <boot_serial_start+0x78>
    37f6:	b133      	cbz	r3, 3806 <boot_serial_start+0x86>
        off += rc;
    37f8:	4405      	add	r5, r0
        if (!full_line) {
    37fa:	b953      	cbnz	r3, 3812 <boot_serial_start+0x92>
            if (off == max_input) {
    37fc:	f240 2301 	movw	r3, #513	; 0x201
    3800:	429d      	cmp	r5, r3
    3802:	d100      	bne.n	3806 <boot_serial_start+0x86>
        off = 0;
    3804:	2500      	movs	r5, #0
    while (timeout_in_ms > 0 || bs_entry) {
    3806:	783b      	ldrb	r3, [r7, #0]
    3808:	2b00      	cmp	r3, #0
    380a:	d1c6      	bne.n	379a <boot_serial_start+0x1a>
    boot_serial_read_console(f,0);
}
    380c:	b003      	add	sp, #12
    380e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    3812:	f899 3000 	ldrb.w	r3, [r9]
    3816:	2b06      	cmp	r3, #6
    3818:	d10a      	bne.n	3830 <boot_serial_start+0xb0>
    381a:	f899 3001 	ldrb.w	r3, [r9, #1]
    381e:	2b09      	cmp	r3, #9
    3820:	d10c      	bne.n	383c <boot_serial_start+0xbc>
            dec_off = 0;
    3822:	2300      	movs	r3, #0
    3824:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    3826:	4669      	mov	r1, sp
    3828:	1ea8      	subs	r0, r5, #2
    382a:	f7ff fd51 	bl	32d0 <boot_serial_in_dec.constprop.0>
    382e:	e005      	b.n	383c <boot_serial_start+0xbc>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    3830:	2b04      	cmp	r3, #4
    3832:	d103      	bne.n	383c <boot_serial_start+0xbc>
    3834:	f899 3001 	ldrb.w	r3, [r9, #1]
    3838:	2b14      	cmp	r3, #20
    383a:	d0f4      	beq.n	3826 <boot_serial_start+0xa6>
        if (rc == 1) {
    383c:	2801      	cmp	r0, #1
    383e:	d1e1      	bne.n	3804 <boot_serial_start+0x84>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    3840:	9900      	ldr	r1, [sp, #0]
    3842:	4808      	ldr	r0, [pc, #32]	; (3864 <boot_serial_start+0xe4>)
    3844:	3902      	subs	r1, #2
    3846:	f7ff fdb1 	bl	33ac <boot_serial_input>
    384a:	e7db      	b.n	3804 <boot_serial_start+0x84>
    384c:	2001de7c 	.word	0x2001de7c
    3850:	50018000 	.word	0x50018000
    3854:	2001b6ec 	.word	0x2001b6ec
    3858:	6e524635 	.word	0x6e524635
    385c:	50019000 	.word	0x50019000
    3860:	2001e17e 	.word	0x2001e17e
    3864:	2001df7f 	.word	0x2001df7f

00003868 <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    3868:	b573      	push	{r0, r1, r4, r5, r6, lr}
    386a:	4604      	mov	r4, r0
    386c:	460e      	mov	r6, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    386e:	f007 fddc 	bl	b42a <zcbor_union_start_code>
    3872:	4605      	mov	r5, r0
    3874:	b338      	cbz	r0, 38c6 <decode_repeated_Upload_members+0x5e>
    3876:	4b36      	ldr	r3, [pc, #216]	; (3950 <decode_repeated_Upload_members+0xe8>)
    3878:	4669      	mov	r1, sp
    387a:	9300      	str	r3, [sp, #0]
    387c:	2305      	movs	r3, #5
    387e:	4620      	mov	r0, r4
    3880:	9301      	str	r3, [sp, #4]
    3882:	f007 fcb2 	bl	b1ea <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3886:	b138      	cbz	r0, 3898 <decode_repeated_Upload_members+0x30>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    3888:	4631      	mov	r1, r6
    388a:	4620      	mov	r0, r4
    388c:	f007 fc8f 	bl	b1ae <zcbor_int32_decode>
    3890:	b110      	cbz	r0, 3898 <decode_repeated_Upload_members+0x30>
    3892:	2300      	movs	r3, #0
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    3894:	7233      	strb	r3, [r6, #8]
    3896:	e040      	b.n	391a <decode_repeated_Upload_members+0xb2>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    3898:	4620      	mov	r0, r4
    389a:	f007 fdc9 	bl	b430 <zcbor_union_elem_code>
    389e:	b1a8      	cbz	r0, 38cc <decode_repeated_Upload_members+0x64>
    38a0:	4b2c      	ldr	r3, [pc, #176]	; (3954 <decode_repeated_Upload_members+0xec>)
    38a2:	4669      	mov	r1, sp
    38a4:	9300      	str	r3, [sp, #0]
    38a6:	2304      	movs	r3, #4
    38a8:	4620      	mov	r0, r4
    38aa:	9301      	str	r3, [sp, #4]
    38ac:	f007 fc9d 	bl	b1ea <zcbor_tstr_expect>
    38b0:	b160      	cbz	r0, 38cc <decode_repeated_Upload_members+0x64>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    38b2:	4631      	mov	r1, r6
    38b4:	4620      	mov	r0, r4
    38b6:	f007 fc95 	bl	b1e4 <zcbor_bstr_decode>
    38ba:	b138      	cbz	r0, 38cc <decode_repeated_Upload_members+0x64>
    38bc:	2501      	movs	r5, #1
    38be:	7235      	strb	r5, [r6, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    38c0:	4620      	mov	r0, r4
    38c2:	f007 fdb9 	bl	b438 <zcbor_union_end_code>

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    38c6:	4628      	mov	r0, r5
    38c8:	b002      	add	sp, #8
    38ca:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    38cc:	4620      	mov	r0, r4
    38ce:	f007 fdaf 	bl	b430 <zcbor_union_elem_code>
    38d2:	b178      	cbz	r0, 38f4 <decode_repeated_Upload_members+0x8c>
    38d4:	4b20      	ldr	r3, [pc, #128]	; (3958 <decode_repeated_Upload_members+0xf0>)
    38d6:	4669      	mov	r1, sp
    38d8:	9300      	str	r3, [sp, #0]
    38da:	2303      	movs	r3, #3
    38dc:	4620      	mov	r0, r4
    38de:	9301      	str	r3, [sp, #4]
    38e0:	f007 fc83 	bl	b1ea <zcbor_tstr_expect>
    38e4:	b130      	cbz	r0, 38f4 <decode_repeated_Upload_members+0x8c>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    38e6:	4631      	mov	r1, r6
    38e8:	4620      	mov	r0, r4
    38ea:	f007 fc60 	bl	b1ae <zcbor_int32_decode>
    38ee:	b108      	cbz	r0, 38f4 <decode_repeated_Upload_members+0x8c>
    38f0:	2302      	movs	r3, #2
    38f2:	e7cf      	b.n	3894 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    38f4:	4620      	mov	r0, r4
    38f6:	f007 fd9b 	bl	b430 <zcbor_union_elem_code>
    38fa:	b180      	cbz	r0, 391e <decode_repeated_Upload_members+0xb6>
    38fc:	2503      	movs	r5, #3
    38fe:	4b17      	ldr	r3, [pc, #92]	; (395c <decode_repeated_Upload_members+0xf4>)
    3900:	4669      	mov	r1, sp
    3902:	4620      	mov	r0, r4
    3904:	9300      	str	r3, [sp, #0]
    3906:	9501      	str	r5, [sp, #4]
    3908:	f007 fc6f 	bl	b1ea <zcbor_tstr_expect>
    390c:	b138      	cbz	r0, 391e <decode_repeated_Upload_members+0xb6>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    390e:	4631      	mov	r1, r6
    3910:	4620      	mov	r0, r4
    3912:	f007 fc4c 	bl	b1ae <zcbor_int32_decode>
    3916:	b110      	cbz	r0, 391e <decode_repeated_Upload_members+0xb6>
    3918:	7235      	strb	r5, [r6, #8]
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    391a:	2501      	movs	r5, #1
    391c:	e7d0      	b.n	38c0 <decode_repeated_Upload_members+0x58>
    391e:	4620      	mov	r0, r4
    3920:	f007 fd86 	bl	b430 <zcbor_union_elem_code>
    3924:	b908      	cbnz	r0, 392a <decode_repeated_Upload_members+0xc2>
    3926:	2500      	movs	r5, #0
    3928:	e7ca      	b.n	38c0 <decode_repeated_Upload_members+0x58>
    392a:	4b0d      	ldr	r3, [pc, #52]	; (3960 <decode_repeated_Upload_members+0xf8>)
    392c:	4669      	mov	r1, sp
    392e:	9300      	str	r3, [sp, #0]
    3930:	2303      	movs	r3, #3
    3932:	4620      	mov	r0, r4
    3934:	9301      	str	r3, [sp, #4]
    3936:	f007 fc58 	bl	b1ea <zcbor_tstr_expect>
    393a:	2800      	cmp	r0, #0
    393c:	d0f3      	beq.n	3926 <decode_repeated_Upload_members+0xbe>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    393e:	4631      	mov	r1, r6
    3940:	4620      	mov	r0, r4
    3942:	f007 fc4f 	bl	b1e4 <zcbor_bstr_decode>
    3946:	2800      	cmp	r0, #0
    3948:	d0ed      	beq.n	3926 <decode_repeated_Upload_members+0xbe>
    394a:	2304      	movs	r3, #4
    394c:	e7a2      	b.n	3894 <decode_repeated_Upload_members+0x2c>
    394e:	bf00      	nop
    3950:	0000eb0d 	.word	0x0000eb0d
    3954:	0000eb33 	.word	0x0000eb33
    3958:	0000eb38 	.word	0x0000eb38
    395c:	0000eb2f 	.word	0x0000eb2f
    3960:	0000eb3c 	.word	0x0000eb3c

00003964 <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    3964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3968:	f04f 0901 	mov.w	r9, #1
{
    396c:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    396e:	ad04      	add	r5, sp, #16
{
    3970:	4607      	mov	r7, r0
    3972:	460e      	mov	r6, r1
    3974:	4690      	mov	r8, r2
    3976:	461c      	mov	r4, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    3978:	4602      	mov	r2, r0
    397a:	460b      	mov	r3, r1
    397c:	4628      	mov	r0, r5
    397e:	2104      	movs	r1, #4
    3980:	f8cd 9000 	str.w	r9, [sp]
    3984:	f007 fd5c 	bl	b440 <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    3988:	4628      	mov	r0, r5
    398a:	f007 fc31 	bl	b1f0 <zcbor_map_start_decode>
    398e:	b170      	cbz	r0, 39ae <cbor_decode_Upload+0x4a>
    3990:	230c      	movs	r3, #12
    3992:	2105      	movs	r1, #5
    3994:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3998:	4648      	mov	r0, r9
    399a:	4b11      	ldr	r3, [pc, #68]	; (39e0 <cbor_decode_Upload+0x7c>)
    399c:	9500      	str	r5, [sp, #0]
    399e:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    39a2:	f007 fc46 	bl	b232 <zcbor_multi_decode>
    39a6:	b950      	cbnz	r0, 39be <cbor_decode_Upload+0x5a>
    39a8:	4628      	mov	r0, r5
    39aa:	f007 fc3d 	bl	b228 <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    39ae:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    39b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39b2:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    39b4:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    39b6:	4290      	cmp	r0, r2
    39b8:	bf08      	it	eq
    39ba:	201f      	moveq	r0, #31
    39bc:	e00c      	b.n	39d8 <cbor_decode_Upload+0x74>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    39be:	4628      	mov	r0, r5
    39c0:	f007 fc30 	bl	b224 <zcbor_map_end_decode>
	if (ret && (payload_len_out != NULL)) {
    39c4:	2800      	cmp	r0, #0
    39c6:	d0f2      	beq.n	39ae <cbor_decode_Upload+0x4a>
    39c8:	b12c      	cbz	r4, 39d6 <cbor_decode_Upload+0x72>
		*payload_len_out = MIN(payload_len,
    39ca:	9804      	ldr	r0, [sp, #16]
    39cc:	1bc0      	subs	r0, r0, r7
    39ce:	42b0      	cmp	r0, r6
    39d0:	bf94      	ite	ls
    39d2:	6020      	strls	r0, [r4, #0]
    39d4:	6026      	strhi	r6, [r4, #0]
	}
	return ZCBOR_SUCCESS;
    39d6:	2000      	movs	r0, #0
}
    39d8:	b01d      	add	sp, #116	; 0x74
    39da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    39de:	bf00      	nop
    39e0:	00003869 	.word	0x00003869

000039e4 <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
    39e4:	4602      	mov	r2, r0
    39e6:	4608      	mov	r0, r1

	for (; len > 0; len--) {
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    39e8:	4603      	mov	r3, r0
    39ea:	3801      	subs	r0, #1
    39ec:	5c11      	ldrb	r1, [r2, r0]
    39ee:	b911      	cbnz	r1, 39f6 <get_result_len+0x12>
	for (; len > 0; len--) {
    39f0:	2800      	cmp	r0, #0
    39f2:	d1f9      	bne.n	39e8 <get_result_len+0x4>
    39f4:	4770      	bx	lr
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    39f6:	2b02      	cmp	r3, #2
    39f8:	bf81      	itttt	hi
    39fa:	2001      	movhi	r0, #1
    39fc:	4a04      	ldrhi	r2, [pc, #16]	; (3a10 <get_result_len+0x2c>)
    39fe:	189b      	addhi	r3, r3, r2
    3a00:	f813 1c02 	ldrbhi.w	r1, [r3, #-2]
    3a04:	bf86      	itte	hi
    3a06:	4088      	lslhi	r0, r1
    3a08:	b2c0      	uxtbhi	r0, r0
    3a0a:	4618      	movls	r0, r3
}
    3a0c:	4770      	bx	lr
    3a0e:	bf00      	nop
    3a10:	0000eb40 	.word	0x0000eb40

00003a14 <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    3a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a16:	4604      	mov	r4, r0
    3a18:	460e      	mov	r6, r1
	zcbor_assert(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    3a1a:	4610      	mov	r0, r2
    3a1c:	4619      	mov	r1, r3
{
    3a1e:	4615      	mov	r5, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    3a20:	f7ff ffe0 	bl	39e4 <get_result_len>
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    3a24:	2801      	cmp	r0, #1
    3a26:	d104      	bne.n	3a32 <value_encode+0x1e>
    3a28:	7828      	ldrb	r0, [r5, #0]
    3a2a:	2817      	cmp	r0, #23
    3a2c:	bf94      	ite	ls
    3a2e:	2000      	movls	r0, #0
    3a30:	2001      	movhi	r0, #1
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    3a32:	6822      	ldr	r2, [r4, #0]
    3a34:	68e1      	ldr	r1, [r4, #12]
    3a36:	1c43      	adds	r3, r0, #1
    3a38:	4413      	add	r3, r2
    3a3a:	4299      	cmp	r1, r3
    3a3c:	d204      	bcs.n	3a48 <value_encode+0x34>
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		state->constant_state->error = err;
    3a3e:	2208      	movs	r2, #8
		ZCBOR_FAIL();
    3a40:	2000      	movs	r0, #0
    3a42:	6963      	ldr	r3, [r4, #20]
    3a44:	60da      	str	r2, [r3, #12]
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
}
    3a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!encode_header_byte(state, major_type,
    3a48:	782b      	ldrb	r3, [r5, #0]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    3a4a:	b138      	cbz	r0, 3a5c <value_encode+0x48>
	switch(val) {
    3a4c:	1e83      	subs	r3, r0, #2
    3a4e:	2b06      	cmp	r3, #6
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    3a50:	bf8e      	itee	hi
    3a52:	2300      	movhi	r3, #0
    3a54:	4f0d      	ldrls	r7, [pc, #52]	; (3a8c <value_encode+0x78>)
    3a56:	5cfb      	ldrbls	r3, [r7, r3]
    3a58:	3318      	adds	r3, #24
    3a5a:	b2db      	uxtb	r3, r3
	ZCBOR_CHECK_PAYLOAD();
    3a5c:	428a      	cmp	r2, r1
    3a5e:	d2ee      	bcs.n	3a3e <value_encode+0x2a>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    3a60:	f003 031f 	and.w	r3, r3, #31
    3a64:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
    3a68:	1c51      	adds	r1, r2, #1
    3a6a:	6021      	str	r1, [r4, #0]
    3a6c:	7013      	strb	r3, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    3a6e:	182b      	adds	r3, r5, r0
    3a70:	429d      	cmp	r5, r3
    3a72:	d104      	bne.n	3a7e <value_encode+0x6a>
	state->elem_count++;
    3a74:	68a3      	ldr	r3, [r4, #8]
	return true;
    3a76:	2001      	movs	r0, #1
	state->elem_count++;
    3a78:	3301      	adds	r3, #1
    3a7a:	60a3      	str	r3, [r4, #8]
	return true;
    3a7c:	e7e3      	b.n	3a46 <value_encode+0x32>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    3a7e:	6822      	ldr	r2, [r4, #0]
    3a80:	1c51      	adds	r1, r2, #1
    3a82:	6021      	str	r1, [r4, #0]
    3a84:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    3a88:	7011      	strb	r1, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    3a8a:	e7f1      	b.n	3a70 <value_encode+0x5c>
    3a8c:	0000eb40 	.word	0x0000eb40

00003a90 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3a90:	4901      	ldr	r1, [pc, #4]	; (3a98 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3a92:	2210      	movs	r2, #16
	str	r2, [r1]
    3a94:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3a96:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3a98:	e000ed10 	.word	0xe000ed10

00003a9c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3a9c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3a9e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3aa0:	f380 8811 	msr	BASEPRI, r0
	isb
    3aa4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3aa8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3aac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3aae:	b662      	cpsie	i
	isb
    3ab0:	f3bf 8f6f 	isb	sy

	bx	lr
    3ab4:	4770      	bx	lr
    3ab6:	bf00      	nop

00003ab8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3ab8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3aba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3abc:	f381 8811 	msr	BASEPRI, r1

	wfe
    3ac0:	bf20      	wfe

	msr	BASEPRI, r0
    3ac2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3ac6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop

00003acc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3acc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3ace:	2b00      	cmp	r3, #0
    3ad0:	db08      	blt.n	3ae4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ad2:	2201      	movs	r2, #1
    3ad4:	f000 001f 	and.w	r0, r0, #31
    3ad8:	fa02 f000 	lsl.w	r0, r2, r0
    3adc:	4a02      	ldr	r2, [pc, #8]	; (3ae8 <arch_irq_enable+0x1c>)
    3ade:	095b      	lsrs	r3, r3, #5
    3ae0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	e000e100 	.word	0xe000e100

00003aec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3aec:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3aee:	2b00      	cmp	r3, #0
    3af0:	db0d      	blt.n	3b0e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3af2:	2201      	movs	r2, #1
    3af4:	f000 001f 	and.w	r0, r0, #31
    3af8:	fa02 f000 	lsl.w	r0, r2, r0
    3afc:	095b      	lsrs	r3, r3, #5
    3afe:	4a04      	ldr	r2, [pc, #16]	; (3b10 <arch_irq_disable+0x24>)
    3b00:	3320      	adds	r3, #32
    3b02:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3b06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b0a:	f3bf 8f6f 	isb	sy
}
    3b0e:	4770      	bx	lr
    3b10:	e000e100 	.word	0xe000e100

00003b14 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3b14:	4b05      	ldr	r3, [pc, #20]	; (3b2c <arch_irq_is_enabled+0x18>)
    3b16:	0942      	lsrs	r2, r0, #5
    3b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b1c:	2301      	movs	r3, #1
    3b1e:	f000 001f 	and.w	r0, r0, #31
    3b22:	fa03 f000 	lsl.w	r0, r3, r0
}
    3b26:	4010      	ands	r0, r2
    3b28:	4770      	bx	lr
    3b2a:	bf00      	nop
    3b2c:	e000e100 	.word	0xe000e100

00003b30 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3b30:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3b32:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    3b34:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b38:	bfac      	ite	ge
    3b3a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b3e:	4b06      	ldrlt	r3, [pc, #24]	; (3b58 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b40:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3b44:	b2c9      	uxtb	r1, r1
    3b46:	bfab      	itete	ge
    3b48:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b4c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b50:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b54:	5419      	strblt	r1, [r3, r0]
}
    3b56:	4770      	bx	lr
    3b58:	e000ed14 	.word	0xe000ed14

00003b5c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3b5c:	bf30      	wfi
    b z_SysNmiOnReset
    3b5e:	f7ff bffd 	b.w	3b5c <z_SysNmiOnReset>
    3b62:	bf00      	nop

00003b64 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3b64:	4a0b      	ldr	r2, [pc, #44]	; (3b94 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3b66:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3b68:	4b0b      	ldr	r3, [pc, #44]	; (3b98 <z_arm_prep_c+0x34>)
    3b6a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3b6e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3b70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b74:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3b78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3b7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3b84:	f004 feea 	bl	895c <z_bss_zero>
	z_data_copy();
    3b88:	f005 fd74 	bl	9674 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3b8c:	f000 f99e 	bl	3ecc <z_arm_interrupt_init>
	z_cstart();
    3b90:	f004 ff24 	bl	89dc <z_cstart>
    3b94:	00000000 	.word	0x00000000
    3b98:	e000ed00 	.word	0xe000ed00

00003b9c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3b9c:	4a09      	ldr	r2, [pc, #36]	; (3bc4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3b9e:	490a      	ldr	r1, [pc, #40]	; (3bc8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3ba0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3ba2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3ba4:	6718      	str	r0, [r3, #112]	; 0x70
	_current->arch.swap_return_value = _k_neg_eagain;
    3ba6:	6759      	str	r1, [r3, #116]	; 0x74

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3ba8:	4908      	ldr	r1, [pc, #32]	; (3bcc <arch_swap+0x30>)
    3baa:	684b      	ldr	r3, [r1, #4]
    3bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3bb0:	604b      	str	r3, [r1, #4]
    3bb2:	2300      	movs	r3, #0
    3bb4:	f383 8811 	msr	BASEPRI, r3
    3bb8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3bbc:	6893      	ldr	r3, [r2, #8]
}
    3bbe:	6f58      	ldr	r0, [r3, #116]	; 0x74
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop
    3bc4:	2001c364 	.word	0x2001c364
    3bc8:	0000e7c4 	.word	0x0000e7c4
    3bcc:	e000ed00 	.word	0xe000ed00

00003bd0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3bd0:	4913      	ldr	r1, [pc, #76]	; (3c20 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3bd2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3bd4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3bd8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3bda:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3bde:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3be2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3be4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3be8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3bec:	4f0d      	ldr	r7, [pc, #52]	; (3c24 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3bee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3bf2:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
    3bf4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3bf6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3bf8:	6f10      	ldr	r0, [r2, #112]	; 0x70
    movs r3, #0
    3bfa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3bfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3bfe:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3c02:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3c06:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3c0a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3c0e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3c12:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3c14:	f007 fc45 	bl	b4a2 <configure_builtin_stack_guard>
    pop {r2, lr}
    3c18:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3c1c:	4770      	bx	lr
    3c1e:	0000      	.short	0x0000
    ldr r1, =_kernel
    3c20:	2001c364 	.word	0x2001c364
    ldr v4, =_SCS_ICSR
    3c24:	e000ed04 	.word	0xe000ed04

00003c28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3c28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3c2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3c2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3c32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3c36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3c38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3c3c:	2902      	cmp	r1, #2
    beq _oops
    3c3e:	d0ff      	beq.n	3c40 <_oops>

00003c40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3c40:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3c42:	f007 fc1f 	bl	b484 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3c46:	bd01      	pop	{r0, pc}

00003c48 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3c48:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3c4c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3c4e:	490b      	ldr	r1, [pc, #44]	; (3c7c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    3c50:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3c54:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    3c56:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3c5a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3c5e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3c60:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    3c64:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3c6c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3c70:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3c72:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3c74:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3c76:	6703      	str	r3, [r0, #112]	; 0x70
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop
    3c7c:	0000a467 	.word	0x0000a467

00003c80 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3c80:	4b08      	ldr	r3, [pc, #32]	; (3ca4 <arch_switch_to_main_thread+0x24>)
    3c82:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3c84:	6e03      	ldr	r3, [r0, #96]	; 0x60
    3c86:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3c8a:	4610      	mov	r0, r2
    3c8c:	f381 8809 	msr	PSP, r1
    3c90:	2100      	movs	r1, #0
    3c92:	b663      	cpsie	if
    3c94:	f381 8811 	msr	BASEPRI, r1
    3c98:	f3bf 8f6f 	isb	sy
    3c9c:	2200      	movs	r2, #0
    3c9e:	2300      	movs	r3, #0
    3ca0:	f006 fbe1 	bl	a466 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3ca4:	2001c364 	.word	0x2001c364

00003ca8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3ca8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3caa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3cae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3cb2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3cb6:	4904      	ldr	r1, [pc, #16]	; (3cc8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3cb8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3cba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3cbc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3cbe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3cc2:	4902      	ldr	r1, [pc, #8]	; (3ccc <_isr_wrapper+0x24>)
	bx r1
    3cc4:	4708      	bx	r1
    3cc6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3cc8:	0000e0c8 	.word	0x0000e0c8
	ldr r1, =z_arm_int_exit
    3ccc:	00003cd1 	.word	0x00003cd1

00003cd0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3cd0:	4b04      	ldr	r3, [pc, #16]	; (3ce4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3cd2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3cd4:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
    3cd6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3cd8:	d003      	beq.n	3ce2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3cda:	4903      	ldr	r1, [pc, #12]	; (3ce8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ce0:	600a      	str	r2, [r1, #0]

00003ce2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ce2:	4770      	bx	lr
	ldr r3, =_kernel
    3ce4:	2001c364 	.word	0x2001c364
	ldr r1, =_SCS_ICSR
    3ce8:	e000ed04 	.word	0xe000ed04

00003cec <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3cec:	4b09      	ldr	r3, [pc, #36]	; (3d14 <usage_fault.constprop.0+0x28>)
    3cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3cf2:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    3cfe:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3d02:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3d06:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    3d0a:	bf18      	it	ne
    3d0c:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
    3d10:	4770      	bx	lr
    3d12:	bf00      	nop
    3d14:	e000ed00 	.word	0xe000ed00

00003d18 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3d18:	4b0d      	ldr	r3, [pc, #52]	; (3d50 <bus_fault.constprop.0+0x38>)
    3d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d20:	0592      	lsls	r2, r2, #22
    3d22:	d507      	bpl.n	3d34 <bus_fault.constprop.0+0x1c>
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d26:	0412      	lsls	r2, r2, #16
    3d28:	d504      	bpl.n	3d34 <bus_fault.constprop.0+0x1c>
			if (from_hard_fault != 0) {
    3d2a:	b118      	cbz	r0, 3d34 <bus_fault.constprop.0+0x1c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3d32:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3d34:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3d36:	4b06      	ldr	r3, [pc, #24]	; (3d50 <bus_fault.constprop.0+0x38>)
    3d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d3c:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3d3e:	bf58      	it	pl
    3d40:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d44:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    3d48:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3d4a:	7008      	strb	r0, [r1, #0]
}
    3d4c:	4770      	bx	lr
    3d4e:	bf00      	nop
    3d50:	e000ed00 	.word	0xe000ed00

00003d54 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3d54:	4b12      	ldr	r3, [pc, #72]	; (3da0 <mem_manage_fault.constprop.0+0x4c>)
    3d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d5c:	0792      	lsls	r2, r2, #30
    3d5e:	d508      	bpl.n	3d72 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    3d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d64:	0612      	lsls	r2, r2, #24
    3d66:	d504      	bpl.n	3d72 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    3d68:	b118      	cbz	r0, 3d72 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3d70:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3d72:	4b0b      	ldr	r3, [pc, #44]	; (3da0 <mem_manage_fault.constprop.0+0x4c>)
    3d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d7a:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
    3d7c:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3d80:	bf58      	it	pl
    3d82:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d86:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3d88:	bf42      	ittt	mi
    3d8a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3d8c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3d90:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3d92:	4a03      	ldr	r2, [pc, #12]	; (3da0 <mem_manage_fault.constprop.0+0x4c>)
    3d94:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3d96:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3d9a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3d9c:	7008      	strb	r0, [r1, #0]
}
    3d9e:	4770      	bx	lr
    3da0:	e000ed00 	.word	0xe000ed00

00003da4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3da4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3da6:	4b3d      	ldr	r3, [pc, #244]	; (3e9c <z_arm_fault+0xf8>)
{
    3da8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3daa:	685b      	ldr	r3, [r3, #4]
    3dac:	2500      	movs	r5, #0
{
    3dae:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3db4:	f385 8811 	msr	BASEPRI, r5
    3db8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3dbc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    3dc0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    3dc4:	d111      	bne.n	3dea <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3dc6:	f002 010c 	and.w	r1, r2, #12
    3dca:	2908      	cmp	r1, #8
    3dcc:	d00d      	beq.n	3dea <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3dce:	0712      	lsls	r2, r2, #28
    3dd0:	d401      	bmi.n	3dd6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3dd2:	4606      	mov	r6, r0
			*nested_exc = true;
    3dd4:	2501      	movs	r5, #1
	*recoverable = false;
    3dd6:	2200      	movs	r2, #0
	switch (fault) {
    3dd8:	3b03      	subs	r3, #3
	*recoverable = false;
    3dda:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3dde:	2b03      	cmp	r3, #3
    3de0:	d855      	bhi.n	3e8e <z_arm_fault+0xea>
    3de2:	e8df f003 	tbb	[pc, r3]
    3de6:	4c04      	.short	0x4c04
    3de8:	4950      	.short	0x4950
		return NULL;
    3dea:	462e      	mov	r6, r5
    3dec:	e7f3      	b.n	3dd6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3dee:	4b2b      	ldr	r3, [pc, #172]	; (3e9c <z_arm_fault+0xf8>)
    3df0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3df2:	f014 0402 	ands.w	r4, r4, #2
    3df6:	d14a      	bne.n	3e8e <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3dfa:	2a00      	cmp	r2, #0
    3dfc:	db15      	blt.n	3e2a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3dfe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3e00:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3e04:	d011      	beq.n	3e2a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    3e06:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3e08:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    3e0c:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3e10:	4291      	cmp	r1, r2
    3e12:	d009      	beq.n	3e28 <z_arm_fault+0x84>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e16:	b2d2      	uxtb	r2, r2
    3e18:	b1fa      	cbz	r2, 3e5a <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
    3e1a:	2001      	movs	r0, #1
    3e1c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3e20:	f7ff ff98 	bl	3d54 <mem_manage_fault.constprop.0>
    3e24:	4604      	mov	r4, r0
		break;
    3e26:	e000      	b.n	3e2a <z_arm_fault+0x86>
			reason = esf->basic.r0;
    3e28:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e2e:	b993      	cbnz	r3, 3e56 <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3e30:	2220      	movs	r2, #32
    3e32:	4631      	mov	r1, r6
    3e34:	a802      	add	r0, sp, #8
    3e36:	f007 fb68 	bl	b50a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e3c:	b34d      	cbz	r5, 3e92 <z_arm_fault+0xee>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3e42:	b922      	cbnz	r2, 3e4e <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3e44:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3e48:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3e4c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3e4e:	4620      	mov	r0, r4
    3e50:	a902      	add	r1, sp, #8
    3e52:	f007 fb15 	bl	b480 <z_arm_fatal_error>
}
    3e56:	b00a      	add	sp, #40	; 0x28
    3e58:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e5c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    3e60:	d005      	beq.n	3e6e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    3e62:	2001      	movs	r0, #1
    3e64:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3e68:	f7ff ff56 	bl	3d18 <bus_fault.constprop.0>
    3e6c:	e7da      	b.n	3e24 <z_arm_fault+0x80>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3e6e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3e70:	0c24      	lsrs	r4, r4, #16
    3e72:	0424      	lsls	r4, r4, #16
    3e74:	2c00      	cmp	r4, #0
    3e76:	d0d8      	beq.n	3e2a <z_arm_fault+0x86>
		reason = usage_fault(esf);
    3e78:	f7ff ff38 	bl	3cec <usage_fault.constprop.0>
    3e7c:	e7d2      	b.n	3e24 <z_arm_fault+0x80>
		reason = mem_manage_fault(esf, 0, recoverable);
    3e7e:	2000      	movs	r0, #0
    3e80:	f10d 0107 	add.w	r1, sp, #7
    3e84:	e7cc      	b.n	3e20 <z_arm_fault+0x7c>
		reason = bus_fault(esf, 0, recoverable);
    3e86:	2000      	movs	r0, #0
    3e88:	f10d 0107 	add.w	r1, sp, #7
    3e8c:	e7ec      	b.n	3e68 <z_arm_fault+0xc4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3e8e:	2400      	movs	r4, #0
    3e90:	e7cb      	b.n	3e2a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3e92:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3e96:	f023 0301 	bic.w	r3, r3, #1
    3e9a:	e7d7      	b.n	3e4c <z_arm_fault+0xa8>
    3e9c:	e000ed00 	.word	0xe000ed00

00003ea0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3ea0:	4b04      	ldr	r3, [pc, #16]	; (3eb4 <z_arm_fault_init+0x14>)
    3ea2:	695a      	ldr	r2, [r3, #20]
    3ea4:	f042 0210 	orr.w	r2, r2, #16
    3ea8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    3eaa:	695a      	ldr	r2, [r3, #20]
    3eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3eb0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3eb2:	4770      	bx	lr
    3eb4:	e000ed00 	.word	0xe000ed00

00003eb8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3eb8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3ebc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3ec0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3ec2:	4672      	mov	r2, lr
	bl z_arm_fault
    3ec4:	f7ff ff6e 	bl	3da4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3ec8:	bd01      	pop	{r0, pc}
    3eca:	bf00      	nop

00003ecc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3ecc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ece:	2120      	movs	r1, #32
    3ed0:	4803      	ldr	r0, [pc, #12]	; (3ee0 <z_arm_interrupt_init+0x14>)
    3ed2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3ed4:	3301      	adds	r3, #1
    3ed6:	2b45      	cmp	r3, #69	; 0x45
    3ed8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3edc:	d1f9      	bne.n	3ed2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3ede:	4770      	bx	lr
    3ee0:	e000e100 	.word	0xe000e100

00003ee4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3ee4:	2000      	movs	r0, #0
    msr CONTROL, r0
    3ee6:	f380 8814 	msr	CONTROL, r0
    isb
    3eea:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    3eee:	2000      	movs	r0, #0
    msr MSPLIM, r0
    3ef0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    3ef4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3ef8:	f7fd fe90 	bl	1c1c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3efc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3efe:	490e      	ldr	r1, [pc, #56]	; (3f38 <__start+0x54>)
    str r0, [r1]
    3f00:	6008      	str	r0, [r1, #0]
    dsb
    3f02:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3f06:	480d      	ldr	r0, [pc, #52]	; (3f3c <__start+0x58>)
    msr msp, r0
    3f08:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3f0c:	f000 f83e 	bl	3f8c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3f10:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3f12:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3f16:	480a      	ldr	r0, [pc, #40]	; (3f40 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3f1c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3f1e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3f22:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3f26:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3f28:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3f2a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3f2e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3f32:	f7ff fe17 	bl	3b64 <z_arm_prep_c>
    3f36:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    3f38:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3f3c:	20061388 	.word	0x20061388
    ldr r0, =z_interrupt_stacks
    3f40:	200614c8 	.word	0x200614c8

00003f44 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3f44:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3f48:	4905      	ldr	r1, [pc, #20]	; (3f60 <sys_arch_reboot+0x1c>)
    3f4a:	4b06      	ldr	r3, [pc, #24]	; (3f64 <sys_arch_reboot+0x20>)
    3f4c:	68ca      	ldr	r2, [r1, #12]
    3f4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3f52:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3f54:	60cb      	str	r3, [r1, #12]
    3f56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3f5a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3f5c:	e7fd      	b.n	3f5a <sys_arch_reboot+0x16>
    3f5e:	bf00      	nop
    3f60:	e000ed00 	.word	0xe000ed00
    3f64:	05fa0004 	.word	0x05fa0004

00003f68 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    3f68:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    3f6a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3f6c:	4906      	ldr	r1, [pc, #24]	; (3f88 <z_arm_clear_arm_mpu_config+0x20>)
    3f6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    3f72:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    3f76:	4293      	cmp	r3, r2
    3f78:	d100      	bne.n	3f7c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3f7a:	4770      	bx	lr
  mpu->RNR = rnr;
    3f7c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    3f80:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3f84:	3301      	adds	r3, #1
    3f86:	e7f6      	b.n	3f76 <z_arm_clear_arm_mpu_config+0xe>
    3f88:	e000ed00 	.word	0xe000ed00

00003f8c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3f8c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3f8e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3f90:	2400      	movs	r4, #0
    3f92:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3f96:	f7ff ffe7 	bl	3f68 <z_arm_clear_arm_mpu_config>
    3f9a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3f9c:	f04f 30ff 	mov.w	r0, #4294967295
    3fa0:	4a0b      	ldr	r2, [pc, #44]	; (3fd0 <z_arm_init_arch_hw_at_boot+0x44>)
    3fa2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3fa6:	3301      	adds	r3, #1
    3fa8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    3faa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3fae:	d1f8      	bne.n	3fa2 <z_arm_init_arch_hw_at_boot+0x16>
    3fb0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3fb2:	f04f 30ff 	mov.w	r0, #4294967295
    3fb6:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3fba:	3301      	adds	r3, #1
    3fbc:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3fbe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3fc2:	d1f8      	bne.n	3fb6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    3fc4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3fc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fca:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3fce:	bd10      	pop	{r4, pc}
    3fd0:	e000e100 	.word	0xe000e100

00003fd4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3fd4:	4b08      	ldr	r3, [pc, #32]	; (3ff8 <z_impl_k_thread_abort+0x24>)
    3fd6:	689b      	ldr	r3, [r3, #8]
    3fd8:	4283      	cmp	r3, r0
    3fda:	d10b      	bne.n	3ff4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3fdc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3fe0:	b143      	cbz	r3, 3ff4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fe2:	4b06      	ldr	r3, [pc, #24]	; (3ffc <z_impl_k_thread_abort+0x28>)
    3fe4:	685a      	ldr	r2, [r3, #4]
    3fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3fea:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3ff2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3ff4:	f005 bacc 	b.w	9590 <z_thread_abort>
    3ff8:	2001c364 	.word	0x2001c364
    3ffc:	e000ed00 	.word	0xe000ed00

00004000 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    4000:	b40c      	push	{r2, r3}
    4002:	b510      	push	{r4, lr}
    4004:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    4006:	b909      	cbnz	r1, 400c <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    4008:	f10d 000b 	add.w	r0, sp, #11
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    400c:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    400e:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    4012:	ab09      	add	r3, sp, #36	; 0x24
    4014:	9a08      	ldr	r2, [sp, #32]
    4016:	9400      	str	r4, [sp, #0]
    4018:	a904      	add	r1, sp, #16
    401a:	4805      	ldr	r0, [pc, #20]	; (4030 <snprintf+0x30>)
    401c:	9303      	str	r3, [sp, #12]
    401e:	f7fd fb87 	bl	1730 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    4022:	9b04      	ldr	r3, [sp, #16]
    4024:	701c      	strb	r4, [r3, #0]
	return r;
}
    4026:	b006      	add	sp, #24
    4028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    402c:	b002      	add	sp, #8
    402e:	4770      	bx	lr
    4030:	0000b533 	.word	0x0000b533

00004034 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4034:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4036:	4801      	ldr	r0, [pc, #4]	; (403c <usbd_evt_put+0x8>)
    4038:	f009 bd7d 	b.w	db36 <k_queue_append>
    403c:	2000a320 	.word	0x2000a320

00004040 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4040:	4901      	ldr	r1, [pc, #4]	; (4048 <usbd_work_schedule+0x8>)
    4042:	4802      	ldr	r0, [pc, #8]	; (404c <usbd_work_schedule+0xc>)
    4044:	f009 bdbd 	b.w	dbc2 <k_work_submit_to_queue>
    4048:	2001bd60 	.word	0x2001bd60
    404c:	2000a4d0 	.word	0x2000a4d0

00004050 <endpoint_ctx>:
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4050:	f000 037f 	and.w	r3, r0, #127	; 0x7f
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4054:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4056:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4058:	d004      	beq.n	4064 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    405a:	f010 0f78 	tst.w	r0, #120	; 0x78
    405e:	d001      	beq.n	4064 <endpoint_ctx+0x14>
		return NULL;
    4060:	2000      	movs	r0, #0
    4062:	4770      	bx	lr
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4064:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4066:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    406a:	f000 0008 	and.w	r0, r0, #8
    406e:	da05      	bge.n	407c <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4070:	b958      	cbnz	r0, 408a <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[ep_num];
    4072:	4808      	ldr	r0, [pc, #32]	; (4094 <endpoint_ctx+0x44>)
    4074:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4078:	304c      	adds	r0, #76	; 0x4c
    407a:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    407c:	b938      	cbnz	r0, 408e <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    407e:	4805      	ldr	r0, [pc, #20]	; (4094 <endpoint_ctx+0x44>)
    4080:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4084:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    4088:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    408a:	4803      	ldr	r0, [pc, #12]	; (4098 <endpoint_ctx+0x48>)
    408c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    408e:	4803      	ldr	r0, [pc, #12]	; (409c <endpoint_ctx+0x4c>)
}
    4090:	4770      	bx	lr
    4092:	bf00      	nop
    4094:	2001bd38 	.word	0x2001bd38
    4098:	2001be84 	.word	0x2001be84
    409c:	2001bfa4 	.word	0x2001bfa4

000040a0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    40a0:	b513      	push	{r0, r1, r4, lr}
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    40a2:	2400      	movs	r4, #0
	IRQ_CONNECT(USBREGULATOR_IRQn,
    40a4:	2200      	movs	r2, #0
    40a6:	2101      	movs	r1, #1
    40a8:	2037      	movs	r0, #55	; 0x37
    40aa:	f7ff fd41 	bl	3b30 <z_arm_irq_priority_set>
	irq_enable(USBREGULATOR_IRQn);
    40ae:	2037      	movs	r0, #55	; 0x37
    40b0:	f7ff fd0c 	bl	3acc <arch_irq_enable>
	(void)nrfx_power_init(&power_config);
    40b4:	480a      	ldr	r0, [pc, #40]	; (40e0 <usb_init+0x40>)
    40b6:	f003 f97d 	bl	73b4 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    40ba:	480a      	ldr	r0, [pc, #40]	; (40e4 <usb_init+0x44>)
    40bc:	f004 fbd4 	bl	8868 <nrfx_usbreg_init>
	k_work_queue_start(&usbd_work_queue,
    40c0:	f04f 33ff 	mov.w	r3, #4294967295
    40c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    40c8:	4907      	ldr	r1, [pc, #28]	; (40e8 <usb_init+0x48>)
    40ca:	4808      	ldr	r0, [pc, #32]	; (40ec <usb_init+0x4c>)
    40cc:	9400      	str	r4, [sp, #0]
    40ce:	f005 f803 	bl	90d8 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    40d2:	4907      	ldr	r1, [pc, #28]	; (40f0 <usb_init+0x50>)
    40d4:	4807      	ldr	r0, [pc, #28]	; (40f4 <usb_init+0x54>)
    40d6:	f009 fd57 	bl	db88 <k_work_init>

	return 0;
}
    40da:	4620      	mov	r0, r4
    40dc:	b002      	add	sp, #8
    40de:	bd10      	pop	{r4, pc}
    40e0:	0000eb47 	.word	0x0000eb47
    40e4:	0000e4d4 	.word	0x0000e4d4
    40e8:	2005e788 	.word	0x2005e788
    40ec:	2000a4d0 	.word	0x2000a4d0
    40f0:	00004435 	.word	0x00004435
    40f4:	2001bd60 	.word	0x2001bd60

000040f8 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    40f8:	2200      	movs	r2, #0
    40fa:	2300      	movs	r3, #0
    40fc:	4801      	ldr	r0, [pc, #4]	; (4104 <usbd_evt_get+0xc>)
    40fe:	f004 be8f 	b.w	8e20 <z_impl_k_queue_get>
    4102:	bf00      	nop
    4104:	2000a320 	.word	0x2000a320

00004108 <usbd_evt_flush>:
{
    4108:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    410a:	4c05      	ldr	r4, [pc, #20]	; (4120 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    410c:	f7ff fff4 	bl	40f8 <usbd_evt_get>
		if (ev) {
    4110:	b120      	cbz	r0, 411c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4112:	1d01      	adds	r1, r0, #4
    4114:	4620      	mov	r0, r4
    4116:	f009 fc53 	bl	d9c0 <k_mem_slab_free>
	} while (ev != NULL);
    411a:	e7f7      	b.n	410c <usbd_evt_flush+0x4>
}
    411c:	bd10      	pop	{r4, pc}
    411e:	bf00      	nop
    4120:	2000a2a0 	.word	0x2000a2a0

00004124 <usbd_evt_alloc>:
{
    4124:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4126:	2300      	movs	r3, #0
    4128:	2200      	movs	r2, #0
    412a:	480e      	ldr	r0, [pc, #56]	; (4164 <usbd_evt_alloc+0x40>)
    412c:	a901      	add	r1, sp, #4
    412e:	f004 fcdd 	bl	8aec <k_mem_slab_alloc>
    4132:	b190      	cbz	r0, 415a <usbd_evt_alloc+0x36>
		usbd_evt_flush();
    4134:	f7ff ffe8 	bl	4108 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4138:	2200      	movs	r2, #0
    413a:	2300      	movs	r3, #0
    413c:	4809      	ldr	r0, [pc, #36]	; (4164 <usbd_evt_alloc+0x40>)
    413e:	a901      	add	r1, sp, #4
    4140:	f004 fcd4 	bl	8aec <k_mem_slab_alloc>
    4144:	b938      	cbnz	r0, 4156 <usbd_evt_alloc+0x32>
		ev->evt_type = USBD_EVT_REINIT;
    4146:	2304      	movs	r3, #4
		ev = (struct usbd_event *)block.data;
    4148:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
    414a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    414c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    414e:	f7ff ff71 	bl	4034 <usbd_evt_put>
		usbd_work_schedule();
    4152:	f7ff ff75 	bl	4040 <usbd_work_schedule>
		return NULL;
    4156:	2000      	movs	r0, #0
    4158:	e001      	b.n	415e <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
    415a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    415c:	6040      	str	r0, [r0, #4]
}
    415e:	b003      	add	sp, #12
    4160:	f85d fb04 	ldr.w	pc, [sp], #4
    4164:	2000a2a0 	.word	0x2000a2a0

00004168 <submit_dc_power_event>:
{
    4168:	b510      	push	{r4, lr}
    416a:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
    416c:	f7ff ffda 	bl	4124 <usbd_evt_alloc>
	if (!ev) {
    4170:	b160      	cbz	r0, 418c <submit_dc_power_event+0x24>
	ev->evt_type = USBD_EVT_POWER;
    4172:	2200      	movs	r2, #0
	ev->evt.pwr_evt.state = state;
    4174:	7204      	strb	r4, [r0, #8]
	ev->evt_type = USBD_EVT_POWER;
    4176:	7402      	strb	r2, [r0, #16]
	usbd_evt_put(ev);
    4178:	f7ff ff5c 	bl	4034 <usbd_evt_put>
	if (usbd_ctx.attached) {
    417c:	4b04      	ldr	r3, [pc, #16]	; (4190 <submit_dc_power_event+0x28>)
    417e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4182:	b11b      	cbz	r3, 418c <submit_dc_power_event+0x24>
}
    4184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    4188:	f7ff bf5a 	b.w	4040 <usbd_work_schedule>
}
    418c:	bd10      	pop	{r4, pc}
    418e:	bf00      	nop
    4190:	2001bd38 	.word	0x2001bd38

00004194 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
    4194:	7881      	ldrb	r1, [r0, #2]
{
    4196:	b570      	push	{r4, r5, r6, lr}
    4198:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    419a:	4608      	mov	r0, r1
    419c:	f7ff ff58 	bl	4050 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    41a0:	060b      	lsls	r3, r1, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
    41a2:	4604      	mov	r4, r0
		switch (p_event->data.eptransfer.status) {
    41a4:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    41a6:	d512      	bpl.n	41ce <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    41a8:	2d00      	cmp	r5, #0
    41aa:	d143      	bne.n	4234 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    41ac:	f7ff ffba 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    41b0:	4603      	mov	r3, r0
    41b2:	2800      	cmp	r0, #0
    41b4:	d03e      	beq.n	4234 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
    41b6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    41b8:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    41ba:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    41bc:	2203      	movs	r2, #3
    41be:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    41c0:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
    41c2:	f7ff ff37 	bl	4034 <usbd_evt_put>
}
    41c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
    41ca:	f7ff bf39 	b.w	4040 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    41ce:	b14d      	cbz	r5, 41e4 <usbd_event_transfer_data+0x50>
    41d0:	2d01      	cmp	r5, #1
    41d2:	d12f      	bne.n	4234 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    41d4:	f7ff ffa6 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    41d8:	4603      	mov	r3, r0
    41da:	b358      	cbz	r0, 4234 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    41dc:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    41de:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    41e0:	7305      	strb	r5, [r0, #12]
    41e2:	e7ed      	b.n	41c0 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    41e4:	f7ff ff9e 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    41e8:	b320      	cbz	r0, 4234 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    41ea:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    41ec:	4b12      	ldr	r3, [pc, #72]	; (4238 <usbd_event_transfer_data+0xa4>)
    41ee:	f012 0f80 	tst.w	r2, #128	; 0x80
    41f2:	f002 0108 	and.w	r1, r2, #8
    41f6:	d011      	beq.n	421c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    41f8:	b141      	cbz	r1, 420c <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    41fa:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    41fe:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    4200:	2301      	movs	r3, #1
    4202:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4204:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    4206:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4208:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    420a:	e7da      	b.n	41c2 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    420c:	2114      	movs	r1, #20
    420e:	f002 020f 	and.w	r2, r2, #15
    4212:	fb01 3302 	mla	r3, r1, r2, r3
    4216:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    421a:	e7f0      	b.n	41fe <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    421c:	b111      	cbz	r1, 4224 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    421e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4222:	e7ec      	b.n	41fe <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    4224:	2114      	movs	r1, #20
    4226:	f002 020f 	and.w	r2, r2, #15
    422a:	fb01 3302 	mla	r3, r1, r2, r3
    422e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4232:	e7e4      	b.n	41fe <usbd_event_transfer_data+0x6a>
}
    4234:	bd70      	pop	{r4, r5, r6, pc}
    4236:	bf00      	nop
    4238:	50036000 	.word	0x50036000

0000423c <usb_dc_power_event_handler>:
	switch (event) {
    423c:	2801      	cmp	r0, #1
{
    423e:	b507      	push	{r0, r1, r2, lr}
	switch (event) {
    4240:	d00f      	beq.n	4262 <usb_dc_power_event_handler+0x26>
    4242:	2802      	cmp	r0, #2
    4244:	d00e      	beq.n	4264 <usb_dc_power_event_handler+0x28>
    4246:	b948      	cbnz	r0, 425c <usb_dc_power_event_handler+0x20>
	z_impl_k_timer_start(timer, duration, period);
    4248:	2200      	movs	r2, #0
    424a:	2300      	movs	r3, #0
    424c:	4808      	ldr	r0, [pc, #32]	; (4270 <usb_dc_power_event_handler+0x34>)
    424e:	e9cd 2300 	strd	r2, r3, [sp]
    4252:	f645 129a 	movw	r2, #22938	; 0x599a
    4256:	2300      	movs	r3, #0
    4258:	f005 fbb8 	bl	99cc <z_impl_k_timer_start>
}
    425c:	b003      	add	sp, #12
    425e:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (event) {
    4262:	2000      	movs	r0, #0
}
    4264:	b003      	add	sp, #12
    4266:	f85d eb04 	ldr.w	lr, [sp], #4
	submit_dc_power_event(new_state);
    426a:	f7ff bf7d 	b.w	4168 <submit_dc_power_event>
    426e:	bf00      	nop
    4270:	2000a268 	.word	0x2000a268

00004274 <hfxo_stop.constprop.0.isra.0>:
    4274:	2200      	movs	r2, #0
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4276:	b510      	push	{r4, lr}
    4278:	490c      	ldr	r1, [pc, #48]	; (42ac <hfxo_stop.constprop.0.isra.0+0x38>)
    427a:	f101 0320 	add.w	r3, r1, #32
    427e:	e8d3 0fef 	ldaex	r0, [r3]
    4282:	2801      	cmp	r0, #1
    4284:	d103      	bne.n	428e <hfxo_stop.constprop.0.isra.0+0x1a>
    4286:	e8c3 2fe4 	stlex	r4, r2, [r3]
    428a:	2c00      	cmp	r4, #0
    428c:	d1f7      	bne.n	427e <hfxo_stop.constprop.0.isra.0+0xa>
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    428e:	d10b      	bne.n	42a8 <hfxo_stop.constprop.0.isra.0+0x34>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4290:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4292:	310c      	adds	r1, #12
    4294:	4620      	mov	r0, r4
    4296:	f006 f89e 	bl	a3d6 <onoff_cancel>

	if (rv == -EALREADY) {
    429a:	3078      	adds	r0, #120	; 0x78
    429c:	d104      	bne.n	42a8 <hfxo_stop.constprop.0.isra.0+0x34>
		rv = onoff_release(mgr);
    429e:	4620      	mov	r0, r4
}
    42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42a4:	f006 b872 	b.w	a38c <onoff_release>
    42a8:	bd10      	pop	{r4, pc}
    42aa:	bf00      	nop
    42ac:	2001bd38 	.word	0x2001bd38

000042b0 <usbd_event_handler>:
{
    42b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42b2:	4606      	mov	r6, r0
    42b4:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    42b6:	2214      	movs	r2, #20
    42b8:	2100      	movs	r1, #0
    42ba:	a803      	add	r0, sp, #12
    42bc:	f007 f930 	bl	b520 <memset>
	switch (p_event->type) {
    42c0:	7833      	ldrb	r3, [r6, #0]
    42c2:	3b01      	subs	r3, #1
    42c4:	2b05      	cmp	r3, #5
    42c6:	d821      	bhi.n	430c <usbd_event_handler+0x5c>
    42c8:	e8df f003 	tbb	[pc, r3]
    42cc:	1414037a 	.word	0x1414037a
    42d0:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    42d2:	2303      	movs	r3, #3
		evt.evt_type = USBD_EVT_POWER;
    42d4:	2400      	movs	r4, #0
		evt.evt.pwr_evt.state = USBD_RESUMED;
    42d6:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
    42da:	f7ff ff23 	bl	4124 <usbd_evt_alloc>
		if (!ev) {
    42de:	4603      	mov	r3, r0
    42e0:	b1a0      	cbz	r0, 430c <usbd_event_handler+0x5c>
		ev->evt = evt.evt;
    42e2:	f100 0208 	add.w	r2, r0, #8
		ev->evt_type = evt.evt_type;
    42e6:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    42e8:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    42ec:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    42f0:	4618      	mov	r0, r3
    42f2:	e01d      	b.n	4330 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    42f4:	2304      	movs	r3, #4
    42f6:	e7ed      	b.n	42d4 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    42f8:	78b1      	ldrb	r1, [r6, #2]
    42fa:	4608      	mov	r0, r1
    42fc:	f7ff fea8 	bl	4050 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    4300:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4302:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    4304:	b123      	cbz	r3, 4310 <usbd_event_handler+0x60>
    4306:	3b01      	subs	r3, #1
    4308:	2b02      	cmp	r3, #2
    430a:	d943      	bls.n	4394 <usbd_event_handler+0xe4>
}
    430c:	b009      	add	sp, #36	; 0x24
    430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4310:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    4312:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4314:	d513      	bpl.n	433e <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    4316:	2d00      	cmp	r5, #0
    4318:	d1f8      	bne.n	430c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    431a:	f7ff ff03 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    431e:	4603      	mov	r3, r0
    4320:	2800      	cmp	r0, #0
    4322:	d0f3      	beq.n	430c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4324:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4326:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    4328:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    432a:	2203      	movs	r2, #3
    432c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    432e:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    4330:	f7ff fe80 	bl	4034 <usbd_evt_put>
}
    4334:	b009      	add	sp, #36	; 0x24
    4336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    433a:	f7ff be81 	b.w	4040 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    433e:	b155      	cbz	r5, 4356 <usbd_event_handler+0xa6>
    4340:	2d01      	cmp	r5, #1
    4342:	d1e3      	bne.n	430c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    4344:	f7ff feee 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    4348:	4603      	mov	r3, r0
    434a:	2800      	cmp	r0, #0
    434c:	d0de      	beq.n	430c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    434e:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    4350:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4352:	7305      	strb	r5, [r0, #12]
    4354:	e7eb      	b.n	432e <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    4356:	f7ff fee5 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    435a:	4607      	mov	r7, r0
    435c:	2800      	cmp	r0, #0
    435e:	d0d5      	beq.n	430c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4360:	2301      	movs	r3, #1
    4362:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4364:	2302      	movs	r3, #2
			ev->evt.ep_evt.ep = ep_ctx;
    4366:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4368:	7303      	strb	r3, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    436a:	f104 010c 	add.w	r1, r4, #12
    436e:	78b0      	ldrb	r0, [r6, #2]
    4370:	f009 faa7 	bl	d8c2 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4374:	4a13      	ldr	r2, [pc, #76]	; (43c4 <usbd_event_handler+0x114>)
    4376:	68e1      	ldr	r1, [r4, #12]
    4378:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    437c:	428b      	cmp	r3, r1
    437e:	d906      	bls.n	438e <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4380:	1a5b      	subs	r3, r3, r1
    4382:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4386:	f003 ffcf 	bl	8328 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    438a:	4638      	mov	r0, r7
    438c:	e7d0      	b.n	4330 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    438e:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    4392:	e7fa      	b.n	438a <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    4394:	4630      	mov	r0, r6
}
    4396:	b009      	add	sp, #36	; 0x24
    4398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    439c:	f7ff befa 	b.w	4194 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    43a0:	a801      	add	r0, sp, #4
    43a2:	f003 ff9b 	bl	82dc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    43a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    43aa:	2b05      	cmp	r3, #5
    43ac:	d104      	bne.n	43b8 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    43ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
    43b2:	f013 0f60 	tst.w	r3, #96	; 0x60
    43b6:	d0a9      	beq.n	430c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    43b8:	4b03      	ldr	r3, [pc, #12]	; (43c8 <usbd_event_handler+0x118>)
			evt.evt_type = USBD_EVT_EP;
    43ba:	2401      	movs	r4, #1
			evt.evt.ep_evt.ep = ep_ctx;
    43bc:	9305      	str	r3, [sp, #20]
	if (put_evt) {
    43be:	e78c      	b.n	42da <usbd_event_handler+0x2a>
	switch (p_event->type) {
    43c0:	2402      	movs	r4, #2
    43c2:	e78a      	b.n	42da <usbd_event_handler+0x2a>
    43c4:	2001bd38 	.word	0x2001bd38
    43c8:	2001bea4 	.word	0x2001bea4

000043cc <eps_ctx_init>:
{
    43cc:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    43ce:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    43d0:	f064 007f 	orn	r0, r4, #127	; 0x7f
    43d4:	b2c0      	uxtb	r0, r0
    43d6:	f7ff fe3b 	bl	4050 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    43da:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    43dc:	f007 f8b8 	bl	b550 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    43e0:	2c08      	cmp	r4, #8
    43e2:	d1f5      	bne.n	43d0 <eps_ctx_init+0x4>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    43e4:	2400      	movs	r4, #0
    43e6:	4d0f      	ldr	r5, [pc, #60]	; (4424 <eps_ctx_init+0x58>)
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    43e8:	b2e0      	uxtb	r0, r4
    43ea:	f7ff fe31 	bl	4050 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    43ee:	6903      	ldr	r3, [r0, #16]
    43f0:	b903      	cbnz	r3, 43f4 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    43f2:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    43f4:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    43f6:	f007 f8ab 	bl	b550 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    43fa:	2c08      	cmp	r4, #8
    43fc:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4400:	d1f2      	bne.n	43e8 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    4402:	4c09      	ldr	r4, [pc, #36]	; (4428 <eps_ctx_init+0x5c>)
    4404:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    4408:	f007 f8a2 	bl	b550 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    440c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    4410:	b913      	cbnz	r3, 4418 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4412:	4b06      	ldr	r3, [pc, #24]	; (442c <eps_ctx_init+0x60>)
    4414:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    4418:	4805      	ldr	r0, [pc, #20]	; (4430 <eps_ctx_init+0x64>)
    441a:	f007 f899 	bl	b550 <ep_ctx_reset>
}
    441e:	2000      	movs	r0, #0
    4420:	bd38      	pop	{r3, r4, r5, pc}
    4422:	bf00      	nop
    4424:	2001bb38 	.word	0x2001bb38
    4428:	2001bd38 	.word	0x2001bd38
    442c:	2001b738 	.word	0x2001b738
    4430:	2001bfa4 	.word	0x2001bfa4

00004434 <usbd_work_handler>:
{
    4434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4438:	4607      	mov	r7, r0
	return get_usbd_ctx()->ready;
    443a:	4cae      	ldr	r4, [pc, #696]	; (46f4 <usbd_work_handler+0x2c0>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    443c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 46f8 <usbd_work_handler+0x2c4>
{
    4440:	b085      	sub	sp, #20
	while ((ev = usbd_evt_get()) != NULL) {
    4442:	f7ff fe59 	bl	40f8 <usbd_evt_get>
    4446:	b910      	cbnz	r0, 444e <usbd_work_handler+0x1a>
}
    4448:	b005      	add	sp, #20
    444a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    444e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4452:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4454:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4458:	b93b      	cbnz	r3, 446a <usbd_work_handler+0x36>
    445a:	2a00      	cmp	r2, #0
    445c:	f000 8086 	beq.w	456c <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4460:	4649      	mov	r1, r9
    4462:	4640      	mov	r0, r8
    4464:	f009 faac 	bl	d9c0 <k_mem_slab_free>
}
    4468:	e7eb      	b.n	4442 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    446a:	2a04      	cmp	r2, #4
    446c:	d8f8      	bhi.n	4460 <usbd_work_handler+0x2c>
    446e:	e8df f012 	tbh	[pc, r2, lsl #1]
    4472:	007d      	.short	0x007d
    4474:	00ff0005 	.word	0x00ff0005
    4478:	01300115 	.word	0x01300115
	switch (ep_evt->evt_type) {
    447c:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    447e:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    4480:	2b03      	cmp	r3, #3
    4482:	d8ed      	bhi.n	4460 <usbd_work_handler+0x2c>
    4484:	e8df f003 	tbb	[pc, r3]
    4488:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    448c:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    448e:	2208      	movs	r2, #8
    4490:	2100      	movs	r1, #0
    4492:	4630      	mov	r0, r6
    4494:	f007 f844 	bl	b520 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4498:	4b98      	ldr	r3, [pc, #608]	; (46fc <usbd_work_handler+0x2c8>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    449a:	4899      	ldr	r0, [pc, #612]	; (4700 <usbd_work_handler+0x2cc>)
    449c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    44a0:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    44a2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    44a6:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    44a8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    44ac:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    44b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    44b4:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    44b6:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    44ba:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    44be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    44c2:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    44c4:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    44c8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    44cc:	4631      	mov	r1, r6
    44ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    44d2:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    44d4:	80f3      	strh	r3, [r6, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    44d6:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    44d8:	f007 f817 	bl	b50a <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    44dc:	682b      	ldr	r3, [r5, #0]
    44de:	2100      	movs	r1, #0
    44e0:	7a68      	ldrb	r0, [r5, #9]
    44e2:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    44e4:	f996 3000 	ldrsb.w	r3, [r6]
    44e8:	2b00      	cmp	r3, #0
    44ea:	db06      	blt.n	44fa <usbd_work_handler+0xc6>
    44ec:	88f3      	ldrh	r3, [r6, #6]
    44ee:	b123      	cbz	r3, 44fa <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
    44f0:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    44f4:	f003 ff18 	bl	8328 <nrfx_usbd_setup_data_clear>
    44f8:	e7b2      	b.n	4460 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
    44fa:	2300      	movs	r3, #0
    44fc:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    4500:	e7ae      	b.n	4460 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
    4502:	7f6b      	ldrb	r3, [r5, #29]
    4504:	2b00      	cmp	r3, #0
    4506:	d0ab      	beq.n	4460 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
    4508:	7f2b      	ldrb	r3, [r5, #28]
    450a:	2b00      	cmp	r3, #0
    450c:	d0a8      	beq.n	4460 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
    450e:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4510:	f04f 32ff 	mov.w	r2, #4294967295
	ep_ctx->read_pending = false;
    4514:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4516:	f04f 33ff 	mov.w	r3, #4294967295
    451a:	487a      	ldr	r0, [pc, #488]	; (4704 <usbd_work_handler+0x2d0>)
	ep_ctx->read_complete = false;
    451c:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    451e:	f007 f82d 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4522:	696b      	ldr	r3, [r5, #20]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4524:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4526:	9301      	str	r3, [sp, #4]
    4528:	686b      	ldr	r3, [r5, #4]
    452a:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    452e:	7a68      	ldrb	r0, [r5, #9]
    4530:	f003 fd0a 	bl	7f48 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    4534:	4873      	ldr	r0, [pc, #460]	; (4704 <usbd_work_handler+0x2d0>)
    4536:	f007 f823 	bl	b580 <k_mutex_unlock.isra.0>
    453a:	e791      	b.n	4460 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    453c:	2101      	movs	r1, #1
    453e:	682b      	ldr	r3, [r5, #0]
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4540:	7a68      	ldrb	r0, [r5, #9]
    4542:	4798      	blx	r3
		break;
    4544:	e78c      	b.n	4460 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4546:	7aab      	ldrb	r3, [r5, #10]
    4548:	b96b      	cbnz	r3, 4566 <usbd_work_handler+0x132>
    454a:	7feb      	ldrb	r3, [r5, #31]
    454c:	b95b      	cbnz	r3, 4566 <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    454e:	486d      	ldr	r0, [pc, #436]	; (4704 <usbd_work_handler+0x2d0>)
    4550:	f04f 32ff 	mov.w	r2, #4294967295
    4554:	f04f 33ff 	mov.w	r3, #4294967295
    4558:	f007 f810 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    455c:	f003 ff18 	bl	8390 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4560:	4868      	ldr	r0, [pc, #416]	; (4704 <usbd_work_handler+0x2d0>)
    4562:	f007 f80d 	bl	b580 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4566:	2102      	movs	r1, #2
    4568:	682b      	ldr	r3, [r5, #0]
    456a:	e7e9      	b.n	4540 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
    456c:	7a02      	ldrb	r2, [r0, #8]
    456e:	2a04      	cmp	r2, #4
    4570:	f63f af76 	bhi.w	4460 <usbd_work_handler+0x2c>
    4574:	e8df f002 	tbb	[pc, r2]
    4578:	65210357 	.word	0x65210357
    457c:	71          	.byte	0x71
    457d:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    457e:	f003 fc93 	bl	7ea8 <nrfx_usbd_is_enabled>
    4582:	4605      	mov	r5, r0
    4584:	2800      	cmp	r0, #0
    4586:	f47f af6b 	bne.w	4460 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
    458a:	f003 fc31 	bl	7df0 <nrfx_usbd_enable>
    458e:	2301      	movs	r3, #1
    4590:	495d      	ldr	r1, [pc, #372]	; (4708 <usbd_work_handler+0x2d4>)
    4592:	e8d1 2fef 	ldaex	r2, [r1]
    4596:	2a00      	cmp	r2, #0
    4598:	d103      	bne.n	45a2 <usbd_work_handler+0x16e>
    459a:	e8c1 3fe0 	stlex	r0, r3, [r1]
    459e:	2800      	cmp	r0, #0
    45a0:	d1f7      	bne.n	4592 <usbd_work_handler+0x15e>
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    45a2:	f47f af5d 	bne.w	4460 <usbd_work_handler+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    45a6:	f841 5c10 	str.w	r5, [r1, #-16]
    45aa:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    45ae:	69e0      	ldr	r0, [r4, #28]
    45b0:	3914      	subs	r1, #20
    45b2:	6163      	str	r3, [r4, #20]
    45b4:	f005 fea1 	bl	a2fa <onoff_request>
    45b8:	e752      	b.n	4460 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
    45ba:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    45bc:	f065 007f 	orn	r0, r5, #127	; 0x7f
    45c0:	b2c0      	uxtb	r0, r0
    45c2:	f7ff fd45 	bl	4050 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    45c6:	7a03      	ldrb	r3, [r0, #8]
    45c8:	b113      	cbz	r3, 45d0 <usbd_work_handler+0x19c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    45ca:	7a40      	ldrb	r0, [r0, #9]
    45cc:	f004 f8ca 	bl	8764 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    45d0:	3501      	adds	r5, #1
    45d2:	2d08      	cmp	r5, #8
    45d4:	d1f2      	bne.n	45bc <usbd_work_handler+0x188>
		if (ep_ctx->cfg.en) {
    45d6:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    45da:	b11b      	cbz	r3, 45e4 <usbd_work_handler+0x1b0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    45dc:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    45e0:	f004 f8c0 	bl	8764 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    45e4:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    45e6:	b2e8      	uxtb	r0, r5
    45e8:	f7ff fd32 	bl	4050 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    45ec:	7a03      	ldrb	r3, [r0, #8]
    45ee:	b113      	cbz	r3, 45f6 <usbd_work_handler+0x1c2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    45f0:	7a40      	ldrb	r0, [r0, #9]
    45f2:	f004 f8b7 	bl	8764 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    45f6:	3501      	adds	r5, #1
    45f8:	2d08      	cmp	r5, #8
    45fa:	d1f4      	bne.n	45e6 <usbd_work_handler+0x1b2>
		if (ep_ctx->cfg.en) {
    45fc:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4600:	b11b      	cbz	r3, 460a <usbd_work_handler+0x1d6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4602:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4606:	f004 f8ad 	bl	8764 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    460a:	2001      	movs	r0, #1
    460c:	f003 fc26 	bl	7e5c <nrfx_usbd_start>
		ctx->ready = true;
    4610:	2301      	movs	r3, #1
    4612:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4616:	6823      	ldr	r3, [r4, #0]
    4618:	2b00      	cmp	r3, #0
    461a:	f43f af21 	beq.w	4460 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    461e:	2100      	movs	r1, #0
    4620:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4622:	4798      	blx	r3
    4624:	e71c      	b.n	4460 <usbd_work_handler+0x2c>
		ctx->ready = false;
    4626:	2500      	movs	r5, #0
    4628:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    462c:	f004 f828 	bl	8680 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4630:	f7ff fe20 	bl	4274 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4634:	6823      	ldr	r3, [r4, #0]
    4636:	2b00      	cmp	r3, #0
    4638:	f43f af12 	beq.w	4460 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    463c:	4629      	mov	r1, r5
    463e:	2004      	movs	r0, #4
    4640:	e7ef      	b.n	4622 <usbd_work_handler+0x1ee>
		if (dev_ready()) {
    4642:	2b00      	cmp	r3, #0
    4644:	f43f af0c 	beq.w	4460 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
    4648:	f004 f834 	bl	86b4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    464c:	6823      	ldr	r3, [r4, #0]
    464e:	2b00      	cmp	r3, #0
    4650:	f43f af06 	beq.w	4460 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4654:	2100      	movs	r1, #0
    4656:	2005      	movs	r0, #5
    4658:	e7e3      	b.n	4622 <usbd_work_handler+0x1ee>
		if (ctx->status_cb && dev_ready()) {
    465a:	6822      	ldr	r2, [r4, #0]
    465c:	2a00      	cmp	r2, #0
    465e:	f43f aeff 	beq.w	4460 <usbd_work_handler+0x2c>
    4662:	2b00      	cmp	r3, #0
    4664:	f43f aefc 	beq.w	4460 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4668:	2100      	movs	r1, #0
    466a:	2006      	movs	r0, #6
    466c:	4790      	blx	r2
    466e:	e6f7      	b.n	4460 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4670:	f107 0510 	add.w	r5, r7, #16
    4674:	f04f 33ff 	mov.w	r3, #4294967295
    4678:	f04f 32ff 	mov.w	r2, #4294967295
    467c:	4628      	mov	r0, r5
    467e:	f006 ff7d 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4682:	f7ff fea3 	bl	43cc <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4686:	4628      	mov	r0, r5
    4688:	f006 ff7a 	bl	b580 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    468c:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4690:	2b00      	cmp	r3, #0
    4692:	f43f aee5 	beq.w	4460 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
    4696:	2100      	movs	r1, #0
    4698:	2001      	movs	r0, #1
    469a:	e7c2      	b.n	4622 <usbd_work_handler+0x1ee>
	if (ep_ctx->cfg.en) {
    469c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    46a0:	b17b      	cbz	r3, 46c2 <usbd_work_handler+0x28e>
		ep_ctx->read_pending = true;
    46a2:	2501      	movs	r5, #1
    46a4:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    46a8:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    46ac:	f7ff fd3a 	bl	4124 <usbd_evt_alloc>
		if (!ev) {
    46b0:	b138      	cbz	r0, 46c2 <usbd_work_handler+0x28e>
		ev->evt.ep_evt.ep = ep_ctx;
    46b2:	4a16      	ldr	r2, [pc, #88]	; (470c <usbd_work_handler+0x2d8>)
		ev->evt_type = USBD_EVT_EP;
    46b4:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    46b6:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    46b8:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    46ba:	f7ff fcbb 	bl	4034 <usbd_evt_put>
		usbd_work_schedule();
    46be:	f7ff fcbf 	bl	4040 <usbd_work_schedule>
			if (ctx->status_cb) {
    46c2:	f857 3c28 	ldr.w	r3, [r7, #-40]
    46c6:	2b00      	cmp	r3, #0
    46c8:	f43f aeca 	beq.w	4460 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
    46cc:	2100      	movs	r1, #0
    46ce:	200a      	movs	r0, #10
    46d0:	e7a7      	b.n	4622 <usbd_work_handler+0x1ee>
	nrfx_power_usbevt_disable();
    46d2:	f004 f8b1 	bl	8838 <nrfx_usbreg_disable>
	nrfx_usbd_disable();
    46d6:	f003 ffd3 	bl	8680 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    46da:	f003 fb7f 	bl	7ddc <nrfx_usbd_uninit>
	usbd_evt_flush();
    46de:	f7ff fd13 	bl	4108 <usbd_evt_flush>
	ret = eps_ctx_init();
    46e2:	f7ff fe73 	bl	43cc <eps_ctx_init>
	nrfx_power_usbevt_enable();
    46e6:	f004 f89f 	bl	8828 <nrfx_usbreg_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    46ea:	4809      	ldr	r0, [pc, #36]	; (4710 <usbd_work_handler+0x2dc>)
    46ec:	f003 fbe6 	bl	7ebc <nrfx_usbd_init>
}
    46f0:	e6b6      	b.n	4460 <usbd_work_handler+0x2c>
    46f2:	bf00      	nop
    46f4:	2001bd38 	.word	0x2001bd38
    46f8:	2000a2a0 	.word	0x2000a2a0
    46fc:	50036000 	.word	0x50036000
    4700:	2001bd3c 	.word	0x2001bd3c
    4704:	2001bd70 	.word	0x2001bd70
    4708:	2001bd58 	.word	0x2001bd58
    470c:	2001bfa4 	.word	0x2001bfa4
    4710:	000042b1 	.word	0x000042b1

00004714 <usb_dc_attach>:
{
    4714:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4716:	4d1a      	ldr	r5, [pc, #104]	; (4780 <usb_dc_attach+0x6c>)
    4718:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    471c:	bb54      	cbnz	r4, 4774 <usb_dc_attach+0x60>
	return z_impl_k_mutex_init(mutex);
    471e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4722:	f009 f995 	bl	da50 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4726:	2002      	movs	r0, #2
    4728:	f000 fb92 	bl	4e50 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    472c:	4622      	mov	r2, r4
    472e:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    4730:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4732:	2036      	movs	r0, #54	; 0x36
    4734:	f7ff f9fc 	bl	3b30 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    4738:	4812      	ldr	r0, [pc, #72]	; (4784 <usb_dc_attach+0x70>)
    473a:	f003 fbbf 	bl	7ebc <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    473e:	4b12      	ldr	r3, [pc, #72]	; (4788 <usb_dc_attach+0x74>)
    4740:	4298      	cmp	r0, r3
    4742:	d119      	bne.n	4778 <usb_dc_attach+0x64>
	nrfx_power_usbevt_enable();
    4744:	f004 f870 	bl	8828 <nrfx_usbreg_enable>
	ret = eps_ctx_init();
    4748:	f7ff fe40 	bl	43cc <eps_ctx_init>
	if (ret == 0) {
    474c:	4604      	mov	r4, r0
    474e:	b910      	cbnz	r0, 4756 <usb_dc_attach+0x42>
		ctx->attached = true;
    4750:	2301      	movs	r3, #1
    4752:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4756:	4b0d      	ldr	r3, [pc, #52]	; (478c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	b10b      	cbz	r3, 4760 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    475c:	f7ff fc70 	bl	4040 <usbd_work_schedule>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get(NRF_USBREG_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    4760:	4b0b      	ldr	r3, [pc, #44]	; (4790 <usb_dc_attach+0x7c>)
    4762:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_usbreg_state_t nrfx_usbreg_usbstatus_get(void)
{
    uint32_t status = nrf_usbreg_status_get(NRF_USBREGULATOR);
    if (0 == (status & NRF_USBREG_STATUS_VBUSDETECT_MASK))
    4766:	07db      	lsls	r3, r3, #31
    4768:	d502      	bpl.n	4770 <usb_dc_attach+0x5c>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    476a:	2000      	movs	r0, #0
    476c:	f7ff fd66 	bl	423c <usb_dc_power_event_handler>
}
    4770:	4620      	mov	r0, r4
    4772:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    4774:	2400      	movs	r4, #0
    4776:	e7fb      	b.n	4770 <usb_dc_attach+0x5c>
		return -EIO;
    4778:	f06f 0404 	mvn.w	r4, #4
    477c:	e7f8      	b.n	4770 <usb_dc_attach+0x5c>
    477e:	bf00      	nop
    4780:	2001bd38 	.word	0x2001bd38
    4784:	000042b1 	.word	0x000042b1
    4788:	0bad0000 	.word	0x0bad0000
    478c:	2000a320 	.word	0x2000a320
    4790:	50037000 	.word	0x50037000

00004794 <usb_dc_detach>:
{
    4794:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4796:	f04f 32ff 	mov.w	r2, #4294967295
    479a:	f04f 33ff 	mov.w	r3, #4294967295
    479e:	481f      	ldr	r0, [pc, #124]	; (481c <usb_dc_detach+0x88>)
    47a0:	f006 feec 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    47a4:	2400      	movs	r4, #0
	usbd_evt_flush();
    47a6:	f7ff fcaf 	bl	4108 <usbd_evt_flush>
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    47aa:	f064 007f 	orn	r0, r4, #127	; 0x7f
    47ae:	b2c0      	uxtb	r0, r0
    47b0:	f7ff fc4e 	bl	4050 <endpoint_ctx>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    47b4:	2100      	movs	r1, #0
    47b6:	2220      	movs	r2, #32
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    47b8:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    47ba:	f006 feb1 	bl	b520 <memset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    47be:	2c08      	cmp	r4, #8
    47c0:	d1f3      	bne.n	47aa <usb_dc_detach+0x16>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    47c2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    47c4:	b2e0      	uxtb	r0, r4
    47c6:	f7ff fc43 	bl	4050 <endpoint_ctx>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    47ca:	2100      	movs	r1, #0
    47cc:	2220      	movs	r2, #32
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    47ce:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    47d0:	f006 fea6 	bl	b520 <memset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    47d4:	2c08      	cmp	r4, #8
    47d6:	d1f5      	bne.n	47c4 <usb_dc_detach+0x30>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    47d8:	2220      	movs	r2, #32
    47da:	2100      	movs	r1, #0
    47dc:	4810      	ldr	r0, [pc, #64]	; (4820 <usb_dc_detach+0x8c>)
    47de:	f006 fe9f 	bl	b520 <memset>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    47e2:	2220      	movs	r2, #32
    47e4:	2100      	movs	r1, #0
    47e6:	480f      	ldr	r0, [pc, #60]	; (4824 <usb_dc_detach+0x90>)
    47e8:	f006 fe9a 	bl	b520 <memset>
	if (nrfx_usbd_is_enabled()) {
    47ec:	f003 fb5c 	bl	7ea8 <nrfx_usbd_is_enabled>
    47f0:	b108      	cbz	r0, 47f6 <usb_dc_detach+0x62>
		nrfx_usbd_disable();
    47f2:	f003 ff45 	bl	8680 <nrfx_usbd_disable>
	if (nrfx_usbd_is_initialized()) {
    47f6:	f003 fb4f 	bl	7e98 <nrfx_usbd_is_initialized>
    47fa:	b108      	cbz	r0, 4800 <usb_dc_detach+0x6c>
		nrfx_usbd_uninit();
    47fc:	f003 faee 	bl	7ddc <nrfx_usbd_uninit>
	ctx->attached = false;
    4800:	2400      	movs	r4, #0
	(void)hfxo_stop(ctx);
    4802:	f7ff fd37 	bl	4274 <hfxo_stop.constprop.0.isra.0>
	nrfx_power_usbevt_disable();
    4806:	f004 f817 	bl	8838 <nrfx_usbreg_disable>
	ctx->attached = false;
    480a:	4807      	ldr	r0, [pc, #28]	; (4828 <usb_dc_detach+0x94>)
    480c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    4810:	3038      	adds	r0, #56	; 0x38
    4812:	f006 feb5 	bl	b580 <k_mutex_unlock.isra.0>
}
    4816:	4620      	mov	r0, r4
    4818:	bd10      	pop	{r4, pc}
    481a:	bf00      	nop
    481c:	2001bd70 	.word	0x2001bd70
    4820:	2001be84 	.word	0x2001be84
    4824:	2001bfa4 	.word	0x2001bfa4
    4828:	2001bd38 	.word	0x2001bd38

0000482c <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    482c:	4b07      	ldr	r3, [pc, #28]	; (484c <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    482e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4832:	b13a      	cbz	r2, 4844 <usb_dc_set_address+0x18>
    4834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    4838:	2b00      	cmp	r3, #0
    483a:	bf0c      	ite	eq
    483c:	f06f 0012 	mvneq.w	r0, #18
    4840:	2000      	movne	r0, #0
    4842:	4770      	bx	lr
		return -ENODEV;
    4844:	f06f 0012 	mvn.w	r0, #18
}
    4848:	4770      	bx	lr
    484a:	bf00      	nop
    484c:	2001bd38 	.word	0x2001bd38

00004850 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
    4850:	4b0f      	ldr	r3, [pc, #60]	; (4890 <usb_dc_ep_configure+0x40>)
{
    4852:	4601      	mov	r1, r0
	if (!dev_attached()) {
    4854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4858:	b510      	push	{r4, lr}
	if (!dev_attached()) {
    485a:	b1b3      	cbz	r3, 488a <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    485c:	7804      	ldrb	r4, [r0, #0]
    485e:	4620      	mov	r0, r4
    4860:	f7ff fbf6 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    4864:	b910      	cbnz	r0, 486c <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    4866:	f06f 0015 	mvn.w	r0, #21
}
    486a:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    486c:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    486e:	790b      	ldrb	r3, [r1, #4]
    4870:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4872:	8849      	ldrh	r1, [r1, #2]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4874:	0723      	lsls	r3, r4, #28
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    4876:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4878:	d402      	bmi.n	4880 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    487a:	1e4b      	subs	r3, r1, #1
    487c:	420b      	tst	r3, r1
    487e:	d1f2      	bne.n	4866 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4880:	4620      	mov	r0, r4
    4882:	f009 f819 	bl	d8b8 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4886:	2000      	movs	r0, #0
    4888:	e7ef      	b.n	486a <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    488a:	f06f 0012 	mvn.w	r0, #18
    488e:	e7ec      	b.n	486a <usb_dc_ep_configure+0x1a>
    4890:	2001bd38 	.word	0x2001bd38

00004894 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
    4894:	4b12      	ldr	r3, [pc, #72]	; (48e0 <usb_dc_ep_set_stall+0x4c>)
{
    4896:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    4898:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    489c:	b510      	push	{r4, lr}
	if (!dev_attached() || !dev_ready()) {
    489e:	b1ca      	cbz	r2, 48d4 <usb_dc_ep_set_stall+0x40>
    48a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    48a4:	b1b3      	cbz	r3, 48d4 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    48a6:	f7ff fbd3 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    48aa:	4604      	mov	r4, r0
    48ac:	b1a8      	cbz	r0, 48da <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    48ae:	7a83      	ldrb	r3, [r0, #10]
    48b0:	2b01      	cmp	r3, #1
    48b2:	d012      	beq.n	48da <usb_dc_ep_set_stall+0x46>
    48b4:	d907      	bls.n	48c6 <usb_dc_ep_set_stall+0x32>
    48b6:	3b02      	subs	r3, #2
    48b8:	2b01      	cmp	r3, #1
    48ba:	d907      	bls.n	48cc <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.len = 0U;
    48bc:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
    48be:	6963      	ldr	r3, [r4, #20]
	ep_ctx->buf.len = 0U;
    48c0:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    48c2:	61a3      	str	r3, [r4, #24]
}
    48c4:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    48c6:	f003 fd6b 	bl	83a0 <nrfx_usbd_setup_stall>
		break;
    48ca:	e7f7      	b.n	48bc <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    48cc:	4608      	mov	r0, r1
    48ce:	f003 fcd7 	bl	8280 <nrfx_usbd_ep_stall>
		break;
    48d2:	e7f3      	b.n	48bc <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    48d4:	f06f 0012 	mvn.w	r0, #18
    48d8:	e7f4      	b.n	48c4 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    48da:	f06f 0015 	mvn.w	r0, #21
    48de:	e7f1      	b.n	48c4 <usb_dc_ep_set_stall+0x30>
    48e0:	2001bd38 	.word	0x2001bd38

000048e4 <usb_dc_ep_clear_stall>:
{
    48e4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    48e6:	4b0e      	ldr	r3, [pc, #56]	; (4920 <usb_dc_ep_clear_stall+0x3c>)
{
    48e8:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    48ea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    48ee:	b182      	cbz	r2, 4912 <usb_dc_ep_clear_stall+0x2e>
    48f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    48f4:	b16b      	cbz	r3, 4912 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    48f6:	f7ff fbab 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    48fa:	b168      	cbz	r0, 4918 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    48fc:	f015 0408 	ands.w	r4, r5, #8
    4900:	d10a      	bne.n	4918 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4902:	4628      	mov	r0, r5
    4904:	f003 fcde 	bl	82c4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4908:	4628      	mov	r0, r5
    490a:	f003 ff7d 	bl	8808 <nrfx_usbd_ep_stall_clear>
	return 0;
    490e:	4620      	mov	r0, r4
}
    4910:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4912:	f06f 0012 	mvn.w	r0, #18
    4916:	e7fb      	b.n	4910 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    4918:	f06f 0015 	mvn.w	r0, #21
    491c:	e7f8      	b.n	4910 <usb_dc_ep_clear_stall+0x2c>
    491e:	bf00      	nop
    4920:	2001bd38 	.word	0x2001bd38

00004924 <usb_dc_ep_is_stalled>:
{
    4924:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4926:	4b0c      	ldr	r3, [pc, #48]	; (4958 <usb_dc_ep_is_stalled+0x34>)
{
    4928:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    492a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    492e:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4930:	b162      	cbz	r2, 494c <usb_dc_ep_is_stalled+0x28>
    4932:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4936:	b14b      	cbz	r3, 494c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4938:	f7ff fb8a 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    493c:	b148      	cbz	r0, 4952 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    493e:	b141      	cbz	r1, 4952 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4940:	4628      	mov	r0, r5
    4942:	f003 fca5 	bl	8290 <nrfx_usbd_ep_stall_check>
    4946:	7020      	strb	r0, [r4, #0]
	return 0;
    4948:	2000      	movs	r0, #0
}
    494a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    494c:	f06f 0012 	mvn.w	r0, #18
    4950:	e7fb      	b.n	494a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4952:	f06f 0015 	mvn.w	r0, #21
    4956:	e7f8      	b.n	494a <usb_dc_ep_is_stalled+0x26>
    4958:	2001bd38 	.word	0x2001bd38

0000495c <usb_dc_ep_enable>:
{
    495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    495e:	4f13      	ldr	r7, [pc, #76]	; (49ac <usb_dc_ep_enable+0x50>)
{
    4960:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4962:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    4966:	b1bb      	cbz	r3, 4998 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    4968:	f7ff fb72 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    496c:	4605      	mov	r5, r0
    496e:	b1b0      	cbz	r0, 499e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4970:	0723      	lsls	r3, r4, #28
    4972:	d405      	bmi.n	4980 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4974:	4620      	mov	r0, r4
    4976:	f003 fca5 	bl	82c4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    497a:	4620      	mov	r0, r4
    497c:	f003 ff44 	bl	8808 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4980:	7a2e      	ldrb	r6, [r5, #8]
    4982:	b97e      	cbnz	r6, 49a4 <usb_dc_ep_enable+0x48>
	ep_ctx->cfg.en = true;
    4984:	2301      	movs	r3, #1
	if (dev_ready()) {
    4986:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    498a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    498c:	b118      	cbz	r0, 4996 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    498e:	4620      	mov	r0, r4
    4990:	f003 fee8 	bl	8764 <nrfx_usbd_ep_enable>
	return 0;
    4994:	4630      	mov	r0, r6
}
    4996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    4998:	f06f 0012 	mvn.w	r0, #18
    499c:	e7fb      	b.n	4996 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    499e:	f06f 0015 	mvn.w	r0, #21
    49a2:	e7f8      	b.n	4996 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    49a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    49a8:	e7f5      	b.n	4996 <usb_dc_ep_enable+0x3a>
    49aa:	bf00      	nop
    49ac:	2001bd38 	.word	0x2001bd38

000049b0 <usb_dc_ep_disable>:
{
    49b0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    49b2:	4b11      	ldr	r3, [pc, #68]	; (49f8 <usb_dc_ep_disable+0x48>)
{
    49b4:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    49b6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    49ba:	b19a      	cbz	r2, 49e4 <usb_dc_ep_disable+0x34>
    49bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    49c0:	b183      	cbz	r3, 49e4 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    49c2:	f7ff fb45 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    49c6:	4605      	mov	r5, r0
    49c8:	b178      	cbz	r0, 49ea <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    49ca:	7a03      	ldrb	r3, [r0, #8]
    49cc:	b183      	cbz	r3, 49f0 <usb_dc_ep_disable+0x40>
	ep_ctx->write_in_progress = false;
    49ce:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    49d0:	4608      	mov	r0, r1
    49d2:	f003 fe9f 	bl	8714 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    49d6:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    49d8:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    49da:	f006 fdb9 	bl	b550 <ep_ctx_reset>
	return 0;
    49de:	4620      	mov	r0, r4
	ep_ctx->cfg.en = false;
    49e0:	722c      	strb	r4, [r5, #8]
}
    49e2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    49e4:	f06f 0012 	mvn.w	r0, #18
    49e8:	e7fb      	b.n	49e2 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    49ea:	f06f 0015 	mvn.w	r0, #21
    49ee:	e7f8      	b.n	49e2 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    49f0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    49f4:	e7f5      	b.n	49e2 <usb_dc_ep_disable+0x32>
    49f6:	bf00      	nop
    49f8:	2001bd38 	.word	0x2001bd38

000049fc <usb_dc_ep_write>:
{
    49fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4a00:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 4ae0 <usb_dc_ep_write+0xe4>
{
    4a04:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    4a06:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    4a0a:	4607      	mov	r7, r0
    4a0c:	4689      	mov	r9, r1
    4a0e:	4616      	mov	r6, r2
    4a10:	b085      	sub	sp, #20
	if (!dev_attached() || !dev_ready()) {
    4a12:	2b00      	cmp	r3, #0
    4a14:	d05d      	beq.n	4ad2 <usb_dc_ep_write+0xd6>
    4a16:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d059      	beq.n	4ad2 <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4a1e:	0603      	lsls	r3, r0, #24
    4a20:	d55a      	bpl.n	4ad8 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
    4a22:	f7ff fb15 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    4a26:	4605      	mov	r5, r0
    4a28:	2800      	cmp	r0, #0
    4a2a:	d055      	beq.n	4ad8 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
    4a2c:	7a03      	ldrb	r3, [r0, #8]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d052      	beq.n	4ad8 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4a32:	f04f 33ff 	mov.w	r3, #4294967295
    4a36:	f04f 32ff 	mov.w	r2, #4294967295
    4a3a:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4a3e:	f006 fd9d 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4a42:	7fab      	ldrb	r3, [r5, #30]
    4a44:	b14b      	cbz	r3, 4a5a <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    4a46:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4a4a:	f006 fd99 	bl	b580 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4a4e:	f06f 040a 	mvn.w	r4, #10
}
    4a52:	4620      	mov	r0, r4
    4a54:	b005      	add	sp, #20
    4a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    4a5a:	b916      	cbnz	r6, 4a62 <usb_dc_ep_write+0x66>
    4a5c:	7feb      	ldrb	r3, [r5, #31]
    4a5e:	b103      	cbz	r3, 4a62 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
    4a60:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4a62:	7aab      	ldrb	r3, [r5, #10]
    4a64:	b9bb      	cbnz	r3, 4a96 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4a66:	b15e      	cbz	r6, 4a80 <usb_dc_ep_write+0x84>
    4a68:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4a6c:	42b3      	cmp	r3, r6
    4a6e:	d907      	bls.n	4a80 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4a70:	686a      	ldr	r2, [r5, #4]
    4a72:	fbb6 f3f2 	udiv	r3, r6, r2
    4a76:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4a7a:	b90b      	cbnz	r3, 4a80 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
    4a7c:	2301      	movs	r3, #1
    4a7e:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4a80:	f003 fc96 	bl	83b0 <nrfx_usbd_last_setup_dir_get>
    4a84:	42b8      	cmp	r0, r7
    4a86:	d006      	beq.n	4a96 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
    4a88:	f003 fc82 	bl	8390 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4a8c:	4815      	ldr	r0, [pc, #84]	; (4ae4 <usb_dc_ep_write+0xe8>)
    4a8e:	f006 fd77 	bl	b580 <k_mutex_unlock.isra.0>
		return 0;
    4a92:	2400      	movs	r4, #0
    4a94:	e7dd      	b.n	4a52 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
    4a96:	2301      	movs	r3, #1
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4a98:	f04f 0800 	mov.w	r8, #0
	ep_ctx->write_in_progress = true;
    4a9c:	77ab      	strb	r3, [r5, #30]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4a9e:	4638      	mov	r0, r7
    4aa0:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4aa2:	e9cd 9601 	strd	r9, r6, [sp, #4]
    4aa6:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4aaa:	f003 fa4d 	bl	7f48 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4aae:	4b0e      	ldr	r3, [pc, #56]	; (4ae8 <usb_dc_ep_write+0xec>)
    4ab0:	4298      	cmp	r0, r3
    4ab2:	d007      	beq.n	4ac4 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
    4ab4:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    4ab8:	b10c      	cbz	r4, 4abe <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
    4aba:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
    4abe:	f06f 0404 	mvn.w	r4, #4
    4ac2:	e002      	b.n	4aca <usb_dc_ep_write+0xce>
		if (ret_bytes) {
    4ac4:	b10c      	cbz	r4, 4aca <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
    4ac6:	6026      	str	r6, [r4, #0]
	int result = 0;
    4ac8:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    4aca:	4806      	ldr	r0, [pc, #24]	; (4ae4 <usb_dc_ep_write+0xe8>)
    4acc:	f006 fd58 	bl	b580 <k_mutex_unlock.isra.0>
	return result;
    4ad0:	e7bf      	b.n	4a52 <usb_dc_ep_write+0x56>
		return -ENODEV;
    4ad2:	f06f 0412 	mvn.w	r4, #18
    4ad6:	e7bc      	b.n	4a52 <usb_dc_ep_write+0x56>
		return -EINVAL;
    4ad8:	f06f 0415 	mvn.w	r4, #21
    4adc:	e7b9      	b.n	4a52 <usb_dc_ep_write+0x56>
    4ade:	bf00      	nop
    4ae0:	2001bd38 	.word	0x2001bd38
    4ae4:	2001bd70 	.word	0x2001bd70
    4ae8:	0bad0000 	.word	0x0bad0000

00004aec <usb_dc_ep_read_wait>:
{
    4aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4af0:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    4af2:	4b20      	ldr	r3, [pc, #128]	; (4b74 <usb_dc_ep_read_wait+0x88>)
{
    4af4:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4af6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4afa:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4afc:	2a00      	cmp	r2, #0
    4afe:	d033      	beq.n	4b68 <usb_dc_ep_read_wait+0x7c>
    4b00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4b04:	b383      	cbz	r3, 4b68 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4b06:	0603      	lsls	r3, r0, #24
    4b08:	d431      	bmi.n	4b6e <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4b0a:	b901      	cbnz	r1, 4b0e <usb_dc_ep_read_wait+0x22>
    4b0c:	bb7f      	cbnz	r7, 4b6e <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    4b0e:	f7ff fa9f 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    4b12:	4604      	mov	r4, r0
    4b14:	b358      	cbz	r0, 4b6e <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    4b16:	7a03      	ldrb	r3, [r0, #8]
    4b18:	b34b      	cbz	r3, 4b6e <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4b1a:	f04f 33ff 	mov.w	r3, #4294967295
    4b1e:	f04f 32ff 	mov.w	r2, #4294967295
    4b22:	4815      	ldr	r0, [pc, #84]	; (4b78 <usb_dc_ep_read_wait+0x8c>)
    4b24:	f006 fd2a 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4b28:	68e3      	ldr	r3, [r4, #12]
    4b2a:	46b8      	mov	r8, r7
    4b2c:	429f      	cmp	r7, r3
    4b2e:	bf28      	it	cs
    4b30:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    4b32:	b946      	cbnz	r6, 4b46 <usb_dc_ep_read_wait+0x5a>
    4b34:	b93f      	cbnz	r7, 4b46 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    4b36:	b105      	cbz	r5, 4b3a <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    4b38:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4b3a:	480f      	ldr	r0, [pc, #60]	; (4b78 <usb_dc_ep_read_wait+0x8c>)
    4b3c:	f006 fd20 	bl	b580 <k_mutex_unlock.isra.0>
		return 0;
    4b40:	2000      	movs	r0, #0
}
    4b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    4b46:	4642      	mov	r2, r8
    4b48:	4630      	mov	r0, r6
    4b4a:	69a1      	ldr	r1, [r4, #24]
    4b4c:	f006 fcdd 	bl	b50a <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    4b50:	69a3      	ldr	r3, [r4, #24]
    4b52:	4443      	add	r3, r8
    4b54:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    4b56:	68e3      	ldr	r3, [r4, #12]
    4b58:	eba3 0308 	sub.w	r3, r3, r8
    4b5c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    4b5e:	2d00      	cmp	r5, #0
    4b60:	d0eb      	beq.n	4b3a <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    4b62:	f8c5 8000 	str.w	r8, [r5]
    4b66:	e7e8      	b.n	4b3a <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    4b68:	f06f 0012 	mvn.w	r0, #18
    4b6c:	e7e9      	b.n	4b42 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    4b6e:	f06f 0015 	mvn.w	r0, #21
    4b72:	e7e6      	b.n	4b42 <usb_dc_ep_read_wait+0x56>
    4b74:	2001bd38 	.word	0x2001bd38
    4b78:	2001bd70 	.word	0x2001bd70

00004b7c <usb_dc_ep_read_continue>:
{
    4b7c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    4b7e:	4d1e      	ldr	r5, [pc, #120]	; (4bf8 <usb_dc_ep_read_continue+0x7c>)
{
    4b80:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    4b82:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    4b86:	b382      	cbz	r2, 4bea <usb_dc_ep_read_continue+0x6e>
    4b88:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    4b8c:	b36a      	cbz	r2, 4bea <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4b8e:	061b      	lsls	r3, r3, #24
    4b90:	d42e      	bmi.n	4bf0 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    4b92:	f7ff fa5d 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    4b96:	4604      	mov	r4, r0
    4b98:	b350      	cbz	r0, 4bf0 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    4b9a:	7a03      	ldrb	r3, [r0, #8]
    4b9c:	b343      	cbz	r3, 4bf0 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4b9e:	f04f 33ff 	mov.w	r3, #4294967295
    4ba2:	f04f 32ff 	mov.w	r2, #4294967295
    4ba6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4baa:	f006 fce7 	bl	b57c <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    4bae:	68e3      	ldr	r3, [r4, #12]
    4bb0:	b9b3      	cbnz	r3, 4be0 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    4bb2:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4bb4:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4bb6:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4bb8:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4bba:	7f63      	ldrb	r3, [r4, #29]
    4bbc:	b183      	cbz	r3, 4be0 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    4bbe:	f7ff fab1 	bl	4124 <usbd_evt_alloc>
			if (!ev) {
    4bc2:	b930      	cbnz	r0, 4bd2 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    4bc4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4bc8:	f006 fcda 	bl	b580 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4bcc:	f06f 000b 	mvn.w	r0, #11
}
    4bd0:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    4bd2:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4bd4:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4bd6:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4bd8:	f7ff fa2c 	bl	4034 <usbd_evt_put>
			usbd_work_schedule();
    4bdc:	f7ff fa30 	bl	4040 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    4be0:	4806      	ldr	r0, [pc, #24]	; (4bfc <usb_dc_ep_read_continue+0x80>)
    4be2:	f006 fccd 	bl	b580 <k_mutex_unlock.isra.0>
	return 0;
    4be6:	2000      	movs	r0, #0
    4be8:	e7f2      	b.n	4bd0 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4bea:	f06f 0012 	mvn.w	r0, #18
    4bee:	e7ef      	b.n	4bd0 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    4bf0:	f06f 0015 	mvn.w	r0, #21
    4bf4:	e7ec      	b.n	4bd0 <usb_dc_ep_read_continue+0x54>
    4bf6:	bf00      	nop
    4bf8:	2001bd38 	.word	0x2001bd38
    4bfc:	2001bd70 	.word	0x2001bd70

00004c00 <usb_dc_ep_set_callback>:
{
    4c00:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    4c02:	4b08      	ldr	r3, [pc, #32]	; (4c24 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    4c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4c08:	b12b      	cbz	r3, 4c16 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    4c0a:	f7ff fa21 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    4c0e:	b128      	cbz	r0, 4c1c <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    4c10:	6001      	str	r1, [r0, #0]
	return 0;
    4c12:	2000      	movs	r0, #0
}
    4c14:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4c16:	f06f 0012 	mvn.w	r0, #18
    4c1a:	e7fb      	b.n	4c14 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    4c1c:	f06f 0015 	mvn.w	r0, #21
    4c20:	e7f8      	b.n	4c14 <usb_dc_ep_set_callback+0x14>
    4c22:	bf00      	nop
    4c24:	2001bd38 	.word	0x2001bd38

00004c28 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4c28:	4b01      	ldr	r3, [pc, #4]	; (4c30 <usb_dc_set_status_callback+0x8>)
    4c2a:	6018      	str	r0, [r3, #0]
}
    4c2c:	4770      	bx	lr
    4c2e:	bf00      	nop
    4c30:	2001bd38 	.word	0x2001bd38

00004c34 <usb_dc_ep_mps>:
{
    4c34:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    4c36:	4b07      	ldr	r3, [pc, #28]	; (4c54 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    4c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4c3c:	b123      	cbz	r3, 4c48 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    4c3e:	f7ff fa07 	bl	4050 <endpoint_ctx>
	if (!ep_ctx) {
    4c42:	b120      	cbz	r0, 4c4e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    4c44:	6840      	ldr	r0, [r0, #4]
}
    4c46:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4c48:	f06f 0012 	mvn.w	r0, #18
    4c4c:	e7fb      	b.n	4c46 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    4c4e:	f06f 0015 	mvn.w	r0, #21
    4c52:	e7f8      	b.n	4c46 <usb_dc_ep_mps+0x12>
    4c54:	2001bd38 	.word	0x2001bd38

00004c58 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4c58:	4b08      	ldr	r3, [pc, #32]	; (4c7c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4c5a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4c5c:	1ac3      	subs	r3, r0, r3
{
    4c5e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4c60:	4907      	ldr	r1, [pc, #28]	; (4c80 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    4c62:	109b      	asrs	r3, r3, #2
{
    4c64:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4c66:	4359      	muls	r1, r3
    4c68:	2240      	movs	r2, #64	; 0x40
    4c6a:	4806      	ldr	r0, [pc, #24]	; (4c84 <onoff_stop+0x2c>)
    4c6c:	f006 fccd 	bl	b60a <stop>
	notify(mgr, res);
    4c70:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4c72:	4601      	mov	r1, r0
	notify(mgr, res);
    4c74:	4620      	mov	r0, r4
}
    4c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4c7a:	4718      	bx	r3
    4c7c:	2001bfd8 	.word	0x2001bfd8
    4c80:	b6db6db7 	.word	0xb6db6db7
    4c84:	0000dff0 	.word	0x0000dff0

00004c88 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c88:	2340      	movs	r3, #64	; 0x40
{
    4c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4c8c:	4c0b      	ldr	r4, [pc, #44]	; (4cbc <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c8e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    4c90:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c92:	460b      	mov	r3, r1
{
    4c94:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c96:	490a      	ldr	r1, [pc, #40]	; (4cc0 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    4c98:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c9a:	4361      	muls	r1, r4
{
    4c9c:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c9e:	4a09      	ldr	r2, [pc, #36]	; (4cc4 <onoff_start+0x3c>)
    4ca0:	4809      	ldr	r0, [pc, #36]	; (4cc8 <onoff_start+0x40>)
    4ca2:	f006 fcde 	bl	b662 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4ca6:	1e01      	subs	r1, r0, #0
    4ca8:	da05      	bge.n	4cb6 <onoff_start+0x2e>
		notify(mgr, err);
    4caa:	4630      	mov	r0, r6
    4cac:	462b      	mov	r3, r5
	}
}
    4cae:	b002      	add	sp, #8
    4cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4cb4:	4718      	bx	r3
}
    4cb6:	b002      	add	sp, #8
    4cb8:	bd70      	pop	{r4, r5, r6, pc}
    4cba:	bf00      	nop
    4cbc:	2001bfd8 	.word	0x2001bfd8
    4cc0:	b6db6db7 	.word	0xb6db6db7
    4cc4:	0000b6d3 	.word	0x0000b6d3
    4cc8:	0000dff0 	.word	0x0000dff0

00004ccc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4cd0:	2200      	movs	r2, #0
    4cd2:	2101      	movs	r1, #1
{
    4cd4:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4cd6:	2005      	movs	r0, #5
    4cd8:	f7fe ff2a 	bl	3b30 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4cdc:	4811      	ldr	r0, [pc, #68]	; (4d24 <clk_init+0x58>)
    4cde:	f001 ff03 	bl	6ae8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4ce2:	4b11      	ldr	r3, [pc, #68]	; (4d28 <clk_init+0x5c>)
    4ce4:	4298      	cmp	r0, r3
    4ce6:	d119      	bne.n	4d1c <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4ce8:	f001 ff0e 	bl	6b08 <nrfx_clock_enable>
    4cec:	2400      	movs	r4, #0
	return &data->mgr[type];
    4cee:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4cf2:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4cf4:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4d2c <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    4cf8:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4cfa:	4649      	mov	r1, r9
    4cfc:	fb08 5004 	mla	r0, r8, r4, r5
    4d00:	f005 fae8 	bl	a2d4 <onoff_manager_init>
		if (err < 0) {
    4d04:	2800      	cmp	r0, #0
    4d06:	db07      	blt.n	4d18 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d08:	2301      	movs	r3, #1
    4d0a:	fb07 5504 	mla	r5, r7, r4, r5
	for (enum clock_control_nrf_type i = 0;
    4d0e:	441c      	add	r4, r3
    4d10:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d12:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    4d14:	d1f0      	bne.n	4cf8 <clk_init+0x2c>
	}

	return 0;
    4d16:	2000      	movs	r0, #0
}
    4d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    4d1c:	f06f 0004 	mvn.w	r0, #4
    4d20:	e7fa      	b.n	4d18 <clk_init+0x4c>
    4d22:	bf00      	nop
    4d24:	00004d65 	.word	0x00004d65
    4d28:	0bad0000 	.word	0x0bad0000
    4d2c:	0000e518 	.word	0x0000e518

00004d30 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4d30:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4d32:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    4d34:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    4d36:	434b      	muls	r3, r1
    4d38:	4808      	ldr	r0, [pc, #32]	; (4d5c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    4d3a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4d3c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    4d3e:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    4d40:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    4d44:	4418      	add	r0, r3
	sub_data->cb = NULL;
    4d46:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    4d48:	f006 fc4c 	bl	b5e4 <set_on_state>
	if (callback) {
    4d4c:	b12d      	cbz	r5, 4d5a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4d4e:	4632      	mov	r2, r6
    4d50:	462b      	mov	r3, r5
}
    4d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4d56:	4802      	ldr	r0, [pc, #8]	; (4d60 <clkstarted_handle.constprop.0+0x30>)
    4d58:	4718      	bx	r3
}
    4d5a:	bd70      	pop	{r4, r5, r6, pc}
    4d5c:	2001bfd8 	.word	0x2001bfd8
    4d60:	0000dff0 	.word	0x0000dff0

00004d64 <clock_event_handler>:
	switch (event) {
    4d64:	2805      	cmp	r0, #5
    4d66:	d811      	bhi.n	4d8c <clock_event_handler+0x28>
    4d68:	e8df f000 	tbb	[pc, r0]
    4d6c:	10100e03 	.word	0x10100e03
    4d70:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4d72:	4b07      	ldr	r3, [pc, #28]	; (4d90 <clock_event_handler+0x2c>)
    4d74:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4d76:	f010 0007 	ands.w	r0, r0, #7
    4d7a:	d107      	bne.n	4d8c <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4d7c:	f7ff bfd8 	b.w	4d30 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4d80:	2002      	movs	r0, #2
    4d82:	e7fb      	b.n	4d7c <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4d84:	2003      	movs	r0, #3
    4d86:	e7f9      	b.n	4d7c <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4d88:	2001      	movs	r0, #1
    4d8a:	e7f7      	b.n	4d7c <clock_event_handler+0x18>
}
    4d8c:	4770      	bx	lr
    4d8e:	bf00      	nop
    4d90:	2001bfd8 	.word	0x2001bfd8

00004d94 <generic_hfclk_start>:
{
    4d94:	b508      	push	{r3, lr}
	__asm__ volatile(
    4d96:	f04f 0320 	mov.w	r3, #32
    4d9a:	f3ef 8111 	mrs	r1, BASEPRI
    4d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    4da2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4da6:	4a12      	ldr	r2, [pc, #72]	; (4df0 <generic_hfclk_start+0x5c>)
    4da8:	6813      	ldr	r3, [r2, #0]
    4daa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4dae:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4db2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4db4:	d00c      	beq.n	4dd0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4db6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4dba:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4dbe:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4dc2:	f013 0301 	ands.w	r3, r3, #1
    4dc6:	d003      	beq.n	4dd0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4dc8:	480a      	ldr	r0, [pc, #40]	; (4df4 <generic_hfclk_start+0x60>)
    4dca:	f006 fc0b 	bl	b5e4 <set_on_state>
			already_started = true;
    4dce:	2301      	movs	r3, #1
	__asm__ volatile(
    4dd0:	f381 8811 	msr	BASEPRI, r1
    4dd4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4dd8:	b123      	cbz	r3, 4de4 <generic_hfclk_start+0x50>
}
    4dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4dde:	2000      	movs	r0, #0
    4de0:	f7ff bfa6 	b.w	4d30 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4de4:	2001      	movs	r0, #1
}
    4de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4dea:	f008 bc1f 	b.w	d62c <nrfx_clock_start>
    4dee:	bf00      	nop
    4df0:	2001c078 	.word	0x2001c078
    4df4:	2001c050 	.word	0x2001c050

00004df8 <api_blocking_start>:
{
    4df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4dfa:	2200      	movs	r2, #0
    4dfc:	2301      	movs	r3, #1
    4dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4e02:	466b      	mov	r3, sp
    4e04:	4a08      	ldr	r2, [pc, #32]	; (4e28 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4e06:	f8cd d000 	str.w	sp, [sp]
    4e0a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4e0e:	f006 fc59 	bl	b6c4 <api_start>
	if (err < 0) {
    4e12:	2800      	cmp	r0, #0
    4e14:	db05      	blt.n	4e22 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4e1a:	2300      	movs	r3, #0
    4e1c:	4668      	mov	r0, sp
    4e1e:	f004 f853 	bl	8ec8 <z_impl_k_sem_take>
}
    4e22:	b005      	add	sp, #20
    4e24:	f85d fb04 	ldr.w	pc, [sp], #4
    4e28:	0000b709 	.word	0x0000b709

00004e2c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4e2c:	4b07      	ldr	r3, [pc, #28]	; (4e4c <generic_hfclk_stop+0x20>)
    4e2e:	e8d3 2fef 	ldaex	r2, [r3]
    4e32:	f022 0102 	bic.w	r1, r2, #2
    4e36:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4e3a:	2800      	cmp	r0, #0
    4e3c:	d1f7      	bne.n	4e2e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4e3e:	07d3      	lsls	r3, r2, #31
    4e40:	d402      	bmi.n	4e48 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4e42:	2001      	movs	r0, #1
    4e44:	f008 bc52 	b.w	d6ec <nrfx_clock_stop>
}
    4e48:	4770      	bx	lr
    4e4a:	bf00      	nop
    4e4c:	2001c078 	.word	0x2001c078

00004e50 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    4e50:	b2c3      	uxtb	r3, r0
}
    4e52:	201c      	movs	r0, #28
    4e54:	4a01      	ldr	r2, [pc, #4]	; (4e5c <z_nrf_clock_control_get_onoff+0xc>)
    4e56:	fb03 2000 	mla	r0, r3, r0, r2
    4e5a:	4770      	bx	lr
    4e5c:	2001bfd8 	.word	0x2001bfd8

00004e60 <z_nrf_clock_control_lf_on>:
{
    4e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4e64:	2201      	movs	r2, #1
    4e66:	4607      	mov	r7, r0
    4e68:	4937      	ldr	r1, [pc, #220]	; (4f48 <z_nrf_clock_control_lf_on+0xe8>)
    4e6a:	e8d1 3fef 	ldaex	r3, [r1]
    4e6e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    4e72:	2800      	cmp	r0, #0
    4e74:	d1f9      	bne.n	4e6a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    4e76:	b933      	cbnz	r3, 4e86 <z_nrf_clock_control_lf_on+0x26>
    4e78:	4934      	ldr	r1, [pc, #208]	; (4f4c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    4e7a:	4835      	ldr	r0, [pc, #212]	; (4f50 <z_nrf_clock_control_lf_on+0xf0>)
    4e7c:	604b      	str	r3, [r1, #4]
    4e7e:	60cb      	str	r3, [r1, #12]
    4e80:	608a      	str	r2, [r1, #8]
    4e82:	f005 fa3a 	bl	a2fa <onoff_request>
	switch (start_mode) {
    4e86:	1e7b      	subs	r3, r7, #1
    4e88:	2b01      	cmp	r3, #1
    4e8a:	d82f      	bhi.n	4eec <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4e8c:	2f01      	cmp	r7, #1
    4e8e:	d107      	bne.n	4ea0 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4e90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4e98:	f003 0303 	and.w	r3, r3, #3
    4e9c:	2b02      	cmp	r3, #2
    4e9e:	d025      	beq.n	4eec <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ea0:	f008 fdb7 	bl	da12 <k_is_in_isr>
    4ea4:	4604      	mov	r4, r0
    4ea6:	b918      	cbnz	r0, 4eb0 <z_nrf_clock_control_lf_on+0x50>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    4ea8:	4b2a      	ldr	r3, [pc, #168]	; (4f54 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    4eaa:	781b      	ldrb	r3, [r3, #0]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d144      	bne.n	4f3a <z_nrf_clock_control_lf_on+0xda>
	__asm__ volatile(
    4eb0:	f04f 0320 	mov.w	r3, #32
    4eb4:	f3ef 8611 	mrs	r6, BASEPRI
    4eb8:	f383 8812 	msr	BASEPRI_MAX, r3
    4ebc:	f3bf 8f6f 	isb	sy
    4ec0:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ec2:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ec6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4f58 <z_nrf_clock_control_lf_on+0xf8>
    4eca:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ece:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    4ed2:	03d2      	lsls	r2, r2, #15
    4ed4:	d50c      	bpl.n	4ef0 <z_nrf_clock_control_lf_on+0x90>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4ed6:	f003 0303 	and.w	r3, r3, #3
    4eda:	2b02      	cmp	r3, #2
    4edc:	d001      	beq.n	4ee2 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4ede:	2f01      	cmp	r7, #1
    4ee0:	d106      	bne.n	4ef0 <z_nrf_clock_control_lf_on+0x90>
	if (isr_mode) {
    4ee2:	b324      	cbz	r4, 4f2e <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    4ee4:	f386 8811 	msr	BASEPRI, r6
    4ee8:	f3bf 8f6f 	isb	sy
}
    4eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4ef0:	b1c4      	cbz	r4, 4f24 <z_nrf_clock_control_lf_on+0xc4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4ef2:	4630      	mov	r0, r6
    4ef4:	f7fe fde0 	bl	3ab8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4ef8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4efc:	b2db      	uxtb	r3, r3
    4efe:	2b01      	cmp	r3, #1
    4f00:	d1e3      	bne.n	4eca <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4f02:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4f06:	2a00      	cmp	r2, #0
    4f08:	d0df      	beq.n	4eca <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f0a:	2200      	movs	r2, #0
    4f0c:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4f10:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4f14:	2202      	movs	r2, #2
    4f16:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    4f1a:	2220      	movs	r2, #32
    4f1c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f20:	60ab      	str	r3, [r5, #8]
}
    4f22:	e7d2      	b.n	4eca <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    4f24:	2100      	movs	r1, #0
    4f26:	2021      	movs	r0, #33	; 0x21
    4f28:	f004 fb12 	bl	9550 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4f2c:	e7e4      	b.n	4ef8 <z_nrf_clock_control_lf_on+0x98>
    p_reg->INTENSET = mask;
    4f2e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f32:	2202      	movs	r2, #2
    4f34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4f38:	e7d8      	b.n	4eec <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    4f3a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f3e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    4f40:	4606      	mov	r6, r0
    4f42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4f46:	e7bc      	b.n	4ec2 <z_nrf_clock_control_lf_on+0x62>
    4f48:	2001c07c 	.word	0x2001c07c
    4f4c:	2001bfc8 	.word	0x2001bfc8
    4f50:	2001bff4 	.word	0x2001bff4
    4f54:	2005e386 	.word	0x2005e386
    4f58:	e000e100 	.word	0xe000e100

00004f5c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4f5c:	b530      	push	{r4, r5, lr}
	return port->config;
    4f5e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4f60:	f001 051f 	and.w	r5, r1, #31
    4f64:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4f66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4f6a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    4f6e:	b085      	sub	sp, #20
    4f70:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    4f74:	d105      	bne.n	4f82 <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    4f76:	4628      	mov	r0, r5
    4f78:	f002 f874 	bl	7064 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    4f7c:	2000      	movs	r0, #0
}
    4f7e:	b005      	add	sp, #20
    4f80:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    4f82:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f86:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4f8a:	d133      	bne.n	4ff4 <gpio_nrfx_pin_interrupt_configure+0x98>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4f90:	bf0c      	ite	eq
    4f92:	2304      	moveq	r3, #4
    4f94:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f96:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4f9a:	6883      	ldr	r3, [r0, #8]
    4f9c:	fa23 f101 	lsr.w	r1, r3, r1
    4fa0:	07c9      	lsls	r1, r1, #31
    4fa2:	d419      	bmi.n	4fd8 <gpio_nrfx_pin_interrupt_configure+0x7c>
    4fa4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4fa8:	d116      	bne.n	4fd8 <gpio_nrfx_pin_interrupt_configure+0x7c>
        case 1: return NRF_P1;
    4faa:	4a1e      	ldr	r2, [pc, #120]	; (5024 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4fac:	481e      	ldr	r0, [pc, #120]	; (5028 <gpio_nrfx_pin_interrupt_configure+0xcc>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4fae:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
    4fb0:	2901      	cmp	r1, #1
    4fb2:	bf08      	it	eq
    4fb4:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    4fb6:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4fba:	3380      	adds	r3, #128	; 0x80
    4fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4fc0:	07db      	lsls	r3, r3, #31
    4fc2:	d409      	bmi.n	4fd8 <gpio_nrfx_pin_interrupt_configure+0x7c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4fc4:	f10d 0407 	add.w	r4, sp, #7
    4fc8:	4621      	mov	r1, r4
    4fca:	4628      	mov	r0, r5
    4fcc:	f001 ffb0 	bl	6f30 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4fd0:	4b16      	ldr	r3, [pc, #88]	; (502c <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4fd2:	4298      	cmp	r0, r3
    4fd4:	d019      	beq.n	500a <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    4fd6:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4fd8:	2300      	movs	r3, #0
    4fda:	4628      	mov	r0, r5
    4fdc:	4619      	mov	r1, r3
    4fde:	aa02      	add	r2, sp, #8
    4fe0:	f001 fe80 	bl	6ce4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4fe4:	4b12      	ldr	r3, [pc, #72]	; (5030 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    4fe6:	4298      	cmp	r0, r3
    4fe8:	d118      	bne.n	501c <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4fea:	2101      	movs	r1, #1
    4fec:	4628      	mov	r0, r5
    4fee:	f001 fff3 	bl	6fd8 <nrfx_gpiote_trigger_enable>
    4ff2:	e7c3      	b.n	4f7c <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4ff4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4ff8:	d005      	beq.n	5006 <gpio_nrfx_pin_interrupt_configure+0xaa>
    4ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4ffe:	bf0c      	ite	eq
    5000:	2302      	moveq	r3, #2
    5002:	2301      	movne	r3, #1
    5004:	e7c7      	b.n	4f96 <gpio_nrfx_pin_interrupt_configure+0x3a>
    5006:	2303      	movs	r3, #3
    5008:	e7c5      	b.n	4f96 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    500a:	4620      	mov	r0, r4
    500c:	f001 ffde 	bl	6fcc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5010:	4b07      	ldr	r3, [pc, #28]	; (5030 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    5012:	4298      	cmp	r0, r3
    5014:	d0df      	beq.n	4fd6 <gpio_nrfx_pin_interrupt_configure+0x7a>
				return -ENOMEM;
    5016:	f06f 000b 	mvn.w	r0, #11
    501a:	e7b0      	b.n	4f7e <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    501c:	f06f 0015 	mvn.w	r0, #21
    5020:	e7ad      	b.n	4f7e <gpio_nrfx_pin_interrupt_configure+0x22>
    5022:	bf00      	nop
    5024:	50842500 	.word	0x50842500
    5028:	50842800 	.word	0x50842800
    502c:	0bad0004 	.word	0x0bad0004
    5030:	0bad0000 	.word	0x0bad0000

00005034 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5034:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5036:	f001 ffb9 	bl	6fac <nrfx_gpiote_is_init>
    503a:	4604      	mov	r4, r0
    503c:	b968      	cbnz	r0, 505a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    503e:	f001 ff8d 	bl	6f5c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5042:	4b08      	ldr	r3, [pc, #32]	; (5064 <gpio_nrfx_init+0x30>)
    5044:	4298      	cmp	r0, r3
    5046:	d10a      	bne.n	505e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5048:	4621      	mov	r1, r4
    504a:	4807      	ldr	r0, [pc, #28]	; (5068 <gpio_nrfx_init+0x34>)
    504c:	f001 ff6a 	bl	6f24 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5050:	4622      	mov	r2, r4
    5052:	2105      	movs	r1, #5
    5054:	200d      	movs	r0, #13
    5056:	f7fe fd6b 	bl	3b30 <z_arm_irq_priority_set>
		return 0;
    505a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    505c:	bd10      	pop	{r4, pc}
		return -EIO;
    505e:	f06f 0004 	mvn.w	r0, #4
    5062:	e7fb      	b.n	505c <gpio_nrfx_init+0x28>
    5064:	0bad0000 	.word	0x0bad0000
    5068:	0000506d 	.word	0x0000506d

0000506c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    506c:	0942      	lsrs	r2, r0, #5
{
    506e:	4603      	mov	r3, r0
    5070:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5072:	d002      	beq.n	507a <nrfx_gpio_handler+0xe>
    5074:	2a01      	cmp	r2, #1
    5076:	d015      	beq.n	50a4 <nrfx_gpio_handler+0x38>
}
    5078:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    507a:	4e0b      	ldr	r6, [pc, #44]	; (50a8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    507c:	6932      	ldr	r2, [r6, #16]
    507e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5080:	2900      	cmp	r1, #0
    5082:	d0f9      	beq.n	5078 <nrfx_gpio_handler+0xc>
    5084:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    5086:	f003 031f 	and.w	r3, r3, #31
	return node->next;
    508a:	680c      	ldr	r4, [r1, #0]
    508c:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    508e:	688a      	ldr	r2, [r1, #8]
    5090:	402a      	ands	r2, r5
    5092:	d002      	beq.n	509a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5094:	4630      	mov	r0, r6
    5096:	684b      	ldr	r3, [r1, #4]
    5098:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    509a:	2c00      	cmp	r4, #0
    509c:	d0ec      	beq.n	5078 <nrfx_gpio_handler+0xc>
    509e:	4621      	mov	r1, r4
    50a0:	6824      	ldr	r4, [r4, #0]
    50a2:	e7f4      	b.n	508e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50a4:	4e01      	ldr	r6, [pc, #4]	; (50ac <nrfx_gpio_handler+0x40>)
    50a6:	e7e9      	b.n	507c <nrfx_gpio_handler+0x10>
    50a8:	0000e008 	.word	0x0000e008
    50ac:	0000e020 	.word	0x0000e020

000050b0 <gpio_nrfx_pin_configure>:
{
    50b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    50b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    50b8:	f001 061f 	and.w	r6, r1, #31
    50bc:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    50c0:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    50c2:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    50c6:	4614      	mov	r4, r2
    50c8:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    50ca:	4630      	mov	r0, r6
    50cc:	f10d 0103 	add.w	r1, sp, #3
    50d0:	f001 ff2e 	bl	6f30 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    50d4:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    50d8:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    50da:	d10b      	bne.n	50f4 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    50dc:	4630      	mov	r0, r6
    50de:	f001 ffe9 	bl	70b4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    50e2:	4b42      	ldr	r3, [pc, #264]	; (51ec <gpio_nrfx_pin_configure+0x13c>)
    50e4:	4599      	cmp	r9, r3
    50e6:	d103      	bne.n	50f0 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    50e8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    50ec:	f001 ff68 	bl	6fc0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    50f0:	2000      	movs	r0, #0
    50f2:	e056      	b.n	51a2 <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    50f4:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    50f6:	4630      	mov	r0, r6
    50f8:	4619      	mov	r1, r3
    50fa:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    50fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5100:	f001 fdf0 	bl	6ce4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5104:	4b39      	ldr	r3, [pc, #228]	; (51ec <gpio_nrfx_pin_configure+0x13c>)
    5106:	4298      	cmp	r0, r3
    5108:	d002      	beq.n	5110 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    510a:	f06f 0015 	mvn.w	r0, #21
    510e:	e048      	b.n	51a2 <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
    5110:	4581      	cmp	r9, r0
    5112:	d103      	bne.n	511c <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    5114:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5118:	f001 ff52 	bl	6fc0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    511c:	03a5      	lsls	r5, r4, #14
    511e:	d552      	bpl.n	51c6 <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5120:	f240 3306 	movw	r3, #774	; 0x306
    5124:	4023      	ands	r3, r4
    5126:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    512a:	d03d      	beq.n	51a8 <gpio_nrfx_pin_configure+0xf8>
    512c:	d80c      	bhi.n	5148 <gpio_nrfx_pin_configure+0x98>
    512e:	2b06      	cmp	r3, #6
    5130:	d015      	beq.n	515e <gpio_nrfx_pin_configure+0xae>
    5132:	d804      	bhi.n	513e <gpio_nrfx_pin_configure+0x8e>
    5134:	b19b      	cbz	r3, 515e <gpio_nrfx_pin_configure+0xae>
    5136:	2b02      	cmp	r3, #2
    5138:	d1e7      	bne.n	510a <gpio_nrfx_pin_configure+0x5a>
    513a:	2304      	movs	r3, #4
    513c:	e00f      	b.n	515e <gpio_nrfx_pin_configure+0xae>
    513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5142:	d1e2      	bne.n	510a <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    5144:	2301      	movs	r3, #1
    5146:	e00a      	b.n	515e <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5148:	f240 2202 	movw	r2, #514	; 0x202
    514c:	4293      	cmp	r3, r2
    514e:	d02d      	beq.n	51ac <gpio_nrfx_pin_configure+0xfc>
    5150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5154:	d02c      	beq.n	51b0 <gpio_nrfx_pin_configure+0x100>
    5156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    515a:	d1d6      	bne.n	510a <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    515c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    515e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5162:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5166:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    516a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    516c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    5170:	bf4c      	ite	mi
    5172:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    5174:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5178:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    517a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    517e:	d519      	bpl.n	51b4 <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5180:	2101      	movs	r1, #1
    5182:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5186:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    518a:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    518c:	2200      	movs	r2, #0
    518e:	4630      	mov	r0, r6
    5190:	a901      	add	r1, sp, #4
    5192:	f001 fe53 	bl	6e3c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5196:	4b15      	ldr	r3, [pc, #84]	; (51ec <gpio_nrfx_pin_configure+0x13c>)
    5198:	4298      	cmp	r0, r3
    519a:	bf14      	ite	ne
    519c:	f06f 0015 	mvnne.w	r0, #21
    51a0:	2000      	moveq	r0, #0
}
    51a2:	b005      	add	sp, #20
    51a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    51a8:	2307      	movs	r3, #7
    51aa:	e7d8      	b.n	515e <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    51ac:	2305      	movs	r3, #5
    51ae:	e7d6      	b.n	515e <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    51b0:	2303      	movs	r3, #3
    51b2:	e7d4      	b.n	515e <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    51b4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    51b6:	bf41      	itttt	mi
    51b8:	2101      	movmi	r1, #1
    51ba:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    51be:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    51c2:	60df      	strmi	r7, [r3, #12]
}
    51c4:	e7e2      	b.n	518c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    51c6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    51c8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    51cc:	bf4c      	ite	mi
    51ce:	2403      	movmi	r4, #3
    51d0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    51d4:	461a      	mov	r2, r3
    51d6:	4630      	mov	r0, r6
    51d8:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    51da:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    51de:	f001 fd81 	bl	6ce4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    51e2:	4b02      	ldr	r3, [pc, #8]	; (51ec <gpio_nrfx_pin_configure+0x13c>)
    51e4:	4298      	cmp	r0, r3
    51e6:	d083      	beq.n	50f0 <gpio_nrfx_pin_configure+0x40>
    51e8:	e78f      	b.n	510a <gpio_nrfx_pin_configure+0x5a>
    51ea:	bf00      	nop
    51ec:	0bad0000 	.word	0x0bad0000

000051f0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    51f0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    51f4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    51f8:	280a      	cmp	r0, #10
    51fa:	bf9a      	itte	ls
    51fc:	4b02      	ldrls	r3, [pc, #8]	; (5208 <qspi_get_zephyr_ret_code+0x18>)
    51fe:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    5202:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    5206:	4770      	bx	lr
    5208:	0000e854 	.word	0x0000e854

0000520c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    520c:	4b02      	ldr	r3, [pc, #8]	; (5218 <qspi_nor_pages_layout+0xc>)
    520e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5210:	2301      	movs	r3, #1
    5212:	6013      	str	r3, [r2, #0]
}
    5214:	4770      	bx	lr
    5216:	bf00      	nop
    5218:	0000e5c4 	.word	0x0000e5c4

0000521c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    521c:	4800      	ldr	r0, [pc, #0]	; (5220 <qspi_flash_get_parameters+0x4>)
    521e:	4770      	bx	lr
    5220:	0000e5cc 	.word	0x0000e5cc

00005224 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    5224:	4b05      	ldr	r3, [pc, #20]	; (523c <qspi_wait_for_completion.isra.0+0x18>)
    5226:	4299      	cmp	r1, r3
    5228:	d106      	bne.n	5238 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
    522a:	f04f 32ff 	mov.w	r2, #4294967295
    522e:	f04f 33ff 	mov.w	r3, #4294967295
    5232:	3020      	adds	r0, #32
    5234:	f003 be48 	b.w	8ec8 <z_impl_k_sem_take>
}
    5238:	4770      	bx	lr
    523a:	bf00      	nop
    523c:	0bad0000 	.word	0x0bad0000

00005240 <qspi_device_init>:
{
    5240:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
    5242:	6905      	ldr	r5, [r0, #16]
{
    5244:	4604      	mov	r4, r0
	if (!qspi_initialized) {
    5246:	4e0f      	ldr	r6, [pc, #60]	; (5284 <qspi_device_init+0x44>)
	qspi_lock(dev);
    5248:	4628      	mov	r0, r5
    524a:	f006 fb52 	bl	b8f2 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
    524e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    5252:	f006 fb46 	bl	b8e2 <k_sem_give>
	if (!qspi_initialized) {
    5256:	7833      	ldrb	r3, [r6, #0]
    5258:	b98b      	cbnz	r3, 527e <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    525a:	462a      	mov	r2, r5
    525c:	490a      	ldr	r1, [pc, #40]	; (5288 <qspi_device_init+0x48>)
    525e:	6860      	ldr	r0, [r4, #4]
    5260:	f002 fa10 	bl	7684 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    5264:	f7ff ffc4 	bl	51f0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    5268:	fab0 f380 	clz	r3, r0
    526c:	4605      	mov	r5, r0
    526e:	095b      	lsrs	r3, r3, #5
    5270:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
    5272:	6920      	ldr	r0, [r4, #16]
    5274:	3010      	adds	r0, #16
    5276:	f006 fb34 	bl	b8e2 <k_sem_give>
}
    527a:	4628      	mov	r0, r5
    527c:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    527e:	2500      	movs	r5, #0
    5280:	e7f7      	b.n	5272 <qspi_device_init+0x32>
    5282:	bf00      	nop
    5284:	2001e37f 	.word	0x2001e37f
    5288:	0000b8e7 	.word	0x0000b8e7

0000528c <qspi_device_uninit>:
{
    528c:	b538      	push	{r3, r4, r5, lr}
    528e:	4604      	mov	r4, r0
	qspi_lock(dev);
    5290:	6900      	ldr	r0, [r0, #16]
    5292:	f006 fb2e 	bl	b8f2 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
    5296:	6925      	ldr	r5, [r4, #16]
    5298:	2200      	movs	r2, #0
    529a:	2300      	movs	r3, #0
    529c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    52a0:	f003 fe12 	bl	8ec8 <z_impl_k_sem_take>
	if (last) {
    52a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    52a6:	b94b      	cbnz	r3, 52bc <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    52a8:	4d0a      	ldr	r5, [pc, #40]	; (52d4 <qspi_device_uninit+0x48>)
    52aa:	f002 fb0f 	bl	78cc <nrfx_qspi_mem_busy_check>
    52ae:	42a8      	cmp	r0, r5
    52b0:	d10a      	bne.n	52c8 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
    52b2:	f002 fb31 	bl	7918 <nrfx_qspi_uninit>
		qspi_initialized = false;
    52b6:	2200      	movs	r2, #0
    52b8:	4b07      	ldr	r3, [pc, #28]	; (52d8 <qspi_device_uninit+0x4c>)
    52ba:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
    52bc:	6920      	ldr	r0, [r4, #16]
}
    52be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
    52c2:	3010      	adds	r0, #16
    52c4:	f006 bb0d 	b.w	b8e2 <k_sem_give>
	return z_impl_k_sleep(timeout);
    52c8:	2100      	movs	r1, #0
    52ca:	f240 6067 	movw	r0, #1639	; 0x667
    52ce:	f004 f93f 	bl	9550 <z_impl_k_sleep>
    52d2:	e7ea      	b.n	52aa <qspi_device_uninit+0x1e>
    52d4:	0bad0000 	.word	0x0bad0000
    52d8:	2001e37f 	.word	0x2001e37f

000052dc <qspi_nor_read>:
{
    52dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52e0:	4607      	mov	r7, r0
    52e2:	4688      	mov	r8, r1
    52e4:	461c      	mov	r4, r3
	if (!dest) {
    52e6:	4616      	mov	r6, r2
{
    52e8:	b085      	sub	sp, #20
	if (!dest) {
    52ea:	2a00      	cmp	r2, #0
    52ec:	f000 809a 	beq.w	5424 <CONFIG_USB_DEVICE_PID+0x124>
	if (!size) {
    52f0:	2b00      	cmp	r3, #0
    52f2:	f000 8095 	beq.w	5420 <CONFIG_USB_DEVICE_PID+0x120>
	if (addr < 0 ||
    52f6:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    52f8:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    52fa:	f2c0 8093 	blt.w	5424 <CONFIG_USB_DEVICE_PID+0x124>
    52fe:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    5300:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    5302:	4293      	cmp	r3, r2
    5304:	f200 808e 	bhi.w	5424 <CONFIG_USB_DEVICE_PID+0x124>
	int rc = qspi_device_init(dev);
    5308:	f7ff ff9a 	bl	5240 <qspi_device_init>
	if (rc != 0) {
    530c:	4605      	mov	r5, r0
    530e:	2800      	cmp	r0, #0
    5310:	d17d      	bne.n	540e <CONFIG_USB_DEVICE_PID+0x10e>
	qspi_lock(dev);
    5312:	f1c8 0500 	rsb	r5, r8, #0
    5316:	f005 0503 	and.w	r5, r5, #3
    531a:	6938      	ldr	r0, [r7, #16]
    531c:	f006 fae9 	bl	b8f2 <qspi_lock.isra.0>
	if (flash_prefix > size) {
    5320:	42a5      	cmp	r5, r4
    5322:	bf28      	it	cs
    5324:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    5326:	4273      	negs	r3, r6
    5328:	f003 0303 	and.w	r3, r3, #3
    532c:	f006 0b03 	and.w	fp, r6, #3
    5330:	bf58      	it	pl
    5332:	f1c3 0b00 	rsbpl	fp, r3, #0
    5336:	f1cb 0b00 	rsb	fp, fp, #0
    533a:	f00b 0b03 	and.w	fp, fp, #3
    533e:	45a3      	cmp	fp, r4
    5340:	bf28      	it	cs
    5342:	46a3      	movcs	fp, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    5344:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    5346:	eba4 040b 	sub.w	r4, r4, fp
	off_t dest_middle = size - dest_prefix -
    534a:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    534e:	f023 0903 	bic.w	r9, r3, #3
	if (flash_middle > dest_middle) {
    5352:	45a1      	cmp	r9, r4
		flash_suffix = size - flash_prefix - flash_middle;
    5354:	bfc8      	it	gt
    5356:	46a1      	movgt	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    5358:	f003 0a03 	and.w	sl, r3, #3
		flash_suffix = size - flash_prefix - flash_middle;
    535c:	bfc8      	it	gt
    535e:	eba3 0a04 	subgt.w	sl, r3, r4
	if (flash_middle != 0) {
    5362:	f1b9 0f00 	cmp.w	r9, #0
    5366:	d018      	beq.n	539a <CONFIG_USB_DEVICE_PID+0x9a>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    5368:	eb06 030b 	add.w	r3, r6, fp
    536c:	eb08 0205 	add.w	r2, r8, r5
    5370:	4649      	mov	r1, r9
    5372:	4618      	mov	r0, r3
    5374:	9301      	str	r3, [sp, #4]
    5376:	f008 fa3a 	bl	d7ee <nrfx_qspi_read>
    537a:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    537c:	4601      	mov	r1, r0
    537e:	6938      	ldr	r0, [r7, #16]
    5380:	f7ff ff50 	bl	5224 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5384:	4a29      	ldr	r2, [pc, #164]	; (542c <CONFIG_USB_DEVICE_PID+0x12c>)
    5386:	4294      	cmp	r4, r2
    5388:	d139      	bne.n	53fe <CONFIG_USB_DEVICE_PID+0xfe>
		if (flash_prefix != dest_prefix) {
    538a:	455d      	cmp	r5, fp
    538c:	d005      	beq.n	539a <CONFIG_USB_DEVICE_PID+0x9a>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    538e:	9b01      	ldr	r3, [sp, #4]
    5390:	464a      	mov	r2, r9
    5392:	4619      	mov	r1, r3
    5394:	1970      	adds	r0, r6, r5
    5396:	f006 f8a0 	bl	b4da <memmove>
	if (flash_prefix != 0) {
    539a:	b1b5      	cbz	r5, 53ca <CONFIG_USB_DEVICE_PID+0xca>
				     (WORD_SIZE - flash_prefix));
    539c:	f1c5 0b04 	rsb	fp, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    53a0:	2104      	movs	r1, #4
    53a2:	eba8 020b 	sub.w	r2, r8, fp
    53a6:	a802      	add	r0, sp, #8
    53a8:	f008 fa21 	bl	d7ee <nrfx_qspi_read>
    53ac:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    53ae:	4601      	mov	r1, r0
    53b0:	6938      	ldr	r0, [r7, #16]
    53b2:	f7ff ff37 	bl	5224 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    53b6:	4b1d      	ldr	r3, [pc, #116]	; (542c <CONFIG_USB_DEVICE_PID+0x12c>)
    53b8:	429c      	cmp	r4, r3
    53ba:	d120      	bne.n	53fe <CONFIG_USB_DEVICE_PID+0xfe>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    53bc:	ab02      	add	r3, sp, #8
    53be:	462a      	mov	r2, r5
    53c0:	4630      	mov	r0, r6
    53c2:	eb03 010b 	add.w	r1, r3, fp
    53c6:	f006 f8a0 	bl	b50a <memcpy>
	if (flash_suffix != 0) {
    53ca:	f1ba 0f00 	cmp.w	sl, #0
    53ce:	d025      	beq.n	541c <CONFIG_USB_DEVICE_PID+0x11c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    53d0:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    53d2:	eb08 0205 	add.w	r2, r8, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    53d6:	444a      	add	r2, r9
    53d8:	eb0d 0001 	add.w	r0, sp, r1
    53dc:	f008 fa07 	bl	d7ee <nrfx_qspi_read>
    53e0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    53e2:	4601      	mov	r1, r0
    53e4:	6938      	ldr	r0, [r7, #16]
    53e6:	f7ff ff1d 	bl	5224 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    53ea:	4b10      	ldr	r3, [pc, #64]	; (542c <CONFIG_USB_DEVICE_PID+0x12c>)
    53ec:	429c      	cmp	r4, r3
    53ee:	d106      	bne.n	53fe <CONFIG_USB_DEVICE_PID+0xfe>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    53f0:	eb09 0005 	add.w	r0, r9, r5
    53f4:	4652      	mov	r2, sl
    53f6:	a902      	add	r1, sp, #8
    53f8:	4430      	add	r0, r6
    53fa:	f006 f886 	bl	b50a <memcpy>
	k_sem_give(&dev_data->sem);
    53fe:	6938      	ldr	r0, [r7, #16]
    5400:	3010      	adds	r0, #16
    5402:	f006 fa6e 	bl	b8e2 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    5406:	4620      	mov	r0, r4
    5408:	f7ff fef2 	bl	51f0 <qspi_get_zephyr_ret_code>
    540c:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    540e:	4638      	mov	r0, r7
    5410:	f7ff ff3c 	bl	528c <qspi_device_uninit>
}
    5414:	4628      	mov	r0, r5
    5416:	b005      	add	sp, #20
    5418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return res;
    541c:	4c03      	ldr	r4, [pc, #12]	; (542c <CONFIG_USB_DEVICE_PID+0x12c>)
    541e:	e7ee      	b.n	53fe <CONFIG_USB_DEVICE_PID+0xfe>
		return 0;
    5420:	461d      	mov	r5, r3
    5422:	e7f7      	b.n	5414 <CONFIG_USB_DEVICE_PID+0x114>
		return -EINVAL;
    5424:	f06f 0515 	mvn.w	r5, #21
    5428:	e7f4      	b.n	5414 <CONFIG_USB_DEVICE_PID+0x114>
    542a:	bf00      	nop
    542c:	0bad0000 	.word	0x0bad0000

00005430 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    5430:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5434:	2202      	movs	r2, #2
{
    5436:	b530      	push	{r4, r5, lr}
    5438:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    543c:	6843      	ldr	r3, [r0, #4]
{
    543e:	b087      	sub	sp, #28
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    5440:	6a1d      	ldr	r5, [r3, #32]
{
    5442:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5444:	2100      	movs	r1, #0
    5446:	4628      	mov	r0, r5
    5448:	aa03      	add	r2, sp, #12
    544a:	f006 fb5a 	bl	bb02 <pinctrl_lookup_state>
	if (ret < 0) {
    544e:	2800      	cmp	r0, #0
    5450:	db51      	blt.n	54f6 <qspi_nor_init+0xc6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5452:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5454:	682a      	ldr	r2, [r5, #0]
    5456:	7919      	ldrb	r1, [r3, #4]
    5458:	6818      	ldr	r0, [r3, #0]
    545a:	f006 fb6f 	bl	bb3c <pinctrl_configure_pins>
	if (ret < 0) {
    545e:	2800      	cmp	r0, #0
    5460:	db49      	blt.n	54f6 <qspi_nor_init+0xc6>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    5462:	2200      	movs	r2, #0
    5464:	2101      	movs	r1, #1
    5466:	202b      	movs	r0, #43	; 0x2b
    5468:	f7fe fb62 	bl	3b30 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    546c:	6865      	ldr	r5, [r4, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    546e:	6922      	ldr	r2, [r4, #16]
    5470:	4628      	mov	r0, r5
    5472:	4932      	ldr	r1, [pc, #200]	; (553c <qspi_nor_init+0x10c>)
    5474:	f002 f906 	bl	7684 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
    5478:	f7ff feba 	bl	51f0 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    547c:	2800      	cmp	r0, #0
    547e:	db3a      	blt.n	54f6 <qspi_nor_init+0xc6>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    5480:	7aeb      	ldrb	r3, [r5, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    5482:	3b02      	subs	r3, #2
    5484:	2b01      	cmp	r3, #1
    5486:	d938      	bls.n	54fa <qspi_nor_init+0xca>
    5488:	7aad      	ldrb	r5, [r5, #10]
    548a:	3d03      	subs	r5, #3
    548c:	2d01      	cmp	r5, #1
    548e:	bf8c      	ite	hi
    5490:	2500      	movhi	r5, #0
    5492:	2501      	movls	r5, #1
		ret = qspi_rdsr(dev, sr_num);
    5494:	4620      	mov	r0, r4
    5496:	f006 fa8b 	bl	b9b0 <qspi_rdsr.constprop.0>
		if (ret < 0) {
    549a:	2800      	cmp	r0, #0
    549c:	db2b      	blt.n	54f6 <qspi_nor_init+0xc6>
		uint8_t sr = (uint8_t)ret;
    549e:	b2c2      	uxtb	r2, r0
		if (qe_state != qe_value) {
    54a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    54a4:	4285      	cmp	r5, r0
    54a6:	ad01      	add	r5, sp, #4
    54a8:	d129      	bne.n	54fe <qspi_nor_init+0xce>
	qspi_device_uninit(dev);
    54aa:	4620      	mov	r0, r4
    54ac:	f7ff feee 	bl	528c <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    54b0:	2300      	movs	r3, #0
    54b2:	2203      	movs	r2, #3
    54b4:	9304      	str	r3, [sp, #16]
    54b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    54ba:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    54bc:	4620      	mov	r0, r4
	const struct qspi_cmd cmd = {
    54be:	9505      	str	r5, [sp, #20]
	const struct qspi_buf rx_buf = {
    54c0:	f8cd d004 	str.w	sp, [sp, #4]
	const struct qspi_cmd cmd = {
    54c4:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_device_init(dev);
    54c8:	f7ff feba 	bl	5240 <qspi_device_init>
	if (ret == 0) {
    54cc:	4605      	mov	r5, r0
    54ce:	b928      	cbnz	r0, 54dc <qspi_nor_init+0xac>
		ret = qspi_send_cmd(dev, &cmd, false);
    54d0:	4602      	mov	r2, r0
    54d2:	a903      	add	r1, sp, #12
    54d4:	4620      	mov	r0, r4
    54d6:	f006 fa19 	bl	b90c <qspi_send_cmd>
    54da:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    54dc:	4620      	mov	r0, r4
    54de:	f7ff fed5 	bl	528c <qspi_device_uninit>
	if (ret != 0) {
    54e2:	b935      	cbnz	r5, 54f2 <qspi_nor_init+0xc2>
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    54e4:	6860      	ldr	r0, [r4, #4]
    54e6:	2203      	movs	r2, #3
    54e8:	4669      	mov	r1, sp
    54ea:	301c      	adds	r0, #28
    54ec:	f005 ffe4 	bl	b4b8 <memcmp>
    54f0:	b108      	cbz	r0, 54f6 <qspi_nor_init+0xc6>
		return -ENODEV;
    54f2:	f06f 0012 	mvn.w	r0, #18
}
    54f6:	b007      	add	sp, #28
    54f8:	bd30      	pop	{r4, r5, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    54fa:	2501      	movs	r5, #1
    54fc:	e7ca      	b.n	5494 <qspi_nor_init+0x64>
	uint8_t sr_array[2] = {0};
    54fe:	2300      	movs	r3, #0
			sr ^= qe_mask;
    5500:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    5504:	f8ad 3000 	strh.w	r3, [sp]
		sr_array[0] = sr_val;
    5508:	f88d 2000 	strb.w	r2, [sp]
	const struct qspi_buf sr_buf = {
    550c:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    550e:	4620      	mov	r0, r4
    5510:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    5512:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct qspi_buf sr_buf = {
    5516:	f8cd d004 	str.w	sp, [sp, #4]
	struct qspi_cmd cmd = {
    551a:	9305      	str	r3, [sp, #20]
    551c:	f88d 200c 	strb.w	r2, [sp, #12]
    5520:	9504      	str	r5, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
    5522:	f006 f9f3 	bl	b90c <qspi_send_cmd>
	if (ret == 0) {
    5526:	2800      	cmp	r0, #0
    5528:	d1e5      	bne.n	54f6 <qspi_nor_init+0xc6>
		ret = qspi_rdsr(dev, 1);
    552a:	4620      	mov	r0, r4
    552c:	f006 fa40 	bl	b9b0 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    5530:	2800      	cmp	r0, #0
    5532:	dbe0      	blt.n	54f6 <qspi_nor_init+0xc6>
    5534:	07c3      	lsls	r3, r0, #31
    5536:	d4f8      	bmi.n	552a <qspi_nor_init+0xfa>
    5538:	e7b7      	b.n	54aa <qspi_nor_init+0x7a>
    553a:	bf00      	nop
    553c:	0000b8e7 	.word	0x0000b8e7

00005540 <qspi_nor_erase>:
{
    5540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    5544:	1e0e      	subs	r6, r1, #0
{
    5546:	4680      	mov	r8, r0
    5548:	4617      	mov	r7, r2
	const struct qspi_nor_config *params = dev->config;
    554a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (addr < 0 ||
    554e:	db6d      	blt.n	562c <qspi_nor_erase+0xec>
    5550:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
    5554:	18b2      	adds	r2, r6, r2
	if (addr < 0 ||
    5556:	429a      	cmp	r2, r3
    5558:	d868      	bhi.n	562c <qspi_nor_erase+0xec>
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    555a:	2f00      	cmp	r7, #0
    555c:	d066      	beq.n	562c <qspi_nor_erase+0xec>
    555e:	ea46 0307 	orr.w	r3, r6, r7
    5562:	f3c3 030b 	ubfx	r3, r3, #0, #12
    5566:	2b00      	cmp	r3, #0
    5568:	d160      	bne.n	562c <qspi_nor_erase+0xec>
	rv = qspi_device_init(dev);
    556a:	f7ff fe69 	bl	5240 <qspi_device_init>
	if (rv != 0) {
    556e:	4604      	mov	r4, r0
    5570:	bb98      	cbnz	r0, 55da <qspi_nor_erase+0x9a>
	qspi_trans_lock(dev);
    5572:	f8d8 0010 	ldr.w	r0, [r8, #16]
    5576:	f006 f9c3 	bl	b900 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    557a:	4621      	mov	r1, r4
    557c:	4640      	mov	r0, r8
    557e:	f006 fa02 	bl	b986 <qspi_nor_write_protection_set>
	if (rv != 0) {
    5582:	4604      	mov	r4, r0
    5584:	bb28      	cbnz	r0, 55d2 <qspi_nor_erase+0x92>
	qspi_lock(dev);
    5586:	f8d8 0010 	ldr.w	r0, [r8, #16]
    558a:	f006 f9b2 	bl	b8f2 <qspi_lock.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    558e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 5634 <qspi_nor_erase+0xf4>
		if (size == params->size) {
    5592:	f8d9 3018 	ldr.w	r3, [r9, #24]
    5596:	42bb      	cmp	r3, r7
    5598:	d125      	bne.n	55e6 <qspi_nor_erase+0xa6>
			res = nrfx_qspi_chip_erase();
    559a:	f008 f92b 	bl	d7f4 <nrfx_qspi_chip_erase>
    559e:	46bb      	mov	fp, r7
    55a0:	4605      	mov	r5, r0
		qspi_wait_for_completion(dev, res);
    55a2:	4629      	mov	r1, r5
    55a4:	f8d8 0010 	ldr.w	r0, [r8, #16]
    55a8:	f7ff fe3c 	bl	5224 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    55ac:	4b22      	ldr	r3, [pc, #136]	; (5638 <qspi_nor_erase+0xf8>)
    55ae:	429d      	cmp	r5, r3
    55b0:	d137      	bne.n	5622 <qspi_nor_erase+0xe2>
	while (size > 0) {
    55b2:	ebb7 070b 	subs.w	r7, r7, fp
			addr += adj;
    55b6:	445e      	add	r6, fp
	while (size > 0) {
    55b8:	d1eb      	bne.n	5592 <qspi_nor_erase+0x52>
	k_sem_give(&dev_data->sem);
    55ba:	f8d8 0010 	ldr.w	r0, [r8, #16]
    55be:	3010      	adds	r0, #16
    55c0:	f006 f98f 	bl	b8e2 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    55c4:	2101      	movs	r1, #1
    55c6:	4640      	mov	r0, r8
    55c8:	f006 f9dd 	bl	b986 <qspi_nor_write_protection_set>
		rv = rv2;
    55cc:	2c00      	cmp	r4, #0
    55ce:	bf08      	it	eq
    55d0:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
    55d2:	f8d8 0010 	ldr.w	r0, [r8, #16]
    55d6:	f006 f984 	bl	b8e2 <k_sem_give>
	qspi_device_uninit(dev);
    55da:	4640      	mov	r0, r8
    55dc:	f7ff fe56 	bl	528c <qspi_device_uninit>
}
    55e0:	4620      	mov	r0, r4
    55e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    55e6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    55ea:	d309      	bcc.n	5600 <qspi_nor_erase+0xc0>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    55ec:	b2b3      	uxth	r3, r6
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    55ee:	b93b      	cbnz	r3, 5600 <qspi_nor_erase+0xc0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    55f0:	4631      	mov	r1, r6
    55f2:	2001      	movs	r0, #1
    55f4:	f002 f9de 	bl	79b4 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    55f8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    55fc:	4605      	mov	r5, r0
			adj = QSPI_BLOCK_SIZE;
    55fe:	e7d0      	b.n	55a2 <qspi_nor_erase+0x62>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    5600:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    5604:	d309      	bcc.n	561a <qspi_nor_erase+0xda>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    5606:	f3c6 000b 	ubfx	r0, r6, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    560a:	b930      	cbnz	r0, 561a <qspi_nor_erase+0xda>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    560c:	4631      	mov	r1, r6
    560e:	f002 f9d1 	bl	79b4 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    5612:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    5616:	4605      	mov	r5, r0
			adj = QSPI_SECTOR_SIZE;
    5618:	e7c3      	b.n	55a2 <qspi_nor_erase+0x62>
		uint32_t adj = 0;
    561a:	f04f 0b00 	mov.w	fp, #0
			res = NRFX_ERROR_INVALID_PARAM;
    561e:	4655      	mov	r5, sl
    5620:	e7bf      	b.n	55a2 <qspi_nor_erase+0x62>
			rv = qspi_get_zephyr_ret_code(res);
    5622:	4628      	mov	r0, r5
    5624:	f7ff fde4 	bl	51f0 <qspi_get_zephyr_ret_code>
    5628:	4604      	mov	r4, r0
			break;
    562a:	e7c6      	b.n	55ba <qspi_nor_erase+0x7a>
		return -EINVAL;
    562c:	f06f 0415 	mvn.w	r4, #21
    5630:	e7d6      	b.n	55e0 <qspi_nor_erase+0xa0>
    5632:	bf00      	nop
    5634:	0bad0004 	.word	0x0bad0004
    5638:	0bad0000 	.word	0x0bad0000

0000563c <qspi_nor_write>:
{
    563c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5640:	4605      	mov	r5, r0
    5642:	460f      	mov	r7, r1
    5644:	461e      	mov	r6, r3
	if (!src) {
    5646:	4690      	mov	r8, r2
    5648:	2a00      	cmp	r2, #0
    564a:	f000 8081 	beq.w	5750 <qspi_nor_write+0x114>
	if ((size == 0)
    564e:	2b00      	cmp	r3, #0
    5650:	d07e      	beq.n	5750 <qspi_nor_write+0x114>
	    || ((size > 4) && ((size % 4U) != 0))) {
    5652:	2b04      	cmp	r3, #4
    5654:	d901      	bls.n	565a <qspi_nor_write+0x1e>
    5656:	079a      	lsls	r2, r3, #30
    5658:	d17a      	bne.n	5750 <qspi_nor_write+0x114>
	if ((addr % 4U) != 0) {
    565a:	07bb      	lsls	r3, r7, #30
    565c:	d178      	bne.n	5750 <qspi_nor_write+0x114>
	if (addr < 0 ||
    565e:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    5660:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    5662:	db75      	blt.n	5750 <qspi_nor_write+0x114>
    5664:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    5666:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    5668:	4293      	cmp	r3, r2
    566a:	d871      	bhi.n	5750 <qspi_nor_write+0x114>
	int rc = qspi_device_init(dev);
    566c:	4628      	mov	r0, r5
    566e:	f7ff fde7 	bl	5240 <qspi_device_init>
	if (rc != 0) {
    5672:	4604      	mov	r4, r0
    5674:	2800      	cmp	r0, #0
    5676:	d160      	bne.n	573a <qspi_nor_write+0xfe>
	qspi_trans_lock(dev);
    5678:	6928      	ldr	r0, [r5, #16]
    567a:	f006 f941 	bl	b900 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    567e:	4621      	mov	r1, r4
    5680:	4628      	mov	r0, r5
    5682:	f006 f980 	bl	b986 <qspi_nor_write_protection_set>
    5686:	4604      	mov	r4, r0
	qspi_lock(dev);
    5688:	6928      	ldr	r0, [r5, #16]
    568a:	f006 f932 	bl	b8f2 <qspi_lock.isra.0>
	if (!res) {
    568e:	2c00      	cmp	r4, #0
    5690:	d140      	bne.n	5714 <qspi_nor_write+0xd8>
		if (size < 4U) {
    5692:	2e03      	cmp	r6, #3
    5694:	d81c      	bhi.n	56d0 <qspi_nor_write+0x94>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    5696:	463a      	mov	r2, r7
    5698:	2104      	movs	r1, #4
    569a:	4668      	mov	r0, sp
    569c:	f008 f8a7 	bl	d7ee <nrfx_qspi_read>
    56a0:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    56a2:	4601      	mov	r1, r0
    56a4:	6928      	ldr	r0, [r5, #16]
    56a6:	f7ff fdbd 	bl	5224 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    56aa:	4b2b      	ldr	r3, [pc, #172]	; (5758 <qspi_nor_write+0x11c>)
    56ac:	429c      	cmp	r4, r3
    56ae:	d131      	bne.n	5714 <qspi_nor_write+0xd8>
		memcpy(buf, sptr, slen);
    56b0:	4632      	mov	r2, r6
    56b2:	4641      	mov	r1, r8
    56b4:	4668      	mov	r0, sp
    56b6:	f005 ff28 	bl	b50a <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    56ba:	463a      	mov	r2, r7
    56bc:	2104      	movs	r1, #4
    56be:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    56c0:	f008 f892 	bl	d7e8 <nrfx_qspi_write>
    56c4:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    56c6:	4601      	mov	r1, r0
    56c8:	6928      	ldr	r0, [r5, #16]
    56ca:	f7ff fdab 	bl	5224 <qspi_wait_for_completion.isra.0>
    56ce:	e021      	b.n	5714 <qspi_nor_write+0xd8>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    56d0:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    56d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    56d8:	d036      	beq.n	5748 <qspi_nor_write+0x10c>
			if (res == NRFX_SUCCESS) {
    56da:	f8df a07c 	ldr.w	sl, [pc, #124]	; 5758 <qspi_nor_write+0x11c>
			size_t len = MIN(slen, sizeof(buf));
    56de:	2e10      	cmp	r6, #16
    56e0:	46b1      	mov	r9, r6
    56e2:	bf28      	it	cs
    56e4:	f04f 0910 	movcs.w	r9, #16
			memcpy(buf, sp, len);
    56e8:	4641      	mov	r1, r8
    56ea:	464a      	mov	r2, r9
    56ec:	4668      	mov	r0, sp
    56ee:	f005 ff0c 	bl	b50a <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    56f2:	463a      	mov	r2, r7
    56f4:	2110      	movs	r1, #16
    56f6:	4668      	mov	r0, sp
    56f8:	f008 f876 	bl	d7e8 <nrfx_qspi_write>
    56fc:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    56fe:	4601      	mov	r1, r0
    5700:	6928      	ldr	r0, [r5, #16]
    5702:	f7ff fd8f 	bl	5224 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    5706:	4554      	cmp	r4, sl
    5708:	d104      	bne.n	5714 <qspi_nor_write+0xd8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    570a:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
    570e:	44c8      	add	r8, r9
				addr += len;
    5710:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5712:	d1e4      	bne.n	56de <qspi_nor_write+0xa2>
	k_sem_give(&dev_data->sem);
    5714:	6928      	ldr	r0, [r5, #16]
    5716:	3010      	adds	r0, #16
    5718:	f006 f8e3 	bl	b8e2 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
    571c:	2101      	movs	r1, #1
    571e:	4628      	mov	r0, r5
    5720:	f006 f931 	bl	b986 <qspi_nor_write_protection_set>
    5724:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    5726:	6928      	ldr	r0, [r5, #16]
    5728:	f006 f8db 	bl	b8e2 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    572c:	2c00      	cmp	r4, #0
    572e:	bf14      	ite	ne
    5730:	4620      	movne	r0, r4
    5732:	4630      	moveq	r0, r6
    5734:	f7ff fd5c 	bl	51f0 <qspi_get_zephyr_ret_code>
    5738:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    573a:	4628      	mov	r0, r5
    573c:	f7ff fda6 	bl	528c <qspi_device_uninit>
}
    5740:	4620      	mov	r0, r4
    5742:	b004      	add	sp, #16
    5744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = nrfx_qspi_write(src, size, addr);
    5748:	463a      	mov	r2, r7
    574a:	4631      	mov	r1, r6
    574c:	4640      	mov	r0, r8
    574e:	e7b7      	b.n	56c0 <qspi_nor_write+0x84>
		return -EINVAL;
    5750:	f06f 0415 	mvn.w	r4, #21
    5754:	e7f4      	b.n	5740 <qspi_nor_write+0x104>
    5756:	bf00      	nop
    5758:	0bad0000 	.word	0x0bad0000

0000575c <flash_sim_page_layout>:

static void flash_sim_page_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &flash_sim_pages_layout;
    575c:	4b02      	ldr	r3, [pc, #8]	; (5768 <flash_sim_page_layout+0xc>)
    575e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5760:	2301      	movs	r3, #1
    5762:	6013      	str	r3, [r2, #0]
}
    5764:	4770      	bx	lr
    5766:	bf00      	nop
    5768:	0000e620 	.word	0x0000e620

0000576c <flash_sim_get_parameters>:
flash_sim_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_sim_parameters;
}
    576c:	4800      	ldr	r0, [pc, #0]	; (5770 <flash_sim_get_parameters+0x4>)
    576e:	4770      	bx	lr
    5770:	0000e628 	.word	0x0000e628

00005774 <flash_sim_write>:
{
    5774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5778:	461c      	mov	r4, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    577a:	440b      	add	r3, r1
    577c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    5780:	460d      	mov	r5, r1
    5782:	4617      	mov	r7, r2
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5784:	d82b      	bhi.n	57de <flash_sim_write+0x6a>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    5786:	2900      	cmp	r1, #0
    5788:	db29      	blt.n	57de <flash_sim_write+0x6a>
	if ((offset % FLASH_SIMULATOR_PROG_UNIT) ||
    578a:	ea44 0601 	orr.w	r6, r4, r1
    578e:	f016 0603 	ands.w	r6, r6, #3
    5792:	d124      	bne.n	57de <flash_sim_write+0x6a>
	memset(buf, FLASH_SIMULATOR_ERASE_VALUE, sizeof(buf));
    5794:	2204      	movs	r2, #4
    5796:	21ff      	movs	r1, #255	; 0xff
    5798:	eb0d 0002 	add.w	r0, sp, r2
    579c:	f005 fec0 	bl	b520 <memset>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    57a0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 57e4 <flash_sim_write+0x70>
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    57a4:	eb08 0905 	add.w	r9, r8, r5
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    57a8:	42a6      	cmp	r6, r4
    57aa:	d308      	bcc.n	57be <flash_sim_write+0x4a>
    57ac:	463a      	mov	r2, r7
    57ae:	4445      	add	r5, r8
    57b0:	443c      	add	r4, r7
	for (uint32_t i = 0; i < len; i++) {
    57b2:	42a2      	cmp	r2, r4
    57b4:	d10c      	bne.n	57d0 <flash_sim_write+0x5c>
	return 0;
    57b6:	2000      	movs	r0, #0
}
    57b8:	b003      	add	sp, #12
    57ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    57be:	2204      	movs	r2, #4
    57c0:	eb09 0106 	add.w	r1, r9, r6
    57c4:	eb0d 0002 	add.w	r0, sp, r2
    57c8:	f005 fe76 	bl	b4b8 <memcmp>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    57cc:	3604      	adds	r6, #4
    57ce:	e7eb      	b.n	57a8 <flash_sim_write+0x34>
		*(MOCK_FLASH(offset + i)) &= *((uint8_t *)data + i);
    57d0:	782b      	ldrb	r3, [r5, #0]
    57d2:	f812 1b01 	ldrb.w	r1, [r2], #1
    57d6:	400b      	ands	r3, r1
    57d8:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint32_t i = 0; i < len; i++) {
    57dc:	e7e9      	b.n	57b2 <flash_sim_write+0x3e>
		return -EINVAL;
    57de:	f06f 0015 	mvn.w	r0, #21
    57e2:	e7e9      	b.n	57b8 <flash_sim_write+0x44>
    57e4:	2001e380 	.word	0x2001e380

000057e8 <flash_sim_read>:
{
    57e8:	4610      	mov	r0, r2
    57ea:	b508      	push	{r3, lr}
    57ec:	461a      	mov	r2, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    57ee:	440b      	add	r3, r1
    57f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    57f4:	d807      	bhi.n	5806 <flash_sim_read+0x1e>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    57f6:	2900      	cmp	r1, #0
    57f8:	db05      	blt.n	5806 <flash_sim_read+0x1e>
	memcpy(data, MOCK_FLASH(offset), len);
    57fa:	4b04      	ldr	r3, [pc, #16]	; (580c <flash_sim_read+0x24>)
    57fc:	4419      	add	r1, r3
    57fe:	f005 fe84 	bl	b50a <memcpy>
	return 0;
    5802:	2000      	movs	r0, #0
}
    5804:	bd08      	pop	{r3, pc}
		return -EINVAL;
    5806:	f06f 0015 	mvn.w	r0, #21
    580a:	e7fb      	b.n	5804 <flash_sim_read+0x1c>
    580c:	2001e380 	.word	0x2001e380

00005810 <flash_sim_erase>:
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5810:	1853      	adds	r3, r2, r1
    5812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    5816:	b570      	push	{r4, r5, r6, lr}
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    5818:	d81b      	bhi.n	5852 <flash_sim_erase+0x42>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    581a:	2900      	cmp	r1, #0
    581c:	db19      	blt.n	5852 <flash_sim_erase+0x42>
	if ((offset % FLASH_SIMULATOR_ERASE_UNIT) ||
    581e:	ea42 0601 	orr.w	r6, r2, r1
    5822:	f3c6 060b 	ubfx	r6, r6, #0, #12
    5826:	b9a6      	cbnz	r6, 5852 <flash_sim_erase+0x42>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    5828:	4c0b      	ldr	r4, [pc, #44]	; (5858 <flash_sim_erase+0x48>)
    582a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    582e:	f021 010f 	bic.w	r1, r1, #15
    5832:	0b15      	lsrs	r5, r2, #12
    5834:	440c      	add	r4, r1
    5836:	42ae      	cmp	r6, r5
    5838:	d101      	bne.n	583e <flash_sim_erase+0x2e>
    583a:	2000      	movs	r0, #0
}
    583c:	bd70      	pop	{r4, r5, r6, pc}
	memset(MOCK_FLASH(unit_addr), FLASH_SIMULATOR_ERASE_VALUE,
    583e:	4620      	mov	r0, r4
    5840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5844:	21ff      	movs	r1, #255	; 0xff
    5846:	f005 fe6b 	bl	b520 <memset>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    584a:	3601      	adds	r6, #1
    584c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    5850:	e7f1      	b.n	5836 <flash_sim_erase+0x26>
		return -EINVAL;
    5852:	f06f 0015 	mvn.w	r0, #21
    5856:	e7f1      	b.n	583c <flash_sim_erase+0x2c>
    5858:	2001e380 	.word	0x2001e380

0000585c <flash_init>:
}

#endif /* CONFIG_ARCH_POSIX */

static int flash_init(const struct device *dev)
{
    585c:	b508      	push	{r3, lr}
	memset(mock_flash, FLASH_SIMULATOR_ERASE_VALUE, ARRAY_SIZE(mock_flash));
    585e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5862:	21ff      	movs	r1, #255	; 0xff
    5864:	4802      	ldr	r0, [pc, #8]	; (5870 <flash_init+0x14>)
    5866:	f005 fe5b 	bl	b520 <memset>
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_stats, STATS_SIZE_32, "flash_sim_stats");
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_thresholds, STATS_SIZE_32,
			   "flash_sim_thresholds");
	return flash_mock_init(dev);
}
    586a:	2000      	movs	r0, #0
    586c:	bd08      	pop	{r3, pc}
    586e:	bf00      	nop
    5870:	2001e380 	.word	0x2001e380

00005874 <z_impl_flash_simulator_get_memory>:
void *z_impl_flash_simulator_get_memory(const struct device *dev,
					size_t *mock_size)
{
	ARG_UNUSED(dev);

	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    5874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	return mock_flash;
}
    5878:	4801      	ldr	r0, [pc, #4]	; (5880 <z_impl_flash_simulator_get_memory+0xc>)
	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    587a:	600b      	str	r3, [r1, #0]
}
    587c:	4770      	bx	lr
    587e:	bf00      	nop
    5880:	2001e380 	.word	0x2001e380

00005884 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    5884:	4b02      	ldr	r3, [pc, #8]	; (5890 <flash_nrf_pages_layout+0xc>)
    5886:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5888:	2301      	movs	r3, #1
    588a:	6013      	str	r3, [r2, #0]
}
    588c:	4770      	bx	lr
    588e:	bf00      	nop
    5890:	2001c0a0 	.word	0x2001c0a0

00005894 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    5894:	4800      	ldr	r0, [pc, #0]	; (5898 <flash_nrf_get_parameters+0x4>)
    5896:	4770      	bx	lr
    5898:	0000e644 	.word	0x0000e644

0000589c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    589c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    589e:	2201      	movs	r2, #1
    58a0:	4806      	ldr	r0, [pc, #24]	; (58bc <nrf_flash_init+0x20>)
    58a2:	4611      	mov	r1, r2
    58a4:	f008 f952 	bl	db4c <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    58a8:	f007 ff91 	bl	d7ce <nrfx_nvmc_flash_page_count_get>
    58ac:	4c04      	ldr	r4, [pc, #16]	; (58c0 <nrf_flash_init+0x24>)
    58ae:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    58b0:	f007 ff8a 	bl	d7c8 <nrfx_nvmc_flash_page_size_get>
    58b4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    58b6:	2000      	movs	r0, #0
    58b8:	bd10      	pop	{r4, pc}
    58ba:	bf00      	nop
    58bc:	2001c0a8 	.word	0x2001c0a8
    58c0:	2001c0a0 	.word	0x2001c0a0

000058c4 <flash_nrf_erase>:
{
    58c4:	b570      	push	{r4, r5, r6, lr}
    58c6:	460d      	mov	r5, r1
    58c8:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    58ca:	f007 ff7d 	bl	d7c8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    58ce:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    58d0:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    58d2:	4628      	mov	r0, r5
    58d4:	f006 f887 	bl	b9e6 <is_regular_addr_valid>
    58d8:	b300      	cbz	r0, 591c <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    58da:	fbb5 f3f6 	udiv	r3, r5, r6
    58de:	fb06 5313 	mls	r3, r6, r3, r5
    58e2:	b9db      	cbnz	r3, 591c <flash_nrf_erase+0x58>
    58e4:	fbb4 f3f6 	udiv	r3, r4, r6
    58e8:	fb06 4013 	mls	r0, r6, r3, r4
    58ec:	b9b0      	cbnz	r0, 591c <flash_nrf_erase+0x58>
		if (!n_pages) {
    58ee:	42a6      	cmp	r6, r4
    58f0:	d813      	bhi.n	591a <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
    58f2:	f04f 32ff 	mov.w	r2, #4294967295
    58f6:	f04f 33ff 	mov.w	r3, #4294967295
    58fa:	480a      	ldr	r0, [pc, #40]	; (5924 <flash_nrf_erase+0x60>)
    58fc:	f003 fae4 	bl	8ec8 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5900:	f007 ff62 	bl	d7c8 <nrfx_nvmc_flash_page_size_get>
    5904:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5906:	4628      	mov	r0, r5
    5908:	f001 fce4 	bl	72d4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    590c:	1ba4      	subs	r4, r4, r6
    590e:	4435      	add	r5, r6
    5910:	d1f9      	bne.n	5906 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
    5912:	4804      	ldr	r0, [pc, #16]	; (5924 <flash_nrf_erase+0x60>)
    5914:	f003 fab8 	bl	8e88 <z_impl_k_sem_give>
	return ret;
    5918:	4620      	mov	r0, r4
}
    591a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    591c:	f06f 0015 	mvn.w	r0, #21
    5920:	e7fb      	b.n	591a <flash_nrf_erase+0x56>
    5922:	bf00      	nop
    5924:	2001c0a8 	.word	0x2001c0a8

00005928 <flash_nrf_write>:
{
    5928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    592c:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    592e:	4619      	mov	r1, r3
    5930:	4630      	mov	r0, r6
{
    5932:	4615      	mov	r5, r2
    5934:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5936:	f006 f856 	bl	b9e6 <is_regular_addr_valid>
    593a:	b3b8      	cbz	r0, 59ac <flash_nrf_write+0x84>
	if (!len) {
    593c:	b3cc      	cbz	r4, 59b2 <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    593e:	f04f 32ff 	mov.w	r2, #4294967295
    5942:	f04f 33ff 	mov.w	r3, #4294967295
    5946:	481c      	ldr	r0, [pc, #112]	; (59b8 <flash_nrf_write+0x90>)
    5948:	f003 fabe 	bl	8ec8 <z_impl_k_sem_take>
		nrf_flash_sync_get_timestamp_begin();
	}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
#if IS_ENABLED(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    594c:	f016 0703 	ands.w	r7, r6, #3
    5950:	d00c      	beq.n	596c <flash_nrf_write+0x44>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
    5952:	f1c7 0704 	rsb	r7, r7, #4

		if (count > w_ctx->len) {
    5956:	42a7      	cmp	r7, r4
    5958:	bf28      	it	cs
    595a:	4627      	movcs	r7, r4

		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    595c:	4629      	mov	r1, r5
    595e:	4630      	mov	r0, r6
    5960:	463a      	mov	r2, r7
    5962:	f001 fce5 	bl	7330 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    5966:	443e      	add	r6, r7
	w_ctx->data_addr += shift;
    5968:	443d      	add	r5, r7
	w_ctx->len -= shift;
    596a:	1be4      	subs	r4, r4, r7
{
    596c:	2700      	movs	r7, #0
    596e:	f024 0803 	bic.w	r8, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    5972:	4547      	cmp	r7, r8
    5974:	eb07 0006 	add.w	r0, r7, r6
    5978:	d113      	bne.n	59a2 <flash_nrf_write+0x7a>
    597a:	f06f 0303 	mvn.w	r3, #3
    597e:	08a2      	lsrs	r2, r4, #2
    5980:	fb03 4202 	mla	r2, r3, r2, r4
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#if IS_ENABLED(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* Write remaining unaligned data */
	if (w_ctx->len) {
    5984:	19e9      	adds	r1, r5, r7
    5986:	b10a      	cbz	r2, 598c <flash_nrf_write+0x64>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    5988:	f001 fcd2 	bl	7330 <nrfx_nvmc_bytes_write>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    598c:	4a0b      	ldr	r2, [pc, #44]	; (59bc <flash_nrf_write+0x94>)
    598e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    5992:	07db      	lsls	r3, r3, #31
    5994:	d5fb      	bpl.n	598e <flash_nrf_write+0x66>
	z_impl_k_sem_give(sem);
    5996:	4808      	ldr	r0, [pc, #32]	; (59b8 <flash_nrf_write+0x90>)
    5998:	f003 fa76 	bl	8e88 <z_impl_k_sem_give>
    599c:	2000      	movs	r0, #0
}
    599e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    59a2:	59e9      	ldr	r1, [r5, r7]
    59a4:	f001 fcb4 	bl	7310 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    59a8:	3704      	adds	r7, #4
}
    59aa:	e7e2      	b.n	5972 <flash_nrf_write+0x4a>
		return -EINVAL;
    59ac:	f06f 0015 	mvn.w	r0, #21
    59b0:	e7f5      	b.n	599e <flash_nrf_write+0x76>
		return 0;
    59b2:	4620      	mov	r0, r4
    59b4:	e7f3      	b.n	599e <flash_nrf_write+0x76>
    59b6:	bf00      	nop
    59b8:	2001c0a8 	.word	0x2001c0a8
    59bc:	50039000 	.word	0x50039000

000059c0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    59c0:	2301      	movs	r3, #1
    59c2:	4083      	lsls	r3, r0
{
    59c4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    59c6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    59c8:	4a0d      	ldr	r2, [pc, #52]	; (5a00 <compare_int_lock+0x40>)
    59ca:	e8d2 1fef 	ldaex	r1, [r2]
    59ce:	ea01 0c04 	and.w	ip, r1, r4
    59d2:	e8c2 cfee 	stlex	lr, ip, [r2]
    59d6:	f1be 0f00 	cmp.w	lr, #0
    59da:	d1f6      	bne.n	59ca <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    59dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    59e0:	fa02 f000 	lsl.w	r0, r2, r0
    59e4:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    59e8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    59ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59f0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    59f4:	420b      	tst	r3, r1
}
    59f6:	bf14      	ite	ne
    59f8:	2001      	movne	r0, #1
    59fa:	2000      	moveq	r0, #0
    59fc:	bd10      	pop	{r4, pc}
    59fe:	bf00      	nop
    5a00:	2001c0bc 	.word	0x2001c0bc

00005a04 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5a04:	4919      	ldr	r1, [pc, #100]	; (5a6c <sys_clock_timeout_handler+0x68>)
{
    5a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a08:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5a0a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5a0e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5a10:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5a14:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5a18:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5a1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5a1e:	d222      	bcs.n	5a66 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5a20:	4b13      	ldr	r3, [pc, #76]	; (5a70 <sys_clock_timeout_handler+0x6c>)
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	0a1a      	lsrs	r2, r3, #8
    5a26:	061b      	lsls	r3, r3, #24
    5a28:	195e      	adds	r6, r3, r5
    5a2a:	4b12      	ldr	r3, [pc, #72]	; (5a74 <sys_clock_timeout_handler+0x70>)
    5a2c:	f142 0700 	adc.w	r7, r2, #0
    5a30:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    5a34:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5a36:	f003 feeb 	bl	9810 <sys_clock_announce>
    return p_reg->CC[ch];
    5a3a:	00a3      	lsls	r3, r4, #2
    5a3c:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5a40:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5a44:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5a48:	42aa      	cmp	r2, r5
    5a4a:	d10b      	bne.n	5a64 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    5a4c:	b91e      	cbnz	r6, 5a56 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    5a4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5a52:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5a56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    5a5a:	4b07      	ldr	r3, [pc, #28]	; (5a78 <sys_clock_timeout_handler+0x74>)
    5a5c:	fa00 f404 	lsl.w	r4, r0, r4
    5a60:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    5a66:	2600      	movs	r6, #0
    5a68:	e7e5      	b.n	5a36 <sys_clock_timeout_handler+0x32>
    5a6a:	bf00      	nop
    5a6c:	2000a580 	.word	0x2000a580
    5a70:	2001c0c0 	.word	0x2001c0c0
    5a74:	2000a568 	.word	0x2000a568
    5a78:	50015000 	.word	0x50015000

00005a7c <compare_int_unlock>:
	if (key) {
    5a7c:	b1e1      	cbz	r1, 5ab8 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    5a7e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5a80:	4a0e      	ldr	r2, [pc, #56]	; (5abc <compare_int_unlock+0x40>)
    5a82:	4083      	lsls	r3, r0
    5a84:	e8d2 1fef 	ldaex	r1, [r2]
    5a88:	4319      	orrs	r1, r3
    5a8a:	e8c2 1fec 	stlex	ip, r1, [r2]
    5a8e:	f1bc 0f00 	cmp.w	ip, #0
    5a92:	d1f7      	bne.n	5a84 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    5a98:	4a09      	ldr	r2, [pc, #36]	; (5ac0 <compare_int_unlock+0x44>)
    5a9a:	4083      	lsls	r3, r0
    5a9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5aa0:	4b08      	ldr	r3, [pc, #32]	; (5ac4 <compare_int_unlock+0x48>)
    5aa2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5aa6:	fa23 f000 	lsr.w	r0, r3, r0
    5aaa:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5aac:	bf42      	ittt	mi
    5aae:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    5ab2:	4b05      	ldrmi	r3, [pc, #20]	; (5ac8 <compare_int_unlock+0x4c>)
    5ab4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5ab8:	4770      	bx	lr
    5aba:	bf00      	nop
    5abc:	2001c0bc 	.word	0x2001c0bc
    5ac0:	50015000 	.word	0x50015000
    5ac4:	2001c0b8 	.word	0x2001c0b8
    5ac8:	e000e100 	.word	0xe000e100

00005acc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5acc:	4b0d      	ldr	r3, [pc, #52]	; (5b04 <z_nrf_rtc_timer_read+0x38>)
    5ace:	6818      	ldr	r0, [r3, #0]
    5ad0:	0a01      	lsrs	r1, r0, #8
    5ad2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5ad4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5ad8:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <z_nrf_rtc_timer_read+0x3c>)
    5ada:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5ade:	1818      	adds	r0, r3, r0
    5ae0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5ae8:	d20a      	bcs.n	5b00 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5aea:	4b08      	ldr	r3, [pc, #32]	; (5b0c <z_nrf_rtc_timer_read+0x40>)
    5aec:	e9d3 2300 	ldrd	r2, r3, [r3]
    5af0:	4290      	cmp	r0, r2
    5af2:	eb71 0303 	sbcs.w	r3, r1, r3
    5af6:	d203      	bcs.n	5b00 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5af8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5afc:	f141 0100 	adc.w	r1, r1, #0
}
    5b00:	4770      	bx	lr
    5b02:	bf00      	nop
    5b04:	2001c0c0 	.word	0x2001c0c0
    5b08:	50015000 	.word	0x50015000
    5b0c:	2000a568 	.word	0x2000a568

00005b10 <compare_set>:
{
    5b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b14:	b085      	sub	sp, #20
    5b16:	4616      	mov	r6, r2
    5b18:	4698      	mov	r8, r3
    5b1a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    5b1c:	f7ff ff50 	bl	59c0 <compare_int_lock>
    5b20:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5b22:	f7ff ffd3 	bl	5acc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5b26:	42b0      	cmp	r0, r6
    5b28:	eb71 0308 	sbcs.w	r3, r1, r8
    5b2c:	d276      	bcs.n	5c1c <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
    5b2e:	4b43      	ldr	r3, [pc, #268]	; (5c3c <compare_set+0x12c>)
    5b30:	1a30      	subs	r0, r6, r0
    5b32:	eb68 0101 	sbc.w	r1, r8, r1
    5b36:	4298      	cmp	r0, r3
    5b38:	f171 0300 	sbcs.w	r3, r1, #0
    5b3c:	d27b      	bcs.n	5c36 <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
    5b3e:	4b40      	ldr	r3, [pc, #256]	; (5c40 <compare_set+0x130>)
    5b40:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5b44:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    5b48:	45d8      	cmp	r8, fp
    5b4a:	bf08      	it	eq
    5b4c:	4556      	cmpeq	r6, sl
    5b4e:	d050      	beq.n	5bf2 <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    5b54:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5b58:	4614      	mov	r4, r2
    5b5a:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5b5e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    5b62:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    5b66:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5b68:	40ab      	lsls	r3, r5
    5b6a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5b6e:	b2bf      	uxth	r7, r7
    5b70:	f107 2750 	add.w	r7, r7, #1342197760	; 0x50005000
    5b74:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    5b76:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    5b7a:	4b32      	ldr	r3, [pc, #200]	; (5c44 <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5b7c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
     return p_reg->COUNTER;
    5b80:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5b84:	1a40      	subs	r0, r0, r1
    5b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5b8a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5b8e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5b90:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    5b94:	d107      	bne.n	5ba6 <compare_set+0x96>
    5b96:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    5b9a:	2013      	movs	r0, #19
    5b9c:	f008 f931 	bl	de02 <z_impl_k_busy_wait>
    5ba0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    5ba4:	4b27      	ldr	r3, [pc, #156]	; (5c44 <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5ba6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    5baa:	eba4 000c 	sub.w	r0, r4, ip
    5bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5bb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5bb6:	bf88      	it	hi
    5bb8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5bba:	2000      	movs	r0, #0
    5bbc:	6038      	str	r0, [r7, #0]
    5bbe:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    5bc0:	9801      	ldr	r0, [sp, #4]
    5bc2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5bc6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5bca:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    5bce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5bd2:	4281      	cmp	r1, r0
    5bd4:	d006      	beq.n	5be4 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
    5bd6:	1a20      	subs	r0, r4, r0
    5bd8:	3802      	subs	r0, #2
    5bda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5bde:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5be2:	d819      	bhi.n	5c18 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
    5be4:	1aa4      	subs	r4, r4, r2
    5be6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5bea:	eb14 0a06 	adds.w	sl, r4, r6
    5bee:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    5bf2:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    5bf4:	4912      	ldr	r1, [pc, #72]	; (5c40 <compare_set+0x130>)
	cc_data[chan].callback = handler;
    5bf6:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    5bf8:	012b      	lsls	r3, r5, #4
    5bfa:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    5bfe:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    5c00:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    5c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c06:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    5c08:	4628      	mov	r0, r5
    5c0a:	9900      	ldr	r1, [sp, #0]
    5c0c:	f7ff ff36 	bl	5a7c <compare_int_unlock>
}
    5c10:	4620      	mov	r0, r4
    5c12:	b005      	add	sp, #20
    5c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c18:	4620      	mov	r0, r4
    5c1a:	e7b1      	b.n	5b80 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
    5c1c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c1e:	4a0a      	ldr	r2, [pc, #40]	; (5c48 <compare_set+0x138>)
    5c20:	40ab      	lsls	r3, r5
    5c22:	e8d2 1fef 	ldaex	r1, [r2]
    5c26:	4319      	orrs	r1, r3
    5c28:	e8c2 1fe0 	stlex	r0, r1, [r2]
    5c2c:	2800      	cmp	r0, #0
    5c2e:	d1f8      	bne.n	5c22 <compare_set+0x112>
    5c30:	46b2      	mov	sl, r6
    5c32:	46c3      	mov	fp, r8
    5c34:	e7dd      	b.n	5bf2 <compare_set+0xe2>
			return -EINVAL;
    5c36:	f06f 0415 	mvn.w	r4, #21
    5c3a:	e7e5      	b.n	5c08 <compare_set+0xf8>
    5c3c:	01000001 	.word	0x01000001
    5c40:	2000a570 	.word	0x2000a570
    5c44:	50015000 	.word	0x50015000
    5c48:	2001c0b8 	.word	0x2001c0b8

00005c4c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PRESCALER = val;
    5c4e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5c50:	f04f 30ff 	mov.w	r0, #4294967295
    5c54:	f04f 31ff 	mov.w	r1, #4294967295
    5c58:	4d16      	ldr	r5, [pc, #88]	; (5cb4 <sys_clock_driver_init+0x68>)
    5c5a:	4b17      	ldr	r3, [pc, #92]	; (5cb8 <sys_clock_driver_init+0x6c>)
    5c5c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    5c60:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5c68:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    5c6c:	2302      	movs	r3, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5c72:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    5c76:	4b11      	ldr	r3, [pc, #68]	; (5cbc <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5c78:	2101      	movs	r1, #1
    5c7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5c7e:	2015      	movs	r0, #21
    5c80:	4622      	mov	r2, r4
    5c82:	f7fd ff55 	bl	3b30 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5c86:	2015      	movs	r0, #21
    5c88:	f7fd ff20 	bl	3acc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5c8c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5c8e:	4a0c      	ldr	r2, [pc, #48]	; (5cc0 <sys_clock_driver_init+0x74>)
    5c90:	60ab      	str	r3, [r5, #8]
    5c92:	602b      	str	r3, [r5, #0]
    5c94:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5c96:	4b0b      	ldr	r3, [pc, #44]	; (5cc4 <sys_clock_driver_init+0x78>)
    5c98:	4a0b      	ldr	r2, [pc, #44]	; (5cc8 <sys_clock_driver_init+0x7c>)
    5c9a:	9300      	str	r3, [sp, #0]
    5c9c:	4620      	mov	r0, r4
    5c9e:	2300      	movs	r3, #0
    5ca0:	9401      	str	r4, [sp, #4]
    5ca2:	f7ff ff35 	bl	5b10 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5ca6:	4620      	mov	r0, r4
    5ca8:	f7ff f8da 	bl	4e60 <z_nrf_clock_control_lf_on>

	return 0;
}
    5cac:	4620      	mov	r0, r4
    5cae:	b003      	add	sp, #12
    5cb0:	bd30      	pop	{r4, r5, pc}
    5cb2:	bf00      	nop
    5cb4:	50015000 	.word	0x50015000
    5cb8:	2000a570 	.word	0x2000a570
    5cbc:	e000e100 	.word	0xe000e100
    5cc0:	2001c0bc 	.word	0x2001c0bc
    5cc4:	00005a05 	.word	0x00005a05
    5cc8:	007fffff 	.word	0x007fffff

00005ccc <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    5ccc:	4b35      	ldr	r3, [pc, #212]	; (5da4 <rtc_nrf_isr+0xd8>)
{
    5cce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5cd2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5cd6:	0791      	lsls	r1, r2, #30
    5cd8:	d50b      	bpl.n	5cf2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    5cde:	b142      	cbz	r2, 5cf2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5ce0:	2200      	movs	r2, #0
    5ce2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    5ce6:	4a30      	ldr	r2, [pc, #192]	; (5da8 <rtc_nrf_isr+0xdc>)
    5ce8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    5cec:	6813      	ldr	r3, [r2, #0]
    5cee:	3301      	adds	r3, #1
    5cf0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5cf2:	f04f 0320 	mov.w	r3, #32
    5cf6:	f3ef 8111 	mrs	r1, BASEPRI
    5cfa:	f383 8812 	msr	BASEPRI_MAX, r3
    5cfe:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5d02:	4b28      	ldr	r3, [pc, #160]	; (5da4 <rtc_nrf_isr+0xd8>)
    5d04:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5d08:	03d2      	lsls	r2, r2, #15
    5d0a:	d50e      	bpl.n	5d2a <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5d0c:	4a27      	ldr	r2, [pc, #156]	; (5dac <rtc_nrf_isr+0xe0>)
    5d0e:	e8d2 0fef 	ldaex	r0, [r2]
    5d12:	f020 0401 	bic.w	r4, r0, #1
    5d16:	e8c2 4fe5 	stlex	r5, r4, [r2]
    5d1a:	2d00      	cmp	r5, #0
    5d1c:	d1f7      	bne.n	5d0e <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5d1e:	2800      	cmp	r0, #0
    5d20:	d137      	bne.n	5d92 <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d22:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    5d26:	2a00      	cmp	r2, #0
    5d28:	d133      	bne.n	5d92 <rtc_nrf_isr+0xc6>
{
    5d2a:	2300      	movs	r3, #0
	__asm__ volatile(
    5d2c:	f381 8811 	msr	BASEPRI, r1
    5d30:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5d34:	b353      	cbz	r3, 5d8c <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
    5d36:	f7ff fec9 	bl	5acc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5d3a:	f04f 0320 	mov.w	r3, #32
    5d3e:	f3ef 8711 	mrs	r7, BASEPRI
    5d42:	f383 8812 	msr	BASEPRI_MAX, r3
    5d46:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5d4a:	4b19      	ldr	r3, [pc, #100]	; (5db0 <rtc_nrf_isr+0xe4>)
    5d4c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    5d50:	42a0      	cmp	r0, r4
    5d52:	eb71 0205 	sbcs.w	r2, r1, r5
    5d56:	f04f 0200 	mov.w	r2, #0
    5d5a:	d321      	bcc.n	5da0 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
    5d5c:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5d60:	f04f 38ff 	mov.w	r8, #4294967295
    5d64:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    5d68:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    5d6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5d6e:	e9c3 8902 	strd	r8, r9, [r3, #8]
    5d72:	4b0c      	ldr	r3, [pc, #48]	; (5da4 <rtc_nrf_isr+0xd8>)
    5d74:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    5d78:	f387 8811 	msr	BASEPRI, r7
    5d7c:	f3bf 8f6f 	isb	sy
		if (handler) {
    5d80:	b121      	cbz	r1, 5d8c <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
    5d82:	4622      	mov	r2, r4
    5d84:	462b      	mov	r3, r5
    5d86:	2000      	movs	r0, #0
    5d88:	9600      	str	r6, [sp, #0]
    5d8a:	4788      	blx	r1
}
    5d8c:	b003      	add	sp, #12
    5d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5d92:	2200      	movs	r2, #0
    5d94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    5d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5d9c:	2301      	movs	r3, #1
}
    5d9e:	e7c5      	b.n	5d2c <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5da0:	4611      	mov	r1, r2
    5da2:	e7e9      	b.n	5d78 <rtc_nrf_isr+0xac>
    5da4:	50015000 	.word	0x50015000
    5da8:	2001c0c0 	.word	0x2001c0c0
    5dac:	2001c0b8 	.word	0x2001c0b8
    5db0:	2000a570 	.word	0x2000a570

00005db4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5db4:	1c43      	adds	r3, r0, #1
{
    5db6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5db8:	d020      	beq.n	5dfc <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5dba:	2801      	cmp	r0, #1
    5dbc:	dd20      	ble.n	5e00 <sys_clock_set_timeout+0x4c>
    5dbe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5dc2:	da1f      	bge.n	5e04 <sys_clock_set_timeout+0x50>
    5dc4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5dc6:	f7ff fe81 	bl	5acc <z_nrf_rtc_timer_read>
    5dca:	4b0f      	ldr	r3, [pc, #60]	; (5e08 <sys_clock_set_timeout+0x54>)
    5dcc:	e9d3 1300 	ldrd	r1, r3, [r3]
    5dd0:	1a40      	subs	r0, r0, r1
		ticks = 0;
    5dd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5dd6:	bf28      	it	cs
    5dd8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5dda:	3001      	adds	r0, #1
    5ddc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    5dde:	480b      	ldr	r0, [pc, #44]	; (5e0c <sys_clock_set_timeout+0x58>)
    5de0:	4282      	cmp	r2, r0
    5de2:	bf28      	it	cs
    5de4:	4602      	movcs	r2, r0
    5de6:	2000      	movs	r0, #0
    5de8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5dea:	4909      	ldr	r1, [pc, #36]	; (5e10 <sys_clock_set_timeout+0x5c>)
    5dec:	9001      	str	r0, [sp, #4]
    5dee:	9100      	str	r1, [sp, #0]
    5df0:	f143 0300 	adc.w	r3, r3, #0
    5df4:	f7ff fe8c 	bl	5b10 <compare_set>
}
    5df8:	b002      	add	sp, #8
    5dfa:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5dfc:	4803      	ldr	r0, [pc, #12]	; (5e0c <sys_clock_set_timeout+0x58>)
    5dfe:	e7e1      	b.n	5dc4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5e00:	2400      	movs	r4, #0
    5e02:	e7e0      	b.n	5dc6 <sys_clock_set_timeout+0x12>
    5e04:	4c01      	ldr	r4, [pc, #4]	; (5e0c <sys_clock_set_timeout+0x58>)
    5e06:	e7de      	b.n	5dc6 <sys_clock_set_timeout+0x12>
    5e08:	2000a580 	.word	0x2000a580
    5e0c:	007fffff 	.word	0x007fffff
    5e10:	00005a05 	.word	0x00005a05

00005e14 <sys_clock_elapsed>:
{
    5e14:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5e16:	f7ff fe59 	bl	5acc <z_nrf_rtc_timer_read>
    5e1a:	4b02      	ldr	r3, [pc, #8]	; (5e24 <sys_clock_elapsed+0x10>)
    5e1c:	681b      	ldr	r3, [r3, #0]
}
    5e1e:	1ac0      	subs	r0, r0, r3
    5e20:	bd08      	pop	{r3, pc}
    5e22:	bf00      	nop
    5e24:	2000a580 	.word	0x2000a580

00005e28 <nrf_gpio_pin_clear>:
        case 1: return NRF_P1;
    5e28:	4a05      	ldr	r2, [pc, #20]	; (5e40 <nrf_gpio_pin_clear+0x18>)
    5e2a:	4b06      	ldr	r3, [pc, #24]	; (5e44 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
    5e2c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    5e30:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    5e32:	2801      	cmp	r0, #1
    5e34:	bf08      	it	eq
    5e36:	4613      	moveq	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5e38:	2201      	movs	r2, #1
    5e3a:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    5e3c:	60da      	str	r2, [r3, #12]
}
    5e3e:	4770      	bx	lr
    5e40:	50842800 	.word	0x50842800
    5e44:	50842500 	.word	0x50842500

00005e48 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    5e48:	b570      	push	{r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    5e4a:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5e4e:	2c00      	cmp	r4, #0
        case 1: return NRF_P1;
    5e50:	4e0e      	ldr	r6, [pc, #56]	; (5e8c <nrf_pin_configure+0x44>)
    5e52:	bf0e      	itee	eq
    5e54:	4615      	moveq	r5, r2
    5e56:	2501      	movne	r5, #1
    5e58:	2100      	movne	r1, #0
    5e5a:	f010 0f20 	tst.w	r0, #32
    *p_pin = pin_number & 0x1F;
    5e5e:	f000 041f 	and.w	r4, r0, #31
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    5e62:	f3c0 1281 	ubfx	r2, r0, #6, #2
        case 1: return NRF_P1;
    5e66:	480a      	ldr	r0, [pc, #40]	; (5e90 <nrf_pin_configure+0x48>)
    5e68:	bf18      	it	ne
    5e6a:	4630      	movne	r0, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    5e6c:	021b      	lsls	r3, r3, #8
    5e6e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5e72:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5e76:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    5e7a:	430a      	orrs	r2, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5e7c:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5e80:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5e84:	4322      	orrs	r2, r4
    reg->PIN_CNF[pin_number] = cnf;
    5e86:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
		     NRF_GPIO_PIN_NOSENSE);
}
    5e8a:	bd70      	pop	{r4, r5, r6, pc}
    5e8c:	50842800 	.word	0x50842800
    5e90:	50842500 	.word	0x50842500

00005e94 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    5e94:	4a05      	ldr	r2, [pc, #20]	; (5eac <nrf_gpio_pin_set+0x18>)
    5e96:	4b06      	ldr	r3, [pc, #24]	; (5eb0 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    5e98:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    5e9c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    5e9e:	2801      	cmp	r0, #1
    5ea0:	bf08      	it	eq
    5ea2:	4613      	moveq	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5ea4:	2201      	movs	r2, #1
    5ea6:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    5ea8:	609a      	str	r2, [r3, #8]
}
    5eaa:	4770      	bx	lr
    5eac:	50842800 	.word	0x50842800
    5eb0:	50842500 	.word	0x50842500

00005eb4 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    5eb4:	ea40 0301 	orr.w	r3, r0, r1
    5eb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    5ebc:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    5ebe:	b98b      	cbnz	r3, 5ee4 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    5ec0:	f240 1515 	movw	r5, #277	; 0x115
    5ec4:	4c09      	ldr	r4, [pc, #36]	; (5eec <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    5ec6:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    5ec8:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    5ecc:	4299      	cmp	r1, r3
    5ece:	d101      	bne.n	5ed4 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    5ed0:	2000      	movs	r0, #0
}
    5ed2:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    5ed4:	18c2      	adds	r2, r0, r3
    5ed6:	b2d2      	uxtb	r2, r2
    5ed8:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    5edc:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    5ee0:	3301      	adds	r3, #1
    5ee2:	e7f3      	b.n	5ecc <fprotect_area+0x18>
		return -EINVAL;
    5ee4:	f06f 0015 	mvn.w	r0, #21
    5ee8:	e7f3      	b.n	5ed2 <fprotect_area+0x1e>
    5eea:	bf00      	nop
    5eec:	50003000 	.word	0x50003000

00005ef0 <pcd_fw_copy_status_get>:
	cmd->magic = PCD_CMD_MAGIC_FAIL;
}

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
    5ef0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    5ef4:	6818      	ldr	r0, [r3, #0]
    5ef6:	4b05      	ldr	r3, [pc, #20]	; (5f0c <pcd_fw_copy_status_get+0x1c>)
    5ef8:	4298      	cmp	r0, r3
    5efa:	d005      	beq.n	5f08 <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
    5efc:	4b04      	ldr	r3, [pc, #16]	; (5f10 <pcd_fw_copy_status_get+0x20>)
    5efe:	4298      	cmp	r0, r3
    5f00:	bf14      	ite	ne
    5f02:	2002      	movne	r0, #2
    5f04:	2001      	moveq	r0, #1
    5f06:	4770      	bx	lr
		return PCD_STATUS_COPY;
    5f08:	2000      	movs	r0, #0
	}

	return PCD_STATUS_COPY_FAILED;
}
    5f0a:	4770      	bx	lr
    5f0c:	b5b4b3b6 	.word	0xb5b4b3b6
    5f10:	f103ce5d 	.word	0xf103ce5d

00005f14 <pcd_network_core_update_initiate>:
                                             bool           secure_attr,
                                             bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->EXTDOMAIN[domain_id].PERM & SPU_EXTDOMAIN_PERM_LOCK_Msk));

    p_reg->EXTDOMAIN[domain_id].PERM =
    5f14:	2210      	movs	r2, #16
    5f16:	4b0f      	ldr	r3, [pc, #60]	; (5f54 <pcd_network_core_update_initiate+0x40>)
	nrf_spu_extdomain_set(NRF_SPU, 0, false, false);
	return err;
}

int pcd_network_core_update_initiate(const void *src_addr, size_t len)
{
    5f18:	b510      	push	{r4, lr}
    5f1a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}

#if NRF_RESET_HAS_APPLICATION
NRF_STATIC_INLINE void nrf_reset_network_force_off(NRF_RESET_Type * p_reg, bool hold)
{
    p_reg->NETWORK.FORCEOFF = (hold ? RESET_NETWORK_FORCEOFF_FORCEOFF_Hold :
    5f1e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5f22:	2301      	movs	r3, #1
    5f24:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    5f28:	b188      	cbz	r0, 5f4e <pcd_network_core_update_initiate+0x3a>
    5f2a:	b181      	cbz	r1, 5f4e <pcd_network_core_update_initiate+0x3a>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    5f2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    5f30:	4c09      	ldr	r4, [pc, #36]	; (5f58 <pcd_network_core_update_initiate+0x44>)
	cmd->len = len;
    5f32:	6099      	str	r1, [r3, #8]
	cmd->data = data;
    5f34:	e9c3 4000 	strd	r4, r0, [r3]
	cmd->offset = offset;
    5f38:	f44f 4108 	mov.w	r1, #34816	; 0x8800
    5f3c:	2000      	movs	r0, #0
    5f3e:	60d9      	str	r1, [r3, #12]
    5f40:	f8c2 0614 	str.w	r0, [r2, #1556]	; 0x614
    5f44:	2200      	movs	r2, #0
    5f46:	4b03      	ldr	r3, [pc, #12]	; (5f54 <pcd_network_core_update_initiate+0x40>)
    5f48:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	return network_core_update(src_addr, len, false);
}
    5f4c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5f4e:	f06f 0015 	mvn.w	r0, #21
    5f52:	e7f7      	b.n	5f44 <pcd_network_core_update_initiate+0x30>
    5f54:	50003000 	.word	0x50003000
    5f58:	b5b4b3b6 	.word	0xb5b4b3b6

00005f5c <pcd_network_core_update>:
    5f5c:	2210      	movs	r2, #16
    5f5e:	4b17      	ldr	r3, [pc, #92]	; (5fbc <pcd_network_core_update+0x60>)

int pcd_network_core_update(const void *src_addr, size_t len)
{
    5f60:	b510      	push	{r4, lr}
    5f62:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
    5f66:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5f6a:	2301      	movs	r3, #1
    5f6c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    5f70:	b308      	cbz	r0, 5fb6 <pcd_network_core_update+0x5a>
    5f72:	b301      	cbz	r1, 5fb6 <pcd_network_core_update+0x5a>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    5f74:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	cmd->len = len;
    5f78:	6099      	str	r1, [r3, #8]
	cmd->offset = offset;
    5f7a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
	cmd->magic = PCD_CMD_MAGIC_COPY;
    5f7e:	4c10      	ldr	r4, [pc, #64]	; (5fc0 <pcd_network_core_update+0x64>)
	cmd->offset = offset;
    5f80:	60d9      	str	r1, [r3, #12]
	cmd->data = data;
    5f82:	e9c3 4000 	strd	r4, r0, [r3]
    5f86:	2300      	movs	r3, #0
    5f88:	4c0e      	ldr	r4, [pc, #56]	; (5fc4 <pcd_network_core_update+0x68>)
    5f8a:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    5f8e:	4620      	mov	r0, r4
    5f90:	f007 ff37 	bl	de02 <z_impl_k_busy_wait>
		err = pcd_fw_copy_status_get();
    5f94:	f7ff ffac 	bl	5ef0 <pcd_fw_copy_status_get>
	} while (err == PCD_STATUS_COPY);
    5f98:	2800      	cmp	r0, #0
    5f9a:	d0f8      	beq.n	5f8e <pcd_network_core_update+0x32>
	if (err == PCD_STATUS_COPY_FAILED) {
    5f9c:	2802      	cmp	r0, #2
    5f9e:	d005      	beq.n	5fac <pcd_network_core_update+0x50>
    5fa0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5fa4:	2201      	movs	r2, #1
	return 0;
    5fa6:	2000      	movs	r0, #0
    5fa8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    5fac:	2200      	movs	r2, #0
    5fae:	4b03      	ldr	r3, [pc, #12]	; (5fbc <pcd_network_core_update+0x60>)
    5fb0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	return network_core_update(src_addr, len, true);
}
    5fb4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5fb6:	f06f 0015 	mvn.w	r0, #21
    5fba:	e7f7      	b.n	5fac <pcd_network_core_update+0x50>
    5fbc:	50003000 	.word	0x50003000
    5fc0:	b5b4b3b6 	.word	0xb5b4b3b6
    5fc4:	000f4240 	.word	0x000f4240

00005fc8 <pcd_lock_ram>:
    p_reg->RAMREGION[region_id].PERM = permissions         |
    5fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
    5fcc:	4b01      	ldr	r3, [pc, #4]	; (5fd4 <pcd_lock_ram+0xc>)
    5fce:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
{
	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;

	nrf_spu_ramregion_set(NRF_SPU, region, false, NRF_SPU_MEM_PERM_READ,
			true);
}
    5fd2:	4770      	bx	lr
    5fd4:	50003000 	.word	0x50003000

00005fd8 <boot_read_image_header_hook>:
#include <dfu/pcd.h>

int boot_read_image_header_hook(int img_index, int slot,
		struct image_header *img_head)
{
	if (img_index == 1 && slot == 0) {
    5fd8:	2801      	cmp	r0, #1
    5fda:	d10f      	bne.n	5ffc <boot_read_image_header_hook+0x24>
    5fdc:	b979      	cbnz	r1, 5ffe <boot_read_image_header_hook+0x26>
		img_head->ih_magic = IMAGE_MAGIC;
    5fde:	4b08      	ldr	r3, [pc, #32]	; (6000 <boot_read_image_header_hook+0x28>)
		img_head->ih_ver.iv_major = 0;
		img_head->ih_ver.iv_minor = 0;
		img_head->ih_ver.iv_revision = 0;
		img_head->ih_ver.iv_build_num = 0;
		img_head->_pad1 = 0;
		return 0;
    5fe0:	4608      	mov	r0, r1
		img_head->ih_magic = IMAGE_MAGIC;
    5fe2:	6013      	str	r3, [r2, #0]
		img_head->ih_hdr_size = PM_MCUBOOT_PAD_SIZE;
    5fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
    5fe8:	8113      	strh	r3, [r2, #8]
		img_head->ih_img_size = PM_CPUNET_APP_SIZE;
    5fea:	f44f 335e 	mov.w	r3, #227328	; 0x37800
		img_head->ih_ver.iv_build_num = 0;
    5fee:	e9c2 1105 	strd	r1, r1, [r2, #20]
		img_head->ih_flags = 0;
    5ff2:	e9c2 3103 	strd	r3, r1, [r2, #12]
		img_head->ih_load_addr = PM_MCUBOOT_PRIMARY_1_ADDRESS;
    5ff6:	6051      	str	r1, [r2, #4]
		img_head->_pad1 = 0;
    5ff8:	61d1      	str	r1, [r2, #28]
		return 0;
    5ffa:	4770      	bx	lr
	}

	return BOOT_HOOK_REGULAR;
    5ffc:	2001      	movs	r0, #1
}
    5ffe:	4770      	bx	lr
    6000:	96f3b83d 	.word	0x96f3b83d

00006004 <boot_image_check_hook>:

fih_int boot_image_check_hook(int img_index, int slot)
{
	if (img_index == 1 && slot == 0) {
    6004:	2801      	cmp	r0, #1
    6006:	d103      	bne.n	6010 <boot_image_check_hook+0xc>
    6008:	b919      	cbnz	r1, 6012 <boot_image_check_hook+0xe>
		FIH_RET(FIH_SUCCESS);
    600a:	4b02      	ldr	r3, [pc, #8]	; (6014 <boot_image_check_hook+0x10>)
    600c:	6818      	ldr	r0, [r3, #0]
    600e:	4770      	bx	lr
	}

	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
    6010:	2001      	movs	r0, #1
}
    6012:	4770      	bx	lr
    6014:	2000a718 	.word	0x2000a718

00006018 <network_core_update>:

	return BOOT_HOOK_REGULAR;
}

int network_core_update(bool wait)
{
    6018:	b513      	push	{r0, r1, r4, lr}
    601a:	4604      	mov	r4, r0
    601c:	4810      	ldr	r0, [pc, #64]	; (6060 <network_core_update+0x48>)
    601e:	f007 fc7f 	bl	d920 <z_device_is_ready>
	static const struct device *mock_flash_dev;
	void *mock_flash;
	size_t mock_size;

	mock_flash_dev = DEVICE_DT_GET(DT_NODELABEL(PM_MCUBOOT_PRIMARY_1_DEV));
	if (!device_is_ready(mock_flash_dev)) {
    6022:	b1b0      	cbz	r0, 6052 <network_core_update+0x3a>
		union { uintptr_t x; size_t * val; } parm1 = { .val = mock_size };
		return (void *) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY);
	}
#endif
	compiler_barrier();
	return z_impl_flash_simulator_get_memory(dev, mock_size);
    6024:	2000      	movs	r0, #0
    6026:	a901      	add	r1, sp, #4
    6028:	f7ff fc24 	bl	5874 <z_impl_flash_simulator_get_memory>
		return -ENODEV;
	}

	mock_flash = flash_simulator_get_memory(NULL, &mock_size);
	hdr = (struct image_header *) mock_flash;
	if (hdr->ih_magic == IMAGE_MAGIC) {
    602c:	4b0d      	ldr	r3, [pc, #52]	; (6064 <network_core_update+0x4c>)
    602e:	6802      	ldr	r2, [r0, #0]
    6030:	429a      	cmp	r2, r3
    6032:	d111      	bne.n	6058 <network_core_update+0x40>
		uint32_t fw_size = hdr->ih_img_size;
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    6034:	8903      	ldrh	r3, [r0, #8]
		uint32_t fw_size = hdr->ih_img_size;
    6036:	68c1      	ldr	r1, [r0, #12]
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    6038:	4418      	add	r0, r3
		uint32_t *vtable = (uint32_t *)(vtable_addr);
		uint32_t reset_addr = vtable[1];

		if (reset_addr > PM_CPUNET_B0N_ADDRESS) {
    603a:	6843      	ldr	r3, [r0, #4]
    603c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    6040:	d90a      	bls.n	6058 <network_core_update+0x40>
			if (wait) {
    6042:	b11c      	cbz	r4, 604c <network_core_update+0x34>
				return pcd_network_core_update(vtable, fw_size);
    6044:	f7ff ff8a 	bl	5f5c <pcd_network_core_update>
		}
	}

	/* No IMAGE_MAGIC no valid image */
	return -ENODATA;
}
    6048:	b002      	add	sp, #8
    604a:	bd10      	pop	{r4, pc}
				return pcd_network_core_update_initiate(vtable, fw_size);
    604c:	f7ff ff62 	bl	5f14 <pcd_network_core_update_initiate>
    6050:	e7fa      	b.n	6048 <network_core_update+0x30>
		return -ENODEV;
    6052:	f06f 0012 	mvn.w	r0, #18
    6056:	e7f7      	b.n	6048 <network_core_update+0x30>
	return -ENODATA;
    6058:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    605c:	e7f4      	b.n	6048 <network_core_update+0x30>
    605e:	bf00      	nop
    6060:	0000e050 	.word	0x0000e050
    6064:	96f3b83d 	.word	0x96f3b83d

00006068 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    6068:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    606a:	6881      	ldr	r1, [r0, #8]
{
    606c:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    606e:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    6070:	f021 0407 	bic.w	r4, r1, #7
{
    6074:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    6076:	f004 ff16 	bl	aea6 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    607a:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    607c:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    607e:	4668      	mov	r0, sp
    6080:	f005 fa4e 	bl	b520 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    6084:	2210      	movs	r2, #16
    6086:	4668      	mov	r0, sp
    6088:	4906      	ldr	r1, [pc, #24]	; (60a4 <boot_write_magic+0x3c>)
    608a:	f005 fa3e 	bl	b50a <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    608e:	2310      	movs	r3, #16
    6090:	466a      	mov	r2, sp
    6092:	4621      	mov	r1, r4
    6094:	4628      	mov	r0, r5
    6096:	f004 fed6 	bl	ae46 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    609a:	3800      	subs	r0, #0
    609c:	bf18      	it	ne
    609e:	2001      	movne	r0, #1
    60a0:	b005      	add	sp, #20
    60a2:	bd30      	pop	{r4, r5, pc}
    60a4:	0000e86a 	.word	0x0000e86a

000060a8 <boot_read_swap_state>:
{
    60a8:	b530      	push	{r4, r5, lr}
    60aa:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    60ac:	6881      	ldr	r1, [r0, #8]
{
    60ae:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    60b0:	2310      	movs	r3, #16
    60b2:	aa02      	add	r2, sp, #8
    60b4:	3910      	subs	r1, #16
{
    60b6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    60b8:	f004 feb0 	bl	ae1c <flash_area_read>
    if (rc < 0) {
    60bc:	2800      	cmp	r0, #0
    60be:	da02      	bge.n	60c6 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    60c0:	2001      	movs	r0, #1
}
    60c2:	b007      	add	sp, #28
    60c4:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    60c6:	2210      	movs	r2, #16
    60c8:	4628      	mov	r0, r5
    60ca:	a902      	add	r1, sp, #8
    60cc:	f005 fe08 	bl	bce0 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    60d0:	b390      	cbz	r0, 6138 <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
    60d2:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    60d4:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    60d6:	4628      	mov	r0, r5
    60d8:	f005 fe13 	bl	bd02 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    60dc:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    60de:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    60e0:	f10d 0207 	add.w	r2, sp, #7
    60e4:	4628      	mov	r0, r5
    60e6:	f004 fe99 	bl	ae1c <flash_area_read>
    if (rc < 0) {
    60ea:	2800      	cmp	r0, #0
    60ec:	dbe8      	blt.n	60c0 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    60ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60f2:	4628      	mov	r0, r5
    60f4:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    60f8:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    60fa:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    60fc:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    60fe:	2201      	movs	r2, #1
    6100:	f10d 0107 	add.w	r1, sp, #7
    6104:	f005 fdec 	bl	bce0 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    6108:	b910      	cbnz	r0, 6110 <boot_read_swap_state+0x68>
    610a:	7863      	ldrb	r3, [r4, #1]
    610c:	2b04      	cmp	r3, #4
    610e:	d903      	bls.n	6118 <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    6110:	2301      	movs	r3, #1
    6112:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    6114:	2300      	movs	r3, #0
    6116:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6118:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    611a:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    611c:	3a18      	subs	r2, #24
    611e:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    6122:	3a08      	subs	r2, #8
    6124:	1ca1      	adds	r1, r4, #2
    6126:	f005 fe06 	bl	bd36 <boot_read_flag>
    if (rc) {
    612a:	2800      	cmp	r0, #0
    612c:	d1c8      	bne.n	60c0 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    612e:	4628      	mov	r0, r5
    6130:	1ce1      	adds	r1, r4, #3
    6132:	f005 fe1d 	bl	bd70 <boot_read_image_ok>
    6136:	e7c4      	b.n	60c2 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    6138:	2210      	movs	r2, #16
    613a:	4904      	ldr	r1, [pc, #16]	; (614c <boot_read_swap_state+0xa4>)
    613c:	a802      	add	r0, sp, #8
    613e:	f005 f9bb 	bl	b4b8 <memcmp>
        return BOOT_MAGIC_GOOD;
    6142:	2800      	cmp	r0, #0
    6144:	bf14      	ite	ne
    6146:	2302      	movne	r3, #2
    6148:	2301      	moveq	r3, #1
    614a:	e7c3      	b.n	60d4 <boot_read_swap_state+0x2c>
    614c:	0000e86a 	.word	0x0000e86a

00006150 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    6150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6154:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    6156:	4669      	mov	r1, sp
{
    6158:	4604      	mov	r4, r0
    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    615a:	f005 fd9d 	bl	bc98 <boot_read_swap_state_primary_slot_hook>
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    615e:	2801      	cmp	r0, #1
    6160:	d108      	bne.n	6174 <boot_swap_type_multi+0x24>
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6162:	2c00      	cmp	r4, #0
    6164:	d042      	beq.n	61ec <boot_swap_type_multi+0x9c>
    6166:	2c01      	cmp	r4, #1
    6168:	bf0c      	ite	eq
    616a:	2001      	moveq	r0, #1
    616c:	20ff      	movne	r0, #255	; 0xff
    616e:	4669      	mov	r1, sp
    6170:	f005 fe04 	bl	bd7c <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    6174:	2800      	cmp	r0, #0
    6176:	d13f      	bne.n	61f8 <boot_swap_type_multi+0xa8>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6178:	2c00      	cmp	r4, #0
    617a:	d039      	beq.n	61f0 <boot_swap_type_multi+0xa0>
    617c:	2c01      	cmp	r4, #1
    617e:	bf0c      	ite	eq
    6180:	200b      	moveq	r0, #11
    6182:	20ff      	movne	r0, #255	; 0xff
    6184:	a902      	add	r1, sp, #8
    6186:	f005 fdf9 	bl	bd7c <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    618a:	2801      	cmp	r0, #1
    618c:	d132      	bne.n	61f4 <boot_swap_type_multi+0xa4>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    618e:	2303      	movs	r3, #3
    6190:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    6194:	f88d 300b 	strb.w	r3, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    6198:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    619a:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    619e:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    61a2:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    61a6:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    61aa:	f89d 9002 	ldrb.w	r9, [sp, #2]
    61ae:	4a18      	ldr	r2, [pc, #96]	; (6210 <boot_swap_type_multi+0xc0>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    61b0:	4629      	mov	r1, r5
    61b2:	7810      	ldrb	r0, [r2, #0]
    61b4:	f005 fdab 	bl	bd0e <boot_magic_compatible_check>
    61b8:	b310      	cbz	r0, 6200 <boot_swap_type_multi+0xb0>
            boot_magic_compatible_check(table->magic_secondary_slot,
    61ba:	4631      	mov	r1, r6
    61bc:	7850      	ldrb	r0, [r2, #1]
    61be:	f005 fda6 	bl	bd0e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    61c2:	b1e8      	cbz	r0, 6200 <boot_swap_type_multi+0xb0>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    61c4:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    61c6:	2b04      	cmp	r3, #4
    61c8:	d001      	beq.n	61ce <boot_swap_type_multi+0x7e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    61ca:	42bb      	cmp	r3, r7
    61cc:	d118      	bne.n	6200 <boot_swap_type_multi+0xb0>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    61ce:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    61d0:	2b04      	cmp	r3, #4
    61d2:	d001      	beq.n	61d8 <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    61d4:	4543      	cmp	r3, r8
    61d6:	d113      	bne.n	6200 <boot_swap_type_multi+0xb0>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    61d8:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    61da:	2b04      	cmp	r3, #4
    61dc:	d10e      	bne.n	61fc <boot_swap_type_multi+0xac>
            BOOT_LOG_INF("Swap type: %s",
    61de:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    61e0:	1e83      	subs	r3, r0, #2
    61e2:	2b02      	cmp	r3, #2
    61e4:	d808      	bhi.n	61f8 <boot_swap_type_multi+0xa8>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    61e6:	b005      	add	sp, #20
    61e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    61ec:	2004      	movs	r0, #4
    61ee:	e7be      	b.n	616e <boot_swap_type_multi+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    61f0:	2002      	movs	r0, #2
    61f2:	e7c7      	b.n	6184 <boot_swap_type_multi+0x34>
    } else if (rc) {
    61f4:	2800      	cmp	r0, #0
    61f6:	d0cf      	beq.n	6198 <boot_swap_type_multi+0x48>
        return BOOT_SWAP_TYPE_PANIC;
    61f8:	20ff      	movs	r0, #255	; 0xff
    61fa:	e7f4      	b.n	61e6 <boot_swap_type_multi+0x96>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    61fc:	454b      	cmp	r3, r9
    61fe:	d0ee      	beq.n	61de <boot_swap_type_multi+0x8e>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    6200:	3401      	adds	r4, #1
    6202:	2c03      	cmp	r4, #3
    6204:	f102 0206 	add.w	r2, r2, #6
    6208:	d1d2      	bne.n	61b0 <boot_swap_type_multi+0x60>
    return BOOT_SWAP_TYPE_NONE;
    620a:	2001      	movs	r0, #1
    620c:	e7eb      	b.n	61e6 <boot_swap_type_multi+0x96>
    620e:	bf00      	nop
    6210:	0000ebe4 	.word	0x0000ebe4

00006214 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    6214:	6801      	ldr	r1, [r0, #0]
    6216:	4a0e      	ldr	r2, [pc, #56]	; (6250 <verify_header+0x3c>)
{
    6218:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    621a:	4291      	cmp	r1, r2
    621c:	d115      	bne.n	624a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    621e:	69c1      	ldr	r1, [r0, #28]
    6220:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    6224:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    6228:	4291      	cmp	r1, r2
    622a:	d10e      	bne.n	624a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    622c:	6882      	ldr	r2, [r0, #8]
    622e:	2a01      	cmp	r2, #1
    6230:	d80b      	bhi.n	624a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    6232:	68c2      	ldr	r2, [r0, #12]
    6234:	b112      	cbz	r2, 623c <verify_header+0x28>
    6236:	6901      	ldr	r1, [r0, #16]
    6238:	428a      	cmp	r2, r1
    623a:	d006      	beq.n	624a <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    623c:	6958      	ldr	r0, [r3, #20]
    623e:	b128      	cbz	r0, 624c <verify_header+0x38>
    6240:	699b      	ldr	r3, [r3, #24]
    6242:	1a1b      	subs	r3, r3, r0
    6244:	4258      	negs	r0, r3
    6246:	4158      	adcs	r0, r3
    6248:	4770      	bx	lr
        return( 1 );
    624a:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    624c:	4770      	bx	lr
    624e:	bf00      	nop
    6250:	ff00aa55 	.word	0xff00aa55

00006254 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    6254:	4b0d      	ldr	r3, [pc, #52]	; (628c <verify_chain+0x38>)
{
    6256:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    6258:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    625a:	b1a6      	cbz	r6, 6286 <verify_chain+0x32>
    625c:	4630      	mov	r0, r6
    625e:	f7ff ffd9 	bl	6214 <verify_header>
    6262:	4604      	mov	r4, r0
    6264:	b978      	cbnz	r0, 6286 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    6266:	68f3      	ldr	r3, [r6, #12]
    6268:	b96b      	cbnz	r3, 6286 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    626a:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    626c:	b90d      	cbnz	r5, 6272 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    626e:	4620      	mov	r0, r4
    6270:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    6272:	4628      	mov	r0, r5
    6274:	f7ff ffce 	bl	6214 <verify_header>
    6278:	b928      	cbnz	r0, 6286 <verify_chain+0x32>
        if( cur->prev != prv )
    627a:	68eb      	ldr	r3, [r5, #12]
    627c:	42b3      	cmp	r3, r6
    627e:	d102      	bne.n	6286 <verify_chain+0x32>
        cur = cur->next;
    6280:	462e      	mov	r6, r5
    6282:	692d      	ldr	r5, [r5, #16]
    6284:	e7f2      	b.n	626c <verify_chain+0x18>
        return( 1 );
    6286:	2401      	movs	r4, #1
    6288:	e7f1      	b.n	626e <verify_chain+0x1a>
    628a:	bf00      	nop
    628c:	2001c0c4 	.word	0x2001c0c4

00006290 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    6290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    6294:	4f40      	ldr	r7, [pc, #256]	; (6398 <buffer_alloc_calloc+0x108>)
    6296:	683c      	ldr	r4, [r7, #0]
    6298:	b1d4      	cbz	r4, 62d0 <buffer_alloc_calloc+0x40>
    629a:	68bc      	ldr	r4, [r7, #8]
    629c:	b1c4      	cbz	r4, 62d0 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    629e:	2800      	cmp	r0, #0
    62a0:	d04d      	beq.n	633e <buffer_alloc_calloc+0xae>
    62a2:	2900      	cmp	r1, #0
    62a4:	d04b      	beq.n	633e <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    62a6:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    62aa:	fbb5 f0f0 	udiv	r0, r5, r0
    62ae:	4288      	cmp	r0, r1
    62b0:	d145      	bne.n	633e <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    62b2:	1d28      	adds	r0, r5, #4
    62b4:	d843      	bhi.n	633e <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    62b6:	07a9      	lsls	r1, r5, #30
    62b8:	d00d      	beq.n	62d6 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    62ba:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    62be:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    62c0:	68fc      	ldr	r4, [r7, #12]
    62c2:	e003      	b.n	62cc <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    62c4:	6863      	ldr	r3, [r4, #4]
    62c6:	42b3      	cmp	r3, r6
    62c8:	d23b      	bcs.n	6342 <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    62ca:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    62cc:	2c00      	cmp	r4, #0
    62ce:	d1f9      	bne.n	62c4 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    62d0:	4620      	mov	r0, r4
    62d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    62d6:	462e      	mov	r6, r5
    62d8:	e7f2      	b.n	62c0 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    62da:	60f8      	str	r0, [r7, #12]
    62dc:	e044      	b.n	6368 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    62de:	f106 0c20 	add.w	ip, r6, #32
    62e2:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    62e6:	3920      	subs	r1, #32
    62e8:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    62ea:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
    62ec:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 639c <buffer_alloc_calloc+0x10c>
    new->prev = cur;
    62f0:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
    62f4:	6921      	ldr	r1, [r4, #16]
    62f6:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    62f8:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    62fc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 63a0 <buffer_alloc_calloc+0x110>
    6300:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    6304:	b101      	cbz	r1, 6308 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    6306:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    6308:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    630c:	b1aa      	cbz	r2, 633a <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    630e:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    6310:	699a      	ldr	r2, [r3, #24]
    6312:	b102      	cbz	r2, 6316 <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    6314:	6153      	str	r3, [r2, #20]
    cur->next = new;
    6316:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    6318:	2300      	movs	r3, #0
    cur->alloc = 1;
    631a:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
    631e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    6322:	693b      	ldr	r3, [r7, #16]
    cur->size = len;
    6324:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    6328:	07db      	lsls	r3, r3, #31
    632a:	d52d      	bpl.n	6388 <buffer_alloc_calloc+0xf8>
    632c:	f7ff ff92 	bl	6254 <verify_chain>
    6330:	b350      	cbz	r0, 6388 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    6332:	4b1c      	ldr	r3, [pc, #112]	; (63a4 <buffer_alloc_calloc+0x114>)
    6334:	4648      	mov	r0, r9
    6336:	681b      	ldr	r3, [r3, #0]
    6338:	e025      	b.n	6386 <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    633a:	60fb      	str	r3, [r7, #12]
    633c:	e7e8      	b.n	6310 <buffer_alloc_calloc+0x80>
        return( NULL );
    633e:	2400      	movs	r4, #0
    6340:	e7c6      	b.n	62d0 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    6342:	68a3      	ldr	r3, [r4, #8]
    6344:	b11b      	cbz	r3, 634e <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    6346:	4b17      	ldr	r3, [pc, #92]	; (63a4 <buffer_alloc_calloc+0x114>)
    6348:	2001      	movs	r0, #1
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	4798      	blx	r3
            cur->prev_free->next_free = cur->next_free;
    634e:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    if( cur->size - len < sizeof(memory_header) +
    6352:	6861      	ldr	r1, [r4, #4]
    6354:	f104 0820 	add.w	r8, r4, #32
    6358:	1b89      	subs	r1, r1, r6
    635a:	2923      	cmp	r1, #35	; 0x23
    635c:	d8bf      	bhi.n	62de <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    635e:	2301      	movs	r3, #1
    6360:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    6362:	2a00      	cmp	r2, #0
    6364:	d0b9      	beq.n	62da <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    6366:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    6368:	69a3      	ldr	r3, [r4, #24]
    636a:	b103      	cbz	r3, 636e <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    636c:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    636e:	2300      	movs	r3, #0
        cur->next_free = NULL;
    6370:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    6374:	693b      	ldr	r3, [r7, #16]
    6376:	07da      	lsls	r2, r3, #31
    6378:	d506      	bpl.n	6388 <buffer_alloc_calloc+0xf8>
    637a:	f7ff ff6b 	bl	6254 <verify_chain>
    637e:	b118      	cbz	r0, 6388 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    6380:	2001      	movs	r0, #1
    6382:	4b08      	ldr	r3, [pc, #32]	; (63a4 <buffer_alloc_calloc+0x114>)
    6384:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    6386:	4798      	blx	r3
    memset( ret, 0, original_len );
    6388:	462a      	mov	r2, r5
    638a:	2100      	movs	r1, #0
    638c:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    638e:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    6390:	f005 f8c6 	bl	b520 <memset>
    return( ret );
    6394:	e79c      	b.n	62d0 <buffer_alloc_calloc+0x40>
    6396:	bf00      	nop
    6398:	2001c0c4 	.word	0x2001c0c4
    639c:	ff00aa55 	.word	0xff00aa55
    63a0:	ee119966 	.word	0xee119966
    63a4:	2000a154 	.word	0x2000a154

000063a8 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    63a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    63ac:	4605      	mov	r5, r0
    63ae:	2800      	cmp	r0, #0
    63b0:	d07c      	beq.n	64ac <buffer_alloc_free+0x104>
    63b2:	4f3f      	ldr	r7, [pc, #252]	; (64b0 <buffer_alloc_free+0x108>)
    63b4:	683b      	ldr	r3, [r7, #0]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d078      	beq.n	64ac <buffer_alloc_free+0x104>
    63ba:	68ba      	ldr	r2, [r7, #8]
    63bc:	2a00      	cmp	r2, #0
    63be:	d075      	beq.n	64ac <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    63c0:	4283      	cmp	r3, r0
    63c2:	d803      	bhi.n	63cc <buffer_alloc_free+0x24>
    63c4:	687a      	ldr	r2, [r7, #4]
    63c6:	4413      	add	r3, r2
    63c8:	4298      	cmp	r0, r3
    63ca:	d303      	bcc.n	63d4 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    63cc:	4b39      	ldr	r3, [pc, #228]	; (64b4 <buffer_alloc_free+0x10c>)
    63ce:	2001      	movs	r0, #1
    63d0:	681b      	ldr	r3, [r3, #0]
    63d2:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    63d4:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    63d8:	4620      	mov	r0, r4
    63da:	f7ff ff1b 	bl	6214 <verify_header>
    63de:	b118      	cbz	r0, 63e8 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    63e0:	4b34      	ldr	r3, [pc, #208]	; (64b4 <buffer_alloc_free+0x10c>)
    63e2:	2001      	movs	r0, #1
    63e4:	681b      	ldr	r3, [r3, #0]
    63e6:	4798      	blx	r3

    if( hdr->alloc != 1 )
    63e8:	f855 3c18 	ldr.w	r3, [r5, #-24]
    63ec:	2b01      	cmp	r3, #1
    63ee:	d003      	beq.n	63f8 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    63f0:	4b30      	ldr	r3, [pc, #192]	; (64b4 <buffer_alloc_free+0x10c>)
    63f2:	2001      	movs	r0, #1
    63f4:	681b      	ldr	r3, [r3, #0]
    63f6:	4798      	blx	r3
    }

    hdr->alloc = 0;
    63f8:	2300      	movs	r3, #0
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    63fa:	f855 6c14 	ldr.w	r6, [r5, #-20]
    hdr->alloc = 0;
    63fe:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    6402:	b1ae      	cbz	r6, 6430 <buffer_alloc_free+0x88>
    6404:	68b2      	ldr	r2, [r6, #8]
    6406:	b992      	cbnz	r2, 642e <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    6408:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    640c:	f103 0220 	add.w	r2, r3, #32
    6410:	6873      	ldr	r3, [r6, #4]
    6412:	4413      	add	r3, r2
    6414:	6073      	str	r3, [r6, #4]
        hdr->prev->next = hdr->next;
    6416:	f855 3c10 	ldr.w	r3, [r5, #-16]
    641a:	6133      	str	r3, [r6, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    641c:	b103      	cbz	r3, 6420 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    641e:	60de      	str	r6, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    6420:	4620      	mov	r0, r4
    6422:	2220      	movs	r2, #32
    6424:	2100      	movs	r1, #0
    6426:	f005 f87b 	bl	b520 <memset>
    642a:	4623      	mov	r3, r4
    642c:	4634      	mov	r4, r6
    memory_header *hdr, *old = NULL;
    642e:	461e      	mov	r6, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    6430:	6920      	ldr	r0, [r4, #16]
    6432:	2800      	cmp	r0, #0
    6434:	d032      	beq.n	649c <buffer_alloc_free+0xf4>
    6436:	6883      	ldr	r3, [r0, #8]
    6438:	2b00      	cmp	r3, #0
    643a:	d12f      	bne.n	649c <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    643c:	6863      	ldr	r3, [r4, #4]
    643e:	6842      	ldr	r2, [r0, #4]
    6440:	3320      	adds	r3, #32
    6442:	4413      	add	r3, r2
    6444:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    6446:	6903      	ldr	r3, [r0, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    6448:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->next = hdr->next->next;
    644c:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    644e:	b9da      	cbnz	r2, 6488 <buffer_alloc_free+0xe0>
    6450:	bb01      	cbnz	r1, 6494 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    6452:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    6454:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    6456:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    6458:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    645a:	b1ea      	cbz	r2, 6498 <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    645c:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    645e:	69a2      	ldr	r2, [r4, #24]
    6460:	b102      	cbz	r2, 6464 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    6462:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    6464:	b103      	cbz	r3, 6468 <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    6466:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    6468:	2220      	movs	r2, #32
    646a:	2100      	movs	r1, #0
    646c:	f005 f858 	bl	b520 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    6470:	693b      	ldr	r3, [r7, #16]
    6472:	079b      	lsls	r3, r3, #30
    6474:	d51a      	bpl.n	64ac <buffer_alloc_free+0x104>
    6476:	f7ff feed 	bl	6254 <verify_chain>
    647a:	b1b8      	cbz	r0, 64ac <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
}
    647c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    6480:	4b0c      	ldr	r3, [pc, #48]	; (64b4 <buffer_alloc_free+0x10c>)
    6482:	2001      	movs	r0, #1
    6484:	681b      	ldr	r3, [r3, #0]
    6486:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    6488:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    648a:	69a1      	ldr	r1, [r4, #24]
    648c:	2900      	cmp	r1, #0
    648e:	d0e0      	beq.n	6452 <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    6490:	614a      	str	r2, [r1, #20]
    6492:	e7de      	b.n	6452 <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    6494:	60f9      	str	r1, [r7, #12]
    6496:	e7f8      	b.n	648a <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    6498:	60fc      	str	r4, [r7, #12]
    649a:	e7e0      	b.n	645e <buffer_alloc_free+0xb6>
    if( old == NULL )
    649c:	2e00      	cmp	r6, #0
    649e:	d1e7      	bne.n	6470 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    64a0:	68fb      	ldr	r3, [r7, #12]
    64a2:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    64a4:	b103      	cbz	r3, 64a8 <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    64a6:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    64a8:	60fc      	str	r4, [r7, #12]
    64aa:	e7e1      	b.n	6470 <buffer_alloc_free+0xc8>
}
    64ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64b0:	2001c0c4 	.word	0x2001c0c4
    64b4:	2000a154 	.word	0x2000a154

000064b8 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    64b8:	b538      	push	{r3, r4, r5, lr}
    64ba:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    64bc:	2214      	movs	r2, #20
    64be:	2100      	movs	r1, #0
{
    64c0:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    64c2:	4812      	ldr	r0, [pc, #72]	; (650c <mbedtls_memory_buffer_alloc_init+0x54>)
    64c4:	f005 f82c 	bl	b520 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    64c8:	4911      	ldr	r1, [pc, #68]	; (6510 <mbedtls_memory_buffer_alloc_init+0x58>)
    64ca:	4812      	ldr	r0, [pc, #72]	; (6514 <mbedtls_memory_buffer_alloc_init+0x5c>)
    64cc:	f000 f832 	bl	6534 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    64d0:	2d23      	cmp	r5, #35	; 0x23
    64d2:	d91a      	bls.n	650a <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    64d4:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    64d8:	bf1f      	itttt	ne
    64da:	3d04      	subne	r5, #4
    64dc:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    64de:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    64e2:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    64e4:	462a      	mov	r2, r5
    64e6:	2100      	movs	r1, #0
    64e8:	4620      	mov	r0, r4
    64ea:	f005 f819 	bl	b520 <memset>

    heap.buf = buf;
    64ee:	4b07      	ldr	r3, [pc, #28]	; (650c <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    64f0:	4a09      	ldr	r2, [pc, #36]	; (6518 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
    64f2:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
    64f6:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
    64f8:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    64fa:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    64fe:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    6500:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    6504:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    6506:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    6508:	60dc      	str	r4, [r3, #12]
}
    650a:	bd38      	pop	{r3, r4, r5, pc}
    650c:	2001c0c4 	.word	0x2001c0c4
    6510:	000063a9 	.word	0x000063a9
    6514:	00006291 	.word	0x00006291
    6518:	ff00aa55 	.word	0xff00aa55

0000651c <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    651c:	4b01      	ldr	r3, [pc, #4]	; (6524 <mbedtls_calloc+0x8>)
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	4718      	bx	r3
    6522:	bf00      	nop
    6524:	2000a150 	.word	0x2000a150

00006528 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    6528:	4b01      	ldr	r3, [pc, #4]	; (6530 <mbedtls_free+0x8>)
    652a:	681b      	ldr	r3, [r3, #0]
    652c:	4718      	bx	r3
    652e:	bf00      	nop
    6530:	2000a158 	.word	0x2000a158

00006534 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    6534:	4b02      	ldr	r3, [pc, #8]	; (6540 <mbedtls_platform_set_calloc_free+0xc>)
    6536:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    6538:	4b02      	ldr	r3, [pc, #8]	; (6544 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    653a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    653c:	6019      	str	r1, [r3, #0]
}
    653e:	4770      	bx	lr
    6540:	2000a150 	.word	0x2000a150
    6544:	2000a158 	.word	0x2000a158

00006548 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    654a:	f100 0608 	add.w	r6, r0, #8
    654e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6550:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6552:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    6554:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    6556:	f005 ffa5 	bl	c4a4 <mbedtls_mpi_size>
    655a:	4287      	cmp	r7, r0
    655c:	d116      	bne.n	658c <rsa_check_context.constprop.0+0x44>
    655e:	6863      	ldr	r3, [r4, #4]
    6560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6564:	d812      	bhi.n	658c <rsa_check_context.constprop.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    6566:	2100      	movs	r1, #0
    6568:	4630      	mov	r0, r6
    656a:	f006 f8fa 	bl	c762 <mbedtls_mpi_cmp_int>
    656e:	2800      	cmp	r0, #0
    6570:	dd0c      	ble.n	658c <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    6572:	2100      	movs	r1, #0
    6574:	4630      	mov	r0, r6
    6576:	f005 ff68 	bl	c44a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    657a:	b138      	cbz	r0, 658c <rsa_check_context.constprop.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    657c:	b945      	cbnz	r5, 6590 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    657e:	2100      	movs	r1, #0
    6580:	f104 0014 	add.w	r0, r4, #20
    6584:	f006 f8ed 	bl	c762 <mbedtls_mpi_cmp_int>
    6588:	2800      	cmp	r0, #0
    658a:	dc1e      	bgt.n	65ca <rsa_check_context.constprop.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    658c:	481b      	ldr	r0, [pc, #108]	; (65fc <rsa_check_context.constprop.0+0xb4>)
    658e:	e01e      	b.n	65ce <rsa_check_context.constprop.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    6590:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    6594:	2100      	movs	r1, #0
    6596:	4630      	mov	r0, r6
    6598:	f006 f8e3 	bl	c762 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    659c:	2800      	cmp	r0, #0
    659e:	ddf5      	ble.n	658c <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    65a0:	2100      	movs	r1, #0
    65a2:	4630      	mov	r0, r6
    65a4:	f005 ff51 	bl	c44a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    65a8:	2800      	cmp	r0, #0
    65aa:	d0ef      	beq.n	658c <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    65ac:	f104 0638 	add.w	r6, r4, #56	; 0x38
    65b0:	2100      	movs	r1, #0
    65b2:	4630      	mov	r0, r6
    65b4:	f006 f8d5 	bl	c762 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    65b8:	2800      	cmp	r0, #0
    65ba:	dde7      	ble.n	658c <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    65bc:	2100      	movs	r1, #0
    65be:	4630      	mov	r0, r6
    65c0:	f005 ff43 	bl	c44a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    65c4:	2800      	cmp	r0, #0
    65c6:	d1da      	bne.n	657e <rsa_check_context.constprop.0+0x36>
    65c8:	e7e0      	b.n	658c <rsa_check_context.constprop.0+0x44>
    if( is_priv &&
    65ca:	b90d      	cbnz	r5, 65d0 <rsa_check_context.constprop.0+0x88>
    }
#endif

    return( 0 );
    65cc:	2000      	movs	r0, #0
}
    65ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    65d0:	2100      	movs	r1, #0
    65d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    65d6:	f006 f8c4 	bl	c762 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    65da:	2800      	cmp	r0, #0
    65dc:	ddd6      	ble.n	658c <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    65de:	2100      	movs	r1, #0
    65e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
    65e4:	f006 f8bd 	bl	c762 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    65e8:	2800      	cmp	r0, #0
    65ea:	ddcf      	ble.n	658c <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    65ec:	2100      	movs	r1, #0
    65ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    65f2:	f006 f8b6 	bl	c762 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    65f6:	2800      	cmp	r0, #0
    65f8:	dce8      	bgt.n	65cc <rsa_check_context.constprop.0+0x84>
    65fa:	e7c7      	b.n	658c <rsa_check_context.constprop.0+0x44>
    65fc:	ffffbf80 	.word	0xffffbf80

00006600 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    6600:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6602:	2100      	movs	r1, #0
{
    6604:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    6606:	f7ff ff9f 	bl	6548 <rsa_check_context.constprop.0>
    660a:	4605      	mov	r5, r0
    660c:	b9b8      	cbnz	r0, 663e <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    660e:	f104 0608 	add.w	r6, r4, #8
    6612:	4630      	mov	r0, r6
    6614:	f005 ff2a 	bl	c46c <mbedtls_mpi_bitlen>
    6618:	287f      	cmp	r0, #127	; 0x7f
    661a:	d910      	bls.n	663e <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    661c:	3414      	adds	r4, #20
    661e:	4629      	mov	r1, r5
    6620:	4620      	mov	r0, r4
    6622:	f005 ff12 	bl	c44a <mbedtls_mpi_get_bit>
    6626:	b150      	cbz	r0, 663e <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    6628:	4620      	mov	r0, r4
    662a:	f005 ff1f 	bl	c46c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    662e:	2801      	cmp	r0, #1
    6630:	d905      	bls.n	663e <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    6632:	4631      	mov	r1, r6
    6634:	4620      	mov	r0, r4
    6636:	f006 f853 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    663a:	2800      	cmp	r0, #0
    663c:	db00      	blt.n	6640 <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    663e:	4d01      	ldr	r5, [pc, #4]	; (6644 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    6640:	4628      	mov	r0, r5
    6642:	bd70      	pop	{r4, r5, r6, pc}
    6644:	ffffbe00 	.word	0xffffbe00

00006648 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    6648:	b5f0      	push	{r4, r5, r6, r7, lr}
    664a:	460c      	mov	r4, r1
    664c:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    664e:	2100      	movs	r1, #0
{
    6650:	4605      	mov	r5, r0
    6652:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    6654:	f7ff ff78 	bl	6548 <rsa_check_context.constprop.0>
    6658:	bb80      	cbnz	r0, 66bc <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    665a:	a803      	add	r0, sp, #12
    665c:	f005 fe4e 	bl	c2fc <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    6660:	4621      	mov	r1, r4
    6662:	686a      	ldr	r2, [r5, #4]
    6664:	a803      	add	r0, sp, #12
    6666:	f005 ff23 	bl	c4b0 <mbedtls_mpi_read_binary>
    666a:	4604      	mov	r4, r0
    666c:	b9d0      	cbnz	r0, 66a4 <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    666e:	f105 0408 	add.w	r4, r5, #8
    6672:	4621      	mov	r1, r4
    6674:	a803      	add	r0, sp, #12
    6676:	f006 f833 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
    667a:	2800      	cmp	r0, #0
    667c:	da1b      	bge.n	66b6 <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    667e:	f105 0368 	add.w	r3, r5, #104	; 0x68
    6682:	a903      	add	r1, sp, #12
    6684:	9300      	str	r3, [sp, #0]
    6686:	4608      	mov	r0, r1
    6688:	4623      	mov	r3, r4
    668a:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
    668e:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    6690:	f006 fb8d 	bl	cdae <mbedtls_mpi_exp_mod>
    6694:	4604      	mov	r4, r0
    6696:	b928      	cbnz	r0, 66a4 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    6698:	463a      	mov	r2, r7
    669a:	4631      	mov	r1, r6
    669c:	a803      	add	r0, sp, #12
    669e:	f005 ff28 	bl	c4f2 <mbedtls_mpi_write_binary>
    66a2:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    66a4:	a803      	add	r0, sp, #12
    66a6:	f005 fe2f 	bl	c308 <mbedtls_mpi_free>

    if( ret != 0 )
    66aa:	b10c      	cbz	r4, 66b0 <mbedtls_rsa_public+0x68>
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    66ac:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );

    return( 0 );
}
    66b0:	4620      	mov	r0, r4
    66b2:	b007      	add	sp, #28
    66b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    66b6:	f06f 0403 	mvn.w	r4, #3
    66ba:	e7f3      	b.n	66a4 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    66bc:	4c00      	ldr	r4, [pc, #0]	; (66c0 <mbedtls_rsa_public+0x78>)
    66be:	e7f7      	b.n	66b0 <mbedtls_rsa_public+0x68>
    66c0:	ffffbf80 	.word	0xffffbf80

000066c4 <mbedtls_sha256_starts>:
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
#else
    SHA256_VALIDATE_RET( is224 == 0 );
#endif

    ctx->total[0] = 0;
    66c4:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    66c6:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    66ca:	b9c1      	cbnz	r1, 66fe <mbedtls_sha256_starts+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    66cc:	4a19      	ldr	r2, [pc, #100]	; (6734 <mbedtls_sha256_starts+0x70>)
    66ce:	4b1a      	ldr	r3, [pc, #104]	; (6738 <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    66d0:	f8df c068 	ldr.w	ip, [pc, #104]	; 673c <mbedtls_sha256_starts+0x78>
        ctx->state[1] = 0xBB67AE85;
    66d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    66d8:	4b19      	ldr	r3, [pc, #100]	; (6740 <mbedtls_sha256_starts+0x7c>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    66da:	4a1a      	ldr	r2, [pc, #104]	; (6744 <mbedtls_sha256_starts+0x80>)
        ctx->state[3] = 0xA54FF53A;
    66dc:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    66e0:	4b19      	ldr	r3, [pc, #100]	; (6748 <mbedtls_sha256_starts+0x84>)
    66e2:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    66e6:	4b19      	ldr	r3, [pc, #100]	; (674c <mbedtls_sha256_starts+0x88>)
    66e8:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    66ea:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    66ee:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    66f2:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    66f6:	6243      	str	r3, [r0, #36]	; 0x24
#endif
    }

    ctx->is224 = is224;
    66f8:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    66fa:	2000      	movs	r0, #0
    66fc:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    66fe:	4b14      	ldr	r3, [pc, #80]	; (6750 <mbedtls_sha256_starts+0x8c>)
    6700:	4a14      	ldr	r2, [pc, #80]	; (6754 <mbedtls_sha256_starts+0x90>)
        ctx->state[4] = 0xFFC00B31;
    6702:	f8df c054 	ldr.w	ip, [pc, #84]	; 6758 <mbedtls_sha256_starts+0x94>
        ctx->state[1] = 0x367CD507;
    6706:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    670a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    670e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    6712:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    6716:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    6718:	4b10      	ldr	r3, [pc, #64]	; (675c <mbedtls_sha256_starts+0x98>)
    671a:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    671e:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    6722:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    6726:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    672a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    672c:	4b0c      	ldr	r3, [pc, #48]	; (6760 <mbedtls_sha256_starts+0x9c>)
    672e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    6730:	4b0c      	ldr	r3, [pc, #48]	; (6764 <mbedtls_sha256_starts+0xa0>)
    6732:	e7e0      	b.n	66f6 <mbedtls_sha256_starts+0x32>
    6734:	6a09e667 	.word	0x6a09e667
    6738:	bb67ae85 	.word	0xbb67ae85
    673c:	3c6ef372 	.word	0x3c6ef372
    6740:	a54ff53a 	.word	0xa54ff53a
    6744:	510e527f 	.word	0x510e527f
    6748:	9b05688c 	.word	0x9b05688c
    674c:	1f83d9ab 	.word	0x1f83d9ab
    6750:	367cd507 	.word	0x367cd507
    6754:	c1059ed8 	.word	0xc1059ed8
    6758:	f70e5939 	.word	0xf70e5939
    675c:	ffc00b31 	.word	0xffc00b31
    6760:	64f98fa7 	.word	0x64f98fa7
    6764:	befa4fa4 	.word	0xbefa4fa4

00006768 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    6768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    676c:	b0d1      	sub	sp, #324	; 0x144
    676e:	ab48      	add	r3, sp, #288	; 0x120
    6770:	9301      	str	r3, [sp, #4]
    6772:	f100 0608 	add.w	r6, r0, #8
    6776:	f100 0328 	add.w	r3, r0, #40	; 0x28
    677a:	9304      	str	r3, [sp, #16]
    677c:	4633      	mov	r3, r6
    677e:	9a01      	ldr	r2, [sp, #4]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    6780:	f853 0b04 	ldr.w	r0, [r3], #4
    6784:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    6788:	9804      	ldr	r0, [sp, #16]
    678a:	4283      	cmp	r3, r0
    678c:	d1f8      	bne.n	6780 <mbedtls_internal_sha256_process+0x18>
    678e:	e9dd 4748 	ldrd	r4, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    6792:	f04f 0900 	mov.w	r9, #0
    6796:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    6798:	ad4c      	add	r5, sp, #304	; 0x130
    679a:	9302      	str	r3, [sp, #8]
    679c:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    67a0:	9303      	str	r3, [sp, #12]
    67a2:	4b45      	ldr	r3, [pc, #276]	; (68b8 <mbedtls_internal_sha256_process+0x150>)
    67a4:	aa06      	add	r2, sp, #24
    67a6:	9305      	str	r3, [sp, #20]
    67a8:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    67ac:	f1b9 0f0f 	cmp.w	r9, #15
    67b0:	d86a      	bhi.n	6888 <mbedtls_internal_sha256_process+0x120>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    67b2:	784b      	ldrb	r3, [r1, #1]
    67b4:	f891 b000 	ldrb.w	fp, [r1]
    67b8:	041b      	lsls	r3, r3, #16
    67ba:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
    67be:	f891 b003 	ldrb.w	fp, [r1, #3]
    67c2:	f891 a002 	ldrb.w	sl, [r1, #2]
    67c6:	ea43 030b 	orr.w	r3, r3, fp
    67ca:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    67ce:	ea4f 20f5 	mov.w	r0, r5, ror #11
    67d2:	ea80 10b5 	eor.w	r0, r0, r5, ror #6
    67d6:	ea80 6a75 	eor.w	sl, r0, r5, ror #25
    67da:	ea8c 0008 	eor.w	r0, ip, r8
    67de:	f8dd b014 	ldr.w	fp, [sp, #20]
    67e2:	4028      	ands	r0, r5
    67e4:	ea80 000c 	eor.w	r0, r0, ip
    67e8:	4450      	add	r0, sl
    67ea:	f85b ab04 	ldr.w	sl, [fp], #4
    67ee:	6093      	str	r3, [r2, #8]
    67f0:	4482      	add	sl, r0
    67f2:	9802      	ldr	r0, [sp, #8]
    67f4:	4453      	add	r3, sl
    67f6:	4403      	add	r3, r0
    67f8:	ea4f 3a74 	mov.w	sl, r4, ror #13
    67fc:	ea44 0007 	orr.w	r0, r4, r7
    6800:	f8cd b014 	str.w	fp, [sp, #20]
    6804:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
    6808:	ea00 000e 	and.w	r0, r0, lr
    680c:	ea04 0b07 	and.w	fp, r4, r7
    6810:	ea8a 5ab4 	eor.w	sl, sl, r4, ror #22
    6814:	ea40 000b 	orr.w	r0, r0, fp
    6818:	4450      	add	r0, sl
    for( i = 0; i < 64; i++ )
    681a:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    681e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    for( i = 0; i < 64; i++ )
    6822:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6826:	449a      	add	sl, r3
    6828:	e9cd ce02 	strd	ip, lr, [sp, #8]
    682c:	4403      	add	r3, r0
    for( i = 0; i < 64; i++ )
    682e:	f102 0204 	add.w	r2, r2, #4
    6832:	f101 0104 	add.w	r1, r1, #4
    6836:	d120      	bne.n	687a <mbedtls_internal_sha256_process+0x112>
    6838:	e9cd 584d 	strd	r5, r8, [sp, #308]	; 0x134
    683c:	e9cd 3448 	strd	r3, r4, [sp, #288]	; 0x120
    6840:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
    6844:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
    6848:	974a      	str	r7, [sp, #296]	; 0x128
    684a:	9007      	str	r0, [sp, #28]
    684c:	f8cd e12c 	str.w	lr, [sp, #300]	; 0x12c
    6850:	9306      	str	r3, [sp, #24]
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    6852:	9901      	ldr	r1, [sp, #4]
    6854:	6833      	ldr	r3, [r6, #0]
    6856:	f851 2b04 	ldr.w	r2, [r1], #4
    685a:	4413      	add	r3, r2
    685c:	f846 3b04 	str.w	r3, [r6], #4
    for( i = 0; i < 8; i++ )
    6860:	9b04      	ldr	r3, [sp, #16]
        ctx->state[i] += local.A[i];
    6862:	9101      	str	r1, [sp, #4]
    for( i = 0; i < 8; i++ )
    6864:	42b3      	cmp	r3, r6
    6866:	d1f4      	bne.n	6852 <mbedtls_internal_sha256_process+0xea>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    6868:	a806      	add	r0, sp, #24
    686a:	f44f 7194 	mov.w	r1, #296	; 0x128
    686e:	f003 fa31 	bl	9cd4 <mbedtls_platform_zeroize>

    return( 0 );
}
    6872:	2000      	movs	r0, #0
    6874:	b051      	add	sp, #324	; 0x144
    6876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    687a:	46be      	mov	lr, r7
    687c:	46c4      	mov	ip, r8
    687e:	4627      	mov	r7, r4
    6880:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    6882:	461c      	mov	r4, r3
    6884:	4655      	mov	r5, sl
    6886:	e791      	b.n	67ac <mbedtls_internal_sha256_process+0x44>
            R( i );
    6888:	6813      	ldr	r3, [r2, #0]
    688a:	f852 bc34 	ldr.w	fp, [r2, #-52]
    688e:	ea4f 4af3 	mov.w	sl, r3, ror #19
    6892:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    6896:	f852 0c38 	ldr.w	r0, [r2, #-56]
    689a:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    689e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    68a2:	4403      	add	r3, r0
    68a4:	ea4f 40bb 	mov.w	r0, fp, ror #18
    68a8:	ea80 10fb 	eor.w	r0, r0, fp, ror #7
    68ac:	449a      	add	sl, r3
    68ae:	ea80 03db 	eor.w	r3, r0, fp, lsr #3
    68b2:	4453      	add	r3, sl
    68b4:	e78b      	b.n	67ce <mbedtls_internal_sha256_process+0x66>
    68b6:	bf00      	nop
    68b8:	0000e64c 	.word	0x0000e64c

000068bc <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    68bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    68c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    68c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    68c8:	2a07      	cmp	r2, #7
    68ca:	d105      	bne.n	68d8 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    68cc:	3b02      	subs	r3, #2
    68ce:	2b03      	cmp	r3, #3
    68d0:	d802      	bhi.n	68d8 <nrf53_errata_42+0x1c>
    68d2:	4a02      	ldr	r2, [pc, #8]	; (68dc <nrf53_errata_42+0x20>)
    68d4:	5cd0      	ldrb	r0, [r2, r3]
    68d6:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    68d8:	2000      	movs	r0, #0
    #endif
}
    68da:	4770      	bx	lr
    68dc:	0000ebf6 	.word	0x0000ebf6

000068e0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    68e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    68e4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    68e8:	4b03      	ldr	r3, [pc, #12]	; (68f8 <SystemCoreClockUpdate+0x18>)
    68ea:	f002 0203 	and.w	r2, r2, #3
    68ee:	40d3      	lsrs	r3, r2
    68f0:	4a02      	ldr	r2, [pc, #8]	; (68fc <SystemCoreClockUpdate+0x1c>)
    68f2:	6013      	str	r3, [r2, #0]
#endif
}
    68f4:	4770      	bx	lr
    68f6:	bf00      	nop
    68f8:	07a12000 	.word	0x07a12000
    68fc:	2000a15c 	.word	0x2000a15c

00006900 <SystemInit>:

void SystemInit(void)
{
    6900:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    6902:	f7ff ffdb 	bl	68bc <nrf53_errata_42>
    6906:	b158      	cbz	r0, 6920 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    6908:	4b4f      	ldr	r3, [pc, #316]	; (6a48 <SystemInit+0x148>)
    690a:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    690e:	b93a      	cbnz	r2, 6920 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    6910:	210d      	movs	r1, #13
    6912:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    6916:	2101      	movs	r1, #1
    6918:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    691c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    6920:	2200      	movs	r2, #0
    6922:	00d3      	lsls	r3, r2, #3
    6924:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6928:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    692c:	3101      	adds	r1, #1
    692e:	d007      	beq.n	6940 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6930:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    6934:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    6936:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    693a:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    693c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    693e:	d1f0      	bne.n	6922 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    6940:	f7ff ffbc 	bl	68bc <nrf53_errata_42>
    6944:	2800      	cmp	r0, #0
    6946:	d176      	bne.n	6a36 <SystemInit+0x136>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    6948:	f7ff ffb8 	bl	68bc <nrf53_errata_42>
    694c:	b140      	cbz	r0, 6960 <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    694e:	4b3f      	ldr	r3, [pc, #252]	; (6a4c <SystemInit+0x14c>)
    6950:	4a3f      	ldr	r2, [pc, #252]	; (6a50 <SystemInit+0x150>)
    6952:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    6956:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    695a:	2201      	movs	r2, #1
    695c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6960:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6964:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6968:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    696c:	2a07      	cmp	r2, #7
    696e:	d109      	bne.n	6984 <SystemInit+0x84>
                {
                    switch(var2)
    6970:	3b02      	subs	r3, #2
    6972:	2b03      	cmp	r3, #3
    6974:	d806      	bhi.n	6984 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    6976:	4a37      	ldr	r2, [pc, #220]	; (6a54 <SystemInit+0x154>)
    6978:	5cd3      	ldrb	r3, [r2, r3]
    697a:	b11b      	cbz	r3, 6984 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    697c:	2200      	movs	r2, #0
    697e:	4b36      	ldr	r3, [pc, #216]	; (6a58 <SystemInit+0x158>)
    6980:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    6984:	f7ff ff9a 	bl	68bc <nrf53_errata_42>
    6988:	b150      	cbz	r0, 69a0 <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    698a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    698e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6992:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    6994:	bf42      	ittt	mi
    6996:	2200      	movmi	r2, #0
    6998:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    699c:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    69a0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    69a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    69a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    69ac:	2a07      	cmp	r2, #7
    69ae:	d109      	bne.n	69c4 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    69b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    69b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    69b8:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    69ba:	bf44      	itt	mi
    69bc:	f06f 0201 	mvnmi.w	r2, #1
    69c0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    69c4:	f7ff ff7a 	bl	68bc <nrf53_errata_42>
    69c8:	b118      	cbz	r0, 69d2 <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    69ca:	2265      	movs	r2, #101	; 0x65
    69cc:	4b1e      	ldr	r3, [pc, #120]	; (6a48 <SystemInit+0x148>)
    69ce:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    69d2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    69d6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    69da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    69de:	2a07      	cmp	r2, #7
    69e0:	d116      	bne.n	6a10 <SystemInit+0x110>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    69e2:	4b1d      	ldr	r3, [pc, #116]	; (6a58 <SystemInit+0x158>)
    69e4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    69e8:	2b00      	cmp	r3, #0
    69ea:	da11      	bge.n	6a10 <SystemInit+0x110>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    69ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    69f0:	2203      	movs	r2, #3
    69f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    69f6:	2201      	movs	r2, #1
    69f8:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    69fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    69fe:	2a00      	cmp	r2, #0
    6a00:	d0fb      	beq.n	69fa <SystemInit+0xfa>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    6a02:	2200      	movs	r2, #0
    6a04:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    6a08:	2201      	movs	r2, #1
    6a0a:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    6a0c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    6a10:	4a12      	ldr	r2, [pc, #72]	; (6a5c <SystemInit+0x15c>)
    6a12:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    6a16:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    6a1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    6a1e:	4a10      	ldr	r2, [pc, #64]	; (6a60 <SystemInit+0x160>)
    6a20:	4b10      	ldr	r3, [pc, #64]	; (6a64 <SystemInit+0x164>)
    6a22:	6811      	ldr	r1, [r2, #0]
    6a24:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    6a28:	69d2      	ldr	r2, [r2, #28]
    6a2a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    6a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    6a32:	f7ff bf55 	b.w	68e0 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    6a36:	2229      	movs	r2, #41	; 0x29
    6a38:	4b03      	ldr	r3, [pc, #12]	; (6a48 <SystemInit+0x148>)
    6a3a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    6a3e:	2203      	movs	r2, #3
    6a40:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    6a44:	e780      	b.n	6948 <SystemInit+0x48>
    6a46:	bf00      	nop
    6a48:	50004000 	.word	0x50004000
    6a4c:	50039000 	.word	0x50039000
    6a50:	beef0044 	.word	0xbeef0044
    6a54:	0000ebfa 	.word	0x0000ebfa
    6a58:	50032000 	.word	0x50032000
    6a5c:	e000ed00 	.word	0xe000ed00
    6a60:	00ff8000 	.word	0x00ff8000
    6a64:	50006000 	.word	0x50006000

00006a68 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6a68:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6a6a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    6a6c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6a6e:	fab2 f382 	clz	r3, r2
    6a72:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    6a76:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    6a78:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    6a7a:	d010      	beq.n	6a9e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6a7c:	fa05 f303 	lsl.w	r3, r5, r3
    6a80:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6a84:	e8d0 6fef 	ldaex	r6, [r0]
    6a88:	4296      	cmp	r6, r2
    6a8a:	d104      	bne.n	6a96 <nrfx_flag32_alloc+0x2e>
    6a8c:	e8c0 3fec 	stlex	ip, r3, [r0]
    6a90:	f1bc 0f00 	cmp.w	ip, #0
    6a94:	d1f6      	bne.n	6a84 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6a96:	d1e9      	bne.n	6a6c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    6a98:	4802      	ldr	r0, [pc, #8]	; (6aa4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    6a9a:	700c      	strb	r4, [r1, #0]
}
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    6a9e:	4802      	ldr	r0, [pc, #8]	; (6aa8 <nrfx_flag32_alloc+0x40>)
    6aa0:	e7fc      	b.n	6a9c <nrfx_flag32_alloc+0x34>
    6aa2:	bf00      	nop
    6aa4:	0bad0000 	.word	0x0bad0000
    6aa8:	0bad0002 	.word	0x0bad0002

00006aac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6aac:	6803      	ldr	r3, [r0, #0]
{
    6aae:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6ab0:	40cb      	lsrs	r3, r1
    6ab2:	07db      	lsls	r3, r3, #31
    6ab4:	d411      	bmi.n	6ada <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6ab6:	2301      	movs	r3, #1
    6ab8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    6abc:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    6abe:	ea41 0203 	orr.w	r2, r1, r3
    6ac2:	e8d0 4fef 	ldaex	r4, [r0]
    6ac6:	429c      	cmp	r4, r3
    6ac8:	d104      	bne.n	6ad4 <nrfx_flag32_free+0x28>
    6aca:	e8c0 2fec 	stlex	ip, r2, [r0]
    6ace:	f1bc 0f00 	cmp.w	ip, #0
    6ad2:	d1f6      	bne.n	6ac2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6ad4:	d1f2      	bne.n	6abc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    6ad6:	4802      	ldr	r0, [pc, #8]	; (6ae0 <nrfx_flag32_free+0x34>)
}
    6ad8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6ada:	4802      	ldr	r0, [pc, #8]	; (6ae4 <nrfx_flag32_free+0x38>)
    6adc:	e7fc      	b.n	6ad8 <nrfx_flag32_free+0x2c>
    6ade:	bf00      	nop
    6ae0:	0bad0000 	.word	0x0bad0000
    6ae4:	0bad0004 	.word	0x0bad0004

00006ae8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6ae8:	4b04      	ldr	r3, [pc, #16]	; (6afc <nrfx_clock_init+0x14>)
    6aea:	791a      	ldrb	r2, [r3, #4]
    6aec:	b922      	cbnz	r2, 6af8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6aee:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6af0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6af2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6af4:	4802      	ldr	r0, [pc, #8]	; (6b00 <nrfx_clock_init+0x18>)
    6af6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6af8:	4802      	ldr	r0, [pc, #8]	; (6b04 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6afa:	4770      	bx	lr
    6afc:	2001c0d8 	.word	0x2001c0d8
    6b00:	0bad0000 	.word	0x0bad0000
    6b04:	0bad000c 	.word	0x0bad000c

00006b08 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    6b08:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6b0a:	2005      	movs	r0, #5
    6b0c:	f7fd f802 	bl	3b14 <arch_irq_is_enabled>
    6b10:	b910      	cbnz	r0, 6b18 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6b12:	2005      	movs	r0, #5
    6b14:	f7fc ffda 	bl	3acc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b18:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6b1c:	2301      	movs	r3, #1
    6b1e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    6b22:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    6b26:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    6b2a:	4a01      	ldr	r2, [pc, #4]	; (6b30 <nrfx_clock_enable+0x28>)
    6b2c:	7013      	strb	r3, [r2, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    6b2e:	bd08      	pop	{r3, pc}
    6b30:	2005e380 	.word	0x2005e380

00006b34 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6b38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6b3c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6b3e:	b152      	cbz	r2, 6b56 <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b40:	2000      	movs	r0, #0
    6b42:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    6b46:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6b4a:	2201      	movs	r2, #1
    6b4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6b50:	4b23      	ldr	r3, [pc, #140]	; (6be0 <nrfx_clock_irq_handler+0xac>)
    6b52:	681b      	ldr	r3, [r3, #0]
    6b54:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b56:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6b5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6b5e:	b18a      	cbz	r2, 6b84 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b60:	2200      	movs	r2, #0
    6b62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b66:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b6a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b6e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6b72:	f002 0203 	and.w	r2, r2, #3
    6b76:	2a01      	cmp	r2, #1
    6b78:	f04f 0102 	mov.w	r1, #2
    6b7c:	d128      	bne.n	6bd0 <nrfx_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b7e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b82:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6b88:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    6b8c:	b162      	cbz	r2, 6ba8 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b8e:	2200      	movs	r2, #0
    6b90:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6b94:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    6b98:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    6ba0:	4b0f      	ldr	r3, [pc, #60]	; (6be0 <nrfx_clock_irq_handler+0xac>)
    6ba2:	2004      	movs	r0, #4
    6ba4:	681b      	ldr	r3, [r3, #0]
    6ba6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6ba8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6bac:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    6bb0:	b1aa      	cbz	r2, 6bde <nrfx_clock_irq_handler+0xaa>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bb6:	2200      	movs	r2, #0
    6bb8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6bbc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    6bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
    6bc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    6bc8:	4b05      	ldr	r3, [pc, #20]	; (6be0 <nrfx_clock_irq_handler+0xac>)
    6bca:	2005      	movs	r0, #5
    6bcc:	681b      	ldr	r3, [r3, #0]
    6bce:	4718      	bx	r3
    6bd0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6bd4:	4b02      	ldr	r3, [pc, #8]	; (6be0 <nrfx_clock_irq_handler+0xac>)
    6bd6:	2001      	movs	r0, #1
    6bd8:	681b      	ldr	r3, [r3, #0]
    6bda:	4798      	blx	r3
    6bdc:	e7d2      	b.n	6b84 <nrfx_clock_irq_handler+0x50>
}
    6bde:	bd10      	pop	{r4, pc}
    6be0:	2001c0d8 	.word	0x2001c0d8

00006be4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6be4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6be6:	f003 021f 	and.w	r2, r3, #31
    6bea:	6002      	str	r2, [r0, #0]
}
    6bec:	4a03      	ldr	r2, [pc, #12]	; (6bfc <nrf_gpio_pin_port_decode+0x18>)
    6bee:	4804      	ldr	r0, [pc, #16]	; (6c00 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    6bf0:	095b      	lsrs	r3, r3, #5
}
    6bf2:	2b01      	cmp	r3, #1
    6bf4:	bf08      	it	eq
    6bf6:	4610      	moveq	r0, r2
    6bf8:	4770      	bx	lr
    6bfa:	bf00      	nop
    6bfc:	50842800 	.word	0x50842800
    6c00:	50842500 	.word	0x50842500

00006c04 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6c04:	4b03      	ldr	r3, [pc, #12]	; (6c14 <pin_in_use_by_te+0x10>)
    6c06:	3008      	adds	r0, #8
    6c08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6c0c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6c10:	4770      	bx	lr
    6c12:	bf00      	nop
    6c14:	2000a160 	.word	0x2000a160

00006c18 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6c18:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c1a:	4c0d      	ldr	r4, [pc, #52]	; (6c50 <call_handler+0x38>)
    6c1c:	f100 0308 	add.w	r3, r0, #8
    6c20:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    6c24:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c26:	05da      	lsls	r2, r3, #23
{
    6c28:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c2a:	d507      	bpl.n	6c3c <call_handler+0x24>
    6c2c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6c30:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6c34:	6852      	ldr	r2, [r2, #4]
    6c36:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6c3a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6c3c:	68a3      	ldr	r3, [r4, #8]
    6c3e:	b12b      	cbz	r3, 6c4c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c40:	4631      	mov	r1, r6
    6c42:	4628      	mov	r0, r5
    6c44:	68e2      	ldr	r2, [r4, #12]
    }
}
    6c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c4a:	4718      	bx	r3
}
    6c4c:	bd70      	pop	{r4, r5, r6, pc}
    6c4e:	bf00      	nop
    6c50:	2000a160 	.word	0x2000a160

00006c54 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c54:	4a12      	ldr	r2, [pc, #72]	; (6ca0 <release_handler+0x4c>)
    6c56:	3008      	adds	r0, #8
    6c58:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    6c5c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c5e:	05d9      	lsls	r1, r3, #23
    6c60:	d51b      	bpl.n	6c9a <release_handler+0x46>
    6c62:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6c66:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6c6a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6c6e:	2000      	movs	r0, #0
    6c70:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6c74:	f834 3b02 	ldrh.w	r3, [r4], #2
    6c78:	f413 7f80 	tst.w	r3, #256	; 0x100
    6c7c:	d003      	beq.n	6c86 <release_handler+0x32>
    6c7e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6c82:	4299      	cmp	r1, r3
    6c84:	d009      	beq.n	6c9a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6c86:	3001      	adds	r0, #1
    6c88:	2830      	cmp	r0, #48	; 0x30
    6c8a:	d1f3      	bne.n	6c74 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6c8c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6c8e:	4805      	ldr	r0, [pc, #20]	; (6ca4 <release_handler+0x50>)
}
    6c90:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    6c92:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6c96:	f7ff bf09 	b.w	6aac <nrfx_flag32_free>
}
    6c9a:	bc10      	pop	{r4}
    6c9c:	4770      	bx	lr
    6c9e:	bf00      	nop
    6ca0:	2000a160 	.word	0x2000a160
    6ca4:	2000a1d4 	.word	0x2000a1d4

00006ca8 <pin_handler_trigger_uninit>:
{
    6ca8:	b538      	push	{r3, r4, r5, lr}
    6caa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6cac:	f7ff ffaa 	bl	6c04 <pin_in_use_by_te>
    6cb0:	4c0b      	ldr	r4, [pc, #44]	; (6ce0 <pin_handler_trigger_uninit+0x38>)
    6cb2:	f102 0508 	add.w	r5, r2, #8
    6cb6:	b160      	cbz	r0, 6cd2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6cb8:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6cba:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6cbe:	0b5b      	lsrs	r3, r3, #13
    6cc0:	009b      	lsls	r3, r3, #2
    6cc2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    6cc6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    6cca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    6cce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    6cd2:	4610      	mov	r0, r2
    6cd4:	f7ff ffbe 	bl	6c54 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6cd8:	2300      	movs	r3, #0
    6cda:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6cde:	bd38      	pop	{r3, r4, r5, pc}
    6ce0:	2000a160 	.word	0x2000a160

00006ce4 <nrfx_gpiote_input_configure>:
{
    6ce4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6ce8:	4604      	mov	r4, r0
    6cea:	4616      	mov	r6, r2
    6cec:	461d      	mov	r5, r3
    if (p_input_config)
    6cee:	b321      	cbz	r1, 6d3a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6cf0:	4f4e      	ldr	r7, [pc, #312]	; (6e2c <nrfx_gpiote_input_configure+0x148>)
    6cf2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6cf6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6cfa:	079b      	lsls	r3, r3, #30
    6cfc:	d506      	bpl.n	6d0c <nrfx_gpiote_input_configure+0x28>
    6cfe:	f7ff ff81 	bl	6c04 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    6d02:	b118      	cbz	r0, 6d0c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    6d04:	484a      	ldr	r0, [pc, #296]	; (6e30 <nrfx_gpiote_input_configure+0x14c>)
}
    6d06:	b004      	add	sp, #16
    6d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6d0c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6d0e:	4620      	mov	r0, r4
    6d10:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6d14:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6d18:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6d1c:	f10d 020f 	add.w	r2, sp, #15
    6d20:	460b      	mov	r3, r1
    6d22:	f10d 010e 	add.w	r1, sp, #14
    6d26:	f006 fce3 	bl	d6f0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6d2a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6d2e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6d32:	f043 0301 	orr.w	r3, r3, #1
    6d36:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    6d3a:	b196      	cbz	r6, 6d62 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6d3c:	483b      	ldr	r0, [pc, #236]	; (6e2c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6d3e:	7833      	ldrb	r3, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6d40:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6d42:	f104 0608 	add.w	r6, r4, #8
    6d46:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        if (pin_is_output(pin))
    6d4a:	078f      	lsls	r7, r1, #30
    6d4c:	d50c      	bpl.n	6d68 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    6d4e:	2a00      	cmp	r2, #0
    6d50:	d1d8      	bne.n	6d04 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6d52:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
    6d56:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6d5a:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    6d5e:	f820 3016 	strh.w	r3, [r0, r6, lsl #1]
    if (p_handler_config)
    6d62:	bbcd      	cbnz	r5, 6dd8 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    6d64:	4833      	ldr	r0, [pc, #204]	; (6e34 <nrfx_gpiote_input_configure+0x150>)
    6d66:	e7ce      	b.n	6d06 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6d68:	f021 0120 	bic.w	r1, r1, #32
    6d6c:	04c9      	lsls	r1, r1, #19
    6d6e:	0cc9      	lsrs	r1, r1, #19
    6d70:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
    6d74:	2a00      	cmp	r2, #0
    6d76:	d0ec      	beq.n	6d52 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    6d78:	2b03      	cmp	r3, #3
    6d7a:	d8c3      	bhi.n	6d04 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6d7c:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6d80:	4662      	mov	r2, ip
    6d82:	0092      	lsls	r2, r2, #2
    6d84:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    6d88:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    6d8c:	b923      	cbnz	r3, 6d98 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
    6d8e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    6d92:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    6d96:	e7dc      	b.n	6d52 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6d98:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6d9c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    6da0:	f027 0703 	bic.w	r7, r7, #3
    6da4:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6da8:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    6dac:	f041 0120 	orr.w	r1, r1, #32
    6db0:	f427 374f 	bic.w	r7, r7, #211968	; 0x33c00
    6db4:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    6db8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6dbc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6dc0:	0227      	lsls	r7, r4, #8
    6dc2:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
    6dc6:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
    6dca:	ea47 070e 	orr.w	r7, r7, lr
    6dce:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    6dd2:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
    6dd6:	e7bc      	b.n	6d52 <nrfx_gpiote_input_configure+0x6e>
    release_handler(pin);
    6dd8:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6dda:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6dde:	f7ff ff39 	bl	6c54 <release_handler>
    if (!handler)
    6de2:	2e00      	cmp	r6, #0
    6de4:	d0be      	beq.n	6d64 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6de6:	4d11      	ldr	r5, [pc, #68]	; (6e2c <nrfx_gpiote_input_configure+0x148>)
    6de8:	682b      	ldr	r3, [r5, #0]
    6dea:	429e      	cmp	r6, r3
    6dec:	d104      	bne.n	6df8 <nrfx_gpiote_input_configure+0x114>
    6dee:	686b      	ldr	r3, [r5, #4]
    6df0:	429f      	cmp	r7, r3
    6df2:	d101      	bne.n	6df8 <nrfx_gpiote_input_configure+0x114>
    6df4:	2200      	movs	r2, #0
    6df6:	e00a      	b.n	6e0e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6df8:	480f      	ldr	r0, [pc, #60]	; (6e38 <nrfx_gpiote_input_configure+0x154>)
    6dfa:	f10d 010f 	add.w	r1, sp, #15
    6dfe:	f7ff fe33 	bl	6a68 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6e02:	4b0c      	ldr	r3, [pc, #48]	; (6e34 <nrfx_gpiote_input_configure+0x150>)
    6e04:	4298      	cmp	r0, r3
    6e06:	f47f af7e 	bne.w	6d06 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    6e0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    6e0e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6e12:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6e14:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6e16:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    6e1a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6e1e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6e26:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    6e2a:	e79b      	b.n	6d64 <nrfx_gpiote_input_configure+0x80>
    6e2c:	2000a160 	.word	0x2000a160
    6e30:	0bad0004 	.word	0x0bad0004
    6e34:	0bad0000 	.word	0x0bad0000
    6e38:	2000a1d4 	.word	0x2000a1d4

00006e3c <nrfx_gpiote_output_configure>:
{
    6e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e3e:	4604      	mov	r4, r0
    6e40:	4615      	mov	r5, r2
    6e42:	b085      	sub	sp, #20
    if (p_config)
    6e44:	b319      	cbz	r1, 6e8e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e46:	4e34      	ldr	r6, [pc, #208]	; (6f18 <nrfx_gpiote_output_configure+0xdc>)
    6e48:	f100 0708 	add.w	r7, r0, #8
    6e4c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6e50:	0793      	lsls	r3, r2, #30
    6e52:	d403      	bmi.n	6e5c <nrfx_gpiote_output_configure+0x20>
    6e54:	f7ff fed6 	bl	6c04 <pin_in_use_by_te>
    6e58:	2800      	cmp	r0, #0
    6e5a:	d15a      	bne.n	6f12 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6e5c:	f012 0f1c 	tst.w	r2, #28
    6e60:	d002      	beq.n	6e68 <nrfx_gpiote_output_configure+0x2c>
    6e62:	784b      	ldrb	r3, [r1, #1]
    6e64:	2b01      	cmp	r3, #1
    6e66:	d054      	beq.n	6f12 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6e68:	2301      	movs	r3, #1
    6e6a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6e6e:	2300      	movs	r3, #0
    6e70:	1c4a      	adds	r2, r1, #1
    6e72:	e9cd 1300 	strd	r1, r3, [sp]
    6e76:	4620      	mov	r0, r4
    6e78:	1c8b      	adds	r3, r1, #2
    6e7a:	f10d 010f 	add.w	r1, sp, #15
    6e7e:	f006 fc37 	bl	d6f0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6e82:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6e86:	f043 0303 	orr.w	r3, r3, #3
    6e8a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    6e8e:	b915      	cbnz	r5, 6e96 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    6e90:	4822      	ldr	r0, [pc, #136]	; (6f1c <nrfx_gpiote_output_configure+0xe0>)
}
    6e92:	b005      	add	sp, #20
    6e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e96:	4e20      	ldr	r6, [pc, #128]	; (6f18 <nrfx_gpiote_output_configure+0xdc>)
    6e98:	f104 0708 	add.w	r7, r4, #8
    6e9c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    6ea0:	0783      	lsls	r3, r0, #30
    6ea2:	d536      	bpl.n	6f12 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    6ea4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    6ea8:	2300      	movs	r3, #0
    6eaa:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6eac:	f020 0020 	bic.w	r0, r0, #32
    6eb0:	0089      	lsls	r1, r1, #2
    6eb2:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    6eb6:	04c0      	lsls	r0, r0, #19
    6eb8:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    6ebc:	0cc0      	lsrs	r0, r0, #19
    6ebe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6ec2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    6ec6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6eca:	786a      	ldrb	r2, [r5, #1]
    6ecc:	2a00      	cmp	r2, #0
    6ece:	d0df      	beq.n	6e90 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6ed0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6ed4:	78ad      	ldrb	r5, [r5, #2]
    6ed6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6eda:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6ede:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ee2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6ee6:	0223      	lsls	r3, r4, #8
    6ee8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6eec:	0412      	lsls	r2, r2, #16
    6eee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ef2:	ea43 030e 	orr.w	r3, r3, lr
    6ef6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6ef8:	052a      	lsls	r2, r5, #20
    6efa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6efe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6f02:	4313      	orrs	r3, r2
    6f04:	f040 0020 	orr.w	r0, r0, #32
    6f08:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6f0c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6f10:	e7be      	b.n	6e90 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    6f12:	4803      	ldr	r0, [pc, #12]	; (6f20 <nrfx_gpiote_output_configure+0xe4>)
    6f14:	e7bd      	b.n	6e92 <nrfx_gpiote_output_configure+0x56>
    6f16:	bf00      	nop
    6f18:	2000a160 	.word	0x2000a160
    6f1c:	0bad0000 	.word	0x0bad0000
    6f20:	0bad0004 	.word	0x0bad0004

00006f24 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6f24:	4b01      	ldr	r3, [pc, #4]	; (6f2c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6f26:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6f2a:	4770      	bx	lr
    6f2c:	2000a160 	.word	0x2000a160

00006f30 <nrfx_gpiote_channel_get>:
{
    6f30:	b508      	push	{r3, lr}
    6f32:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6f34:	f7ff fe66 	bl	6c04 <pin_in_use_by_te>
    6f38:	b138      	cbz	r0, 6f4a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f3a:	4b05      	ldr	r3, [pc, #20]	; (6f50 <nrfx_gpiote_channel_get+0x20>)
    6f3c:	3208      	adds	r2, #8
    6f3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    6f42:	4804      	ldr	r0, [pc, #16]	; (6f54 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f44:	0b5b      	lsrs	r3, r3, #13
    6f46:	700b      	strb	r3, [r1, #0]
}
    6f48:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6f4a:	4803      	ldr	r0, [pc, #12]	; (6f58 <nrfx_gpiote_channel_get+0x28>)
    6f4c:	e7fc      	b.n	6f48 <nrfx_gpiote_channel_get+0x18>
    6f4e:	bf00      	nop
    6f50:	2000a160 	.word	0x2000a160
    6f54:	0bad0000 	.word	0x0bad0000
    6f58:	0bad0004 	.word	0x0bad0004

00006f5c <nrfx_gpiote_init>:
{
    6f5c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6f5e:	4c0f      	ldr	r4, [pc, #60]	; (6f9c <nrfx_gpiote_init+0x40>)
    6f60:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6f64:	b9bd      	cbnz	r5, 6f96 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6f66:	2260      	movs	r2, #96	; 0x60
    6f68:	4629      	mov	r1, r5
    6f6a:	f104 0010 	add.w	r0, r4, #16
    6f6e:	f004 fad7 	bl	b520 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6f72:	200d      	movs	r0, #13
    6f74:	f7fc fdaa 	bl	3acc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f78:	4b09      	ldr	r3, [pc, #36]	; (6fa0 <nrfx_gpiote_init+0x44>)
    return err_code;
    6f7a:	480a      	ldr	r0, [pc, #40]	; (6fa4 <nrfx_gpiote_init+0x48>)
    6f7c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6f80:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6f84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6f88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6f8c:	2301      	movs	r3, #1
    6f8e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6f92:	6763      	str	r3, [r4, #116]	; 0x74
}
    6f94:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6f96:	4804      	ldr	r0, [pc, #16]	; (6fa8 <nrfx_gpiote_init+0x4c>)
    6f98:	e7fc      	b.n	6f94 <nrfx_gpiote_init+0x38>
    6f9a:	bf00      	nop
    6f9c:	2000a160 	.word	0x2000a160
    6fa0:	5000d000 	.word	0x5000d000
    6fa4:	0bad0000 	.word	0x0bad0000
    6fa8:	0bad0005 	.word	0x0bad0005

00006fac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6fac:	4b03      	ldr	r3, [pc, #12]	; (6fbc <nrfx_gpiote_is_init+0x10>)
    6fae:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6fb2:	3800      	subs	r0, #0
    6fb4:	bf18      	it	ne
    6fb6:	2001      	movne	r0, #1
    6fb8:	4770      	bx	lr
    6fba:	bf00      	nop
    6fbc:	2000a160 	.word	0x2000a160

00006fc0 <nrfx_gpiote_channel_free>:
{
    6fc0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6fc2:	4801      	ldr	r0, [pc, #4]	; (6fc8 <nrfx_gpiote_channel_free+0x8>)
    6fc4:	f7ff bd72 	b.w	6aac <nrfx_flag32_free>
    6fc8:	2000a1d0 	.word	0x2000a1d0

00006fcc <nrfx_gpiote_channel_alloc>:
{
    6fcc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6fce:	4801      	ldr	r0, [pc, #4]	; (6fd4 <nrfx_gpiote_channel_alloc+0x8>)
    6fd0:	f7ff bd4a 	b.w	6a68 <nrfx_flag32_alloc>
    6fd4:	2000a1d0 	.word	0x2000a1d0

00006fd8 <nrfx_gpiote_trigger_enable>:
{
    6fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6fda:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fdc:	f7ff fe12 	bl	6c04 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fe0:	4b1e      	ldr	r3, [pc, #120]	; (705c <nrfx_gpiote_trigger_enable+0x84>)
    6fe2:	f104 0208 	add.w	r2, r4, #8
    6fe6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fea:	b1e8      	cbz	r0, 7028 <nrfx_gpiote_trigger_enable+0x50>
    6fec:	f013 0502 	ands.w	r5, r3, #2
    6ff0:	d11a      	bne.n	7028 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6ff2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6ff4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6ff6:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    6ffa:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    6ffe:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7002:	6005      	str	r5, [r0, #0]
    7004:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    7008:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    700a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    700e:	f040 0001 	orr.w	r0, r0, #1
    7012:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    7016:	b129      	cbz	r1, 7024 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7018:	2201      	movs	r2, #1
    701a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    701e:	4a10      	ldr	r2, [pc, #64]	; (7060 <nrfx_gpiote_trigger_enable+0x88>)
    7020:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7024:	b003      	add	sp, #12
    7026:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7028:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    702c:	2b04      	cmp	r3, #4
    702e:	d011      	beq.n	7054 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7030:	2b05      	cmp	r3, #5
    7032:	d011      	beq.n	7058 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7034:	a801      	add	r0, sp, #4
    7036:	9401      	str	r4, [sp, #4]
    7038:	f7ff fdd4 	bl	6be4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    703c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    703e:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7040:	40d9      	lsrs	r1, r3
    7042:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7046:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7048:	4620      	mov	r0, r4
}
    704a:	b003      	add	sp, #12
    704c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7050:	f006 bb95 	b.w	d77e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7054:	2103      	movs	r1, #3
    7056:	e7f7      	b.n	7048 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7058:	2102      	movs	r1, #2
    705a:	e7f5      	b.n	7048 <nrfx_gpiote_trigger_enable+0x70>
    705c:	2000a160 	.word	0x2000a160
    7060:	5000d000 	.word	0x5000d000

00007064 <nrfx_gpiote_trigger_disable>:
{
    7064:	b508      	push	{r3, lr}
    7066:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7068:	f7ff fdcc 	bl	6c04 <pin_in_use_by_te>
    706c:	b1c0      	cbz	r0, 70a0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    706e:	4b0f      	ldr	r3, [pc, #60]	; (70ac <nrfx_gpiote_trigger_disable+0x48>)
    7070:	f102 0108 	add.w	r1, r2, #8
    7074:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7078:	0799      	lsls	r1, r3, #30
    707a:	d411      	bmi.n	70a0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    707c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    707e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7080:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    7082:	490b      	ldr	r1, [pc, #44]	; (70b0 <nrfx_gpiote_trigger_disable+0x4c>)
    7084:	009b      	lsls	r3, r3, #2
    7086:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    708a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    708e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    7092:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7096:	f022 0203 	bic.w	r2, r2, #3
    709a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    709e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    70a0:	2100      	movs	r1, #0
}
    70a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    70a6:	4610      	mov	r0, r2
    70a8:	f006 bb69 	b.w	d77e <nrf_gpio_cfg_sense_set>
    70ac:	2000a160 	.word	0x2000a160
    70b0:	5000d000 	.word	0x5000d000

000070b4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    70b4:	4b10      	ldr	r3, [pc, #64]	; (70f8 <nrfx_gpiote_pin_uninit+0x44>)
    70b6:	f100 0208 	add.w	r2, r0, #8
    70ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    70be:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    70c0:	07db      	lsls	r3, r3, #31
{
    70c2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    70c4:	d516      	bpl.n	70f4 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    70c6:	f7ff ffcd 	bl	7064 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    70ca:	4620      	mov	r0, r4
    70cc:	f7ff fdec 	bl	6ca8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    70d0:	a801      	add	r0, sp, #4
    70d2:	9401      	str	r4, [sp, #4]
    70d4:	f7ff fd86 	bl	6be4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    70d8:	9b01      	ldr	r3, [sp, #4]
    70da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    70de:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    70e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    70e6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    70ea:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    70ee:	4803      	ldr	r0, [pc, #12]	; (70fc <nrfx_gpiote_pin_uninit+0x48>)
}
    70f0:	b002      	add	sp, #8
    70f2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    70f4:	4802      	ldr	r0, [pc, #8]	; (7100 <nrfx_gpiote_pin_uninit+0x4c>)
    70f6:	e7fb      	b.n	70f0 <nrfx_gpiote_pin_uninit+0x3c>
    70f8:	2000a160 	.word	0x2000a160
    70fc:	0bad0000 	.word	0x0bad0000
    7100:	0bad0004 	.word	0x0bad0004

00007104 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    7108:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    710a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    710c:	4634      	mov	r4, r6
{
    710e:	4b60      	ldr	r3, [pc, #384]	; (7290 <nrfx_gpiote_irq_handler+0x18c>)
    return p_reg->INTENSET & mask;
    7110:	4860      	ldr	r0, [pc, #384]	; (7294 <nrfx_gpiote_irq_handler+0x190>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7112:	4961      	ldr	r1, [pc, #388]	; (7298 <nrfx_gpiote_irq_handler+0x194>)
{
    7114:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7116:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7118:	b135      	cbz	r5, 7128 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    711a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    711e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7120:	bf1e      	ittt	ne
    7122:	601c      	strne	r4, [r3, #0]
    7124:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7126:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7128:	3304      	adds	r3, #4
    712a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    712c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7130:	d1f1      	bne.n	7116 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7132:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7294 <nrfx_gpiote_irq_handler+0x190>
    7136:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    713a:	2b00      	cmp	r3, #0
    713c:	f000 808a 	beq.w	7254 <nrfx_gpiote_irq_handler+0x150>
        *p_masks = gpio_regs[i]->LATCH;
    7140:	4f56      	ldr	r7, [pc, #344]	; (729c <nrfx_gpiote_irq_handler+0x198>)
    7142:	6a3b      	ldr	r3, [r7, #32]
    7144:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7146:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    7148:	4b55      	ldr	r3, [pc, #340]	; (72a0 <nrfx_gpiote_irq_handler+0x19c>)
    714a:	6a1a      	ldr	r2, [r3, #32]
    714c:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    714e:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7150:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    7154:	f10d 0a10 	add.w	sl, sp, #16
    7158:	ea4f 1348 	mov.w	r3, r8, lsl #5
    715c:	9300      	str	r3, [sp, #0]
    715e:	e049      	b.n	71f4 <nrfx_gpiote_irq_handler+0xf0>
                uint32_t pin = NRF_CTZ(latch[i]);
    7160:	fa94 f4a4 	rbit	r4, r4
    7164:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7168:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    716a:	4a4e      	ldr	r2, [pc, #312]	; (72a4 <nrfx_gpiote_irq_handler+0x1a0>)
                pin += 32 * i;
    716c:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    716e:	f104 0308 	add.w	r3, r4, #8
    7172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7176:	08e0      	lsrs	r0, r4, #3
    7178:	0899      	lsrs	r1, r3, #2
    717a:	f3c3 0582 	ubfx	r5, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    717e:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
    7180:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7184:	fa03 fc02 	lsl.w	ip, r3, r2
    7188:	f81a 2000 	ldrb.w	r2, [sl, r0]
    718c:	9403      	str	r4, [sp, #12]
    718e:	ea22 020c 	bic.w	r2, r2, ip
    7192:	f80a 2000 	strb.w	r2, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7196:	a803      	add	r0, sp, #12
    7198:	f7ff fd24 	bl	6be4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    719c:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    719e:	074b      	lsls	r3, r1, #29
    71a0:	f102 0280 	add.w	r2, r2, #128	; 0x80
    71a4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    71a8:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    71aa:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    71ae:	d52b      	bpl.n	7208 <nrfx_gpiote_irq_handler+0x104>
        call_handler(pin, trigger);
    71b0:	4620      	mov	r0, r4
    71b2:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    71b4:	b2d5      	uxtb	r5, r2
    71b6:	f7ff fd2f 	bl	6c18 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71ba:	a803      	add	r0, sp, #12
    71bc:	9403      	str	r4, [sp, #12]
    71be:	f7ff fd11 	bl	6be4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    71c2:	9b03      	ldr	r3, [sp, #12]
    71c4:	3380      	adds	r3, #128	; 0x80
    71c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    71ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
    71ce:	429d      	cmp	r5, r3
    71d0:	d107      	bne.n	71e2 <nrfx_gpiote_irq_handler+0xde>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    71d2:	2100      	movs	r1, #0
    71d4:	4620      	mov	r0, r4
    71d6:	f006 fad2 	bl	d77e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    71da:	4629      	mov	r1, r5
    71dc:	4620      	mov	r0, r4
    71de:	f006 face 	bl	d77e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71e2:	a803      	add	r0, sp, #12
    71e4:	9403      	str	r4, [sp, #12]
    71e6:	f7ff fcfd 	bl	6be4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    71ea:	2201      	movs	r2, #1
    71ec:	9b03      	ldr	r3, [sp, #12]
    71ee:	fa02 f303 	lsl.w	r3, r2, r3
    71f2:	6203      	str	r3, [r0, #32]
            while (latch[i])
    71f4:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    71f8:	2c00      	cmp	r4, #0
    71fa:	d1b1      	bne.n	7160 <nrfx_gpiote_irq_handler+0x5c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    71fc:	f1b8 0f00 	cmp.w	r8, #0
    7200:	d11a      	bne.n	7238 <nrfx_gpiote_irq_handler+0x134>
    7202:	f04f 0801 	mov.w	r8, #1
    7206:	e7a7      	b.n	7158 <nrfx_gpiote_irq_handler+0x54>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7208:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    720a:	bf0c      	ite	eq
    720c:	2103      	moveq	r1, #3
    720e:	2102      	movne	r1, #2
    7210:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7212:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7214:	f006 fab3 	bl	d77e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7218:	2d03      	cmp	r5, #3
    721a:	d004      	beq.n	7226 <nrfx_gpiote_irq_handler+0x122>
    721c:	9a01      	ldr	r2, [sp, #4]
    721e:	2a02      	cmp	r2, #2
    7220:	d106      	bne.n	7230 <nrfx_gpiote_irq_handler+0x12c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7222:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7224:	d1dd      	bne.n	71e2 <nrfx_gpiote_irq_handler+0xde>
            call_handler(pin, trigger);
    7226:	4659      	mov	r1, fp
    7228:	4620      	mov	r0, r4
    722a:	f7ff fcf5 	bl	6c18 <call_handler>
    722e:	e7d8      	b.n	71e2 <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7230:	2a03      	cmp	r2, #3
    7232:	d1d6      	bne.n	71e2 <nrfx_gpiote_irq_handler+0xde>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7234:	2d02      	cmp	r5, #2
    7236:	e7f5      	b.n	7224 <nrfx_gpiote_irq_handler+0x120>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7238:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    723c:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    7240:	6a3a      	ldr	r2, [r7, #32]
    7242:	4917      	ldr	r1, [pc, #92]	; (72a0 <nrfx_gpiote_irq_handler+0x19c>)
    7244:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7246:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
    7248:	6a0b      	ldr	r3, [r1, #32]
    724a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    724c:	620b      	str	r3, [r1, #32]
        if (latch[port_idx])
    724e:	4313      	orrs	r3, r2
    7250:	f47f af7e 	bne.w	7150 <nrfx_gpiote_irq_handler+0x4c>
        mask &= ~NRFX_BIT(ch);
    7254:	2401      	movs	r4, #1
    while (mask)
    7256:	b916      	cbnz	r6, 725e <nrfx_gpiote_irq_handler+0x15a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7258:	b007      	add	sp, #28
    725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    725e:	fa96 f3a6 	rbit	r3, r6
    7262:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7266:	fa04 f203 	lsl.w	r2, r4, r3
    726a:	009b      	lsls	r3, r3, #2
    726c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    7270:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7274:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7278:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    727c:	f3c0 2005 	ubfx	r0, r0, #8, #6
    7280:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    7284:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7288:	f7ff fcc6 	bl	6c18 <call_handler>
    728c:	e7e3      	b.n	7256 <nrfx_gpiote_irq_handler+0x152>
    728e:	bf00      	nop
    7290:	5000d100 	.word	0x5000d100
    7294:	5000d000 	.word	0x5000d000
    7298:	5000d120 	.word	0x5000d120
    729c:	50842500 	.word	0x50842500
    72a0:	50842800 	.word	0x50842800
    72a4:	2000a160 	.word	0x2000a160

000072a8 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    72a8:	2200      	movs	r2, #0
    72aa:	4b03      	ldr	r3, [pc, #12]	; (72b8 <nvmc_readonly_mode_set+0x10>)
    72ac:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    72b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    72b4:	4770      	bx	lr
    72b6:	bf00      	nop
    72b8:	50039000 	.word	0x50039000

000072bc <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    72bc:	4a04      	ldr	r2, [pc, #16]	; (72d0 <nvmc_word_write+0x14>)
    72be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    72c2:	07db      	lsls	r3, r3, #31
    72c4:	d5fb      	bpl.n	72be <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    72c6:	6001      	str	r1, [r0, #0]
    72c8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    72cc:	4770      	bx	lr
    72ce:	bf00      	nop
    72d0:	50039000 	.word	0x50039000

000072d4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    72d4:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    72d6:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    72da:	b983      	cbnz	r3, 72fe <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    72dc:	2202      	movs	r2, #2
    72de:	4b09      	ldr	r3, [pc, #36]	; (7304 <nrfx_nvmc_page_erase+0x30>)
    72e0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    72e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    72e8:	f04f 32ff 	mov.w	r2, #4294967295
    72ec:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    72ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    72f2:	07d2      	lsls	r2, r2, #31
    72f4:	d5fb      	bpl.n	72ee <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    72f6:	f7ff ffd7 	bl	72a8 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    72fa:	4803      	ldr	r0, [pc, #12]	; (7308 <nrfx_nvmc_page_erase+0x34>)
}
    72fc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    72fe:	4803      	ldr	r0, [pc, #12]	; (730c <nrfx_nvmc_page_erase+0x38>)
    7300:	e7fc      	b.n	72fc <nrfx_nvmc_page_erase+0x28>
    7302:	bf00      	nop
    7304:	50039000 	.word	0x50039000
    7308:	0bad0000 	.word	0x0bad0000
    730c:	0bad000a 	.word	0x0bad000a

00007310 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    7310:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    7312:	b508      	push	{r3, lr}
    7314:	4b05      	ldr	r3, [pc, #20]	; (732c <nrfx_nvmc_word_write+0x1c>)
    7316:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    731a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    731e:	f7ff ffcd 	bl	72bc <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    7322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    7326:	f7ff bfbf 	b.w	72a8 <nvmc_readonly_mode_set>
    732a:	bf00      	nop
    732c:	50039000 	.word	0x50039000

00007330 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    7330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7334:	4615      	mov	r5, r2
    p_reg->CONFIGNS = (uint32_t)mode;
    7336:	2201      	movs	r2, #1
    7338:	4b1d      	ldr	r3, [pc, #116]	; (73b0 <nrfx_nvmc_bytes_write+0x80>)
    733a:	4604      	mov	r4, r0
    733c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    7340:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    7344:	f010 0303 	ands.w	r3, r0, #3
{
    7348:	460e      	mov	r6, r1
    if (unaligned_bytes != 0)
    734a:	d010      	beq.n	736e <nrfx_nvmc_bytes_write+0x3e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    734c:	f1c3 0704 	rsb	r7, r3, #4
        if (leading_bytes > num_bytes)
    7350:	42af      	cmp	r7, r5
    7352:	bf28      	it	cs
    7354:	462f      	movcs	r7, r5
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
    7356:	463a      	mov	r2, r7
    7358:	eba0 0803 	sub.w	r8, r0, r3
    735c:	f006 fa1e 	bl	d79c <partial_word_create>
    7360:	4601      	mov	r1, r0
    7362:	4640      	mov	r0, r8
    7364:	f7ff ffaa 	bl	72bc <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    7368:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    736a:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    736c:	443e      	add	r6, r7
    for (uint32_t i = 0; i < num_words; i++)
    736e:	4637      	mov	r7, r6
    7370:	f025 0803 	bic.w	r8, r5, #3
    7374:	44b0      	add	r8, r6
    7376:	eba4 0906 	sub.w	r9, r4, r6
    737a:	45b8      	cmp	r8, r7
    737c:	d111      	bne.n	73a2 <nrfx_nvmc_bytes_write+0x72>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    737e:	f015 0203 	ands.w	r2, r5, #3
    7382:	d00a      	beq.n	739a <nrfx_nvmc_bytes_write+0x6a>
        addr += word_count * NVMC_BYTES_IN_WORD;
    7384:	f025 0503 	bic.w	r5, r5, #3
    7388:	442c      	add	r4, r5
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    738a:	1971      	adds	r1, r6, r5
    738c:	4620      	mov	r0, r4
    738e:	f006 fa05 	bl	d79c <partial_word_create>
    7392:	4601      	mov	r1, r0
    7394:	4620      	mov	r0, r4
    7396:	f7ff ff91 	bl	72bc <nvmc_word_write>
    }

    nvmc_readonly_mode_set();
}
    739a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    nvmc_readonly_mode_set();
    739e:	f7ff bf83 	b.w	72a8 <nvmc_readonly_mode_set>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    73a2:	eb09 0007 	add.w	r0, r9, r7
    73a6:	f857 1b04 	ldr.w	r1, [r7], #4
    73aa:	f7ff ff87 	bl	72bc <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    73ae:	e7e4      	b.n	737a <nrfx_nvmc_bytes_write+0x4a>
    73b0:	50039000 	.word	0x50039000

000073b4 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    73b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    73b6:	4c17      	ldr	r4, [pc, #92]	; (7414 <nrfx_power_init+0x60>)
    73b8:	7823      	ldrb	r3, [r4, #0]
    73ba:	bb4b      	cbnz	r3, 7410 <nrfx_power_init+0x5c>
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
    73bc:	7803      	ldrb	r3, [r0, #0]
    73be:	4a16      	ldr	r2, [pc, #88]	; (7418 <nrfx_power_init+0x64>)
    73c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
    73c4:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
#elif defined(REGULATORS_PRESENT)
    nrf_regulators_dcdcen_set(NRF_REGULATORS, p_config->dcdcen);
    73c8:	7803      	ldrb	r3, [r0, #0]
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    73ca:	f003 0301 	and.w	r3, r3, #1
    73ce:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
#if !defined(NRF_TRUSTZONE_NONSECURE)
    if (p_config->dcdcen && nrf53_errata_53())
    73d2:	7803      	ldrb	r3, [r0, #0]
    73d4:	07db      	lsls	r3, r3, #31
    73d6:	d510      	bpl.n	73fa <nrfx_power_init+0x46>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    73d8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    73dc:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    73e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    73e4:	2907      	cmp	r1, #7
    73e6:	d108      	bne.n	73fa <nrfx_power_init+0x46>
                    switch(var2)
    73e8:	3b02      	subs	r3, #2
    73ea:	2b03      	cmp	r3, #3
    73ec:	d805      	bhi.n	73fa <nrfx_power_init+0x46>
    73ee:	490b      	ldr	r1, [pc, #44]	; (741c <nrfx_power_init+0x68>)
    73f0:	5ccb      	ldrb	r3, [r1, r3]
    73f2:	b113      	cbz	r3, 73fa <nrfx_power_init+0x46>
    {
        *((volatile uint32_t *)0x50004728ul) = 0x1;
    73f4:	2301      	movs	r3, #1
    73f6:	f8c2 3728 	str.w	r3, [r2, #1832]	; 0x728
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    73fa:	2005      	movs	r0, #5
    73fc:	f7fc fb8a 	bl	3b14 <arch_irq_is_enabled>
    7400:	b910      	cbnz	r0, 7408 <nrfx_power_init+0x54>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7402:	2005      	movs	r0, #5
    7404:	f7fc fb62 	bl	3acc <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7408:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    740a:	4805      	ldr	r0, [pc, #20]	; (7420 <nrfx_power_init+0x6c>)
    m_initialized = true;
    740c:	7023      	strb	r3, [r4, #0]
}
    740e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7410:	4804      	ldr	r0, [pc, #16]	; (7424 <nrfx_power_init+0x70>)
    7412:	e7fc      	b.n	740e <nrfx_power_init+0x5a>
    7414:	2005e381 	.word	0x2005e381
    7418:	50004000 	.word	0x50004000
    741c:	0000ebfe 	.word	0x0000ebfe
    7420:	0bad0000 	.word	0x0bad0000
    7424:	0bad000c 	.word	0x0bad000c

00007428 <nrfx_power_irq_handler>:
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->INTENSET;
    7428:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    742c:	b510      	push	{r4, lr}
    742e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7432:	0761      	lsls	r1, r4, #29
    7434:	d50a      	bpl.n	744c <nrfx_power_irq_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7436:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (ret)
    743a:	b13a      	cbz	r2, 744c <nrfx_power_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    743c:	2200      	movs	r2, #0
    743e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7442:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7446:	4b12      	ldr	r3, [pc, #72]	; (7490 <nrfx_power_irq_handler+0x68>)
    7448:	681b      	ldr	r3, [r3, #0]
    744a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    744c:	06a2      	lsls	r2, r4, #26
    744e:	d50c      	bpl.n	746a <nrfx_power_irq_handler+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7450:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7454:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (ret)
    7458:	b13a      	cbz	r2, 746a <nrfx_power_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    745a:	2000      	movs	r0, #0
    745c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    7460:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7464:	4b0b      	ldr	r3, [pc, #44]	; (7494 <nrfx_power_irq_handler+0x6c>)
    7466:	681b      	ldr	r3, [r3, #0]
    7468:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    746a:	0663      	lsls	r3, r4, #25
    746c:	d50f      	bpl.n	748e <nrfx_power_irq_handler+0x66>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    746e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7472:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (ret)
    7476:	b152      	cbz	r2, 748e <nrfx_power_irq_handler+0x66>
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    }
#endif
}
    7478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    747c:	2200      	movs	r2, #0
    747e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    7482:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7486:	4b03      	ldr	r3, [pc, #12]	; (7494 <nrfx_power_irq_handler+0x6c>)
    7488:	2001      	movs	r0, #1
    748a:	681b      	ldr	r3, [r3, #0]
    748c:	4718      	bx	r3
}
    748e:	bd10      	pop	{r4, pc}
    7490:	2001c0e0 	.word	0x2001c0e0
    7494:	2001c0e4 	.word	0x2001c0e4

00007498 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    7498:	b570      	push	{r4, r5, r6, lr}
    749a:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    749e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    74a2:	d14b      	bne.n	753c <qspi_xfer+0xa4>
    74a4:	0784      	lsls	r4, r0, #30
    74a6:	d149      	bne.n	753c <qspi_xfer+0xa4>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    74a8:	4c26      	ldr	r4, [pc, #152]	; (7544 <qspi_xfer+0xac>)
    74aa:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
    74ae:	2d01      	cmp	r5, #1
    74b0:	d001      	beq.n	74b6 <qspi_xfer+0x1e>
    74b2:	429d      	cmp	r5, r3
    74b4:	d144      	bne.n	7540 <qspi_xfer+0xa8>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    74b6:	6825      	ldr	r5, [r4, #0]
    74b8:	2d00      	cmp	r5, #0
    74ba:	d02e      	beq.n	751a <qspi_xfer+0x82>
    {
        if (m_cb.p_buffer_primary)
    74bc:	68a6      	ldr	r6, [r4, #8]
    74be:	b32e      	cbz	r6, 750c <qspi_xfer+0x74>
    bool is_first_buffer = false;
    74c0:	2600      	movs	r6, #0
        {
            m_cb.p_buffer_secondary = p_buffer;
    74c2:	60e0      	str	r0, [r4, #12]
            m_cb.size_secondary     = length;
    74c4:	6161      	str	r1, [r4, #20]
            m_cb.addr_secondary     = address;
    74c6:	61e2      	str	r2, [r4, #28]
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    74c8:	4c1f      	ldr	r4, [pc, #124]	; (7548 <qspi_xfer+0xb0>)
    74ca:	2b02      	cmp	r3, #2
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    74cc:	bf0b      	itete	eq
    74ce:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    74d2:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    74d6:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    74da:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    74de:	bf0b      	itete	eq
    74e0:	2308      	moveq	r3, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    74e2:	2304      	movne	r3, #4
    p_reg->WRITE.CNT = length;
    74e4:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    74e8:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    }

    if (!m_cb.handler)
    74ec:	b9bd      	cbnz	r5, 751e <qspi_xfer+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74ee:	2201      	movs	r2, #1
    74f0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    74f4:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74f8:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74fc:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74fe:	4a12      	ldr	r2, [pc, #72]	; (7548 <qspi_xfer+0xb0>)
    7500:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7504:	2b00      	cmp	r3, #0
    7506:	d0fb      	beq.n	7500 <qspi_xfer+0x68>
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    7508:	4810      	ldr	r0, [pc, #64]	; (754c <qspi_xfer+0xb4>)
}
    750a:	bd70      	pop	{r4, r5, r6, pc}
            is_first_buffer = true;
    750c:	2601      	movs	r6, #1
            m_cb.p_buffer_primary = p_buffer;
    750e:	60a0      	str	r0, [r4, #8]
            m_cb.size_primary     = length;
    7510:	6121      	str	r1, [r4, #16]
            m_cb.addr_primary     = address;
    7512:	61a2      	str	r2, [r4, #24]
            m_cb.state = desired_state;
    7514:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            is_first_buffer = true;
    7518:	e7d6      	b.n	74c8 <qspi_xfer+0x30>
    bool is_first_buffer = false;
    751a:	462e      	mov	r6, r5
    751c:	e7d4      	b.n	74c8 <qspi_xfer+0x30>
    else if (is_first_buffer)
    751e:	2e00      	cmp	r6, #0
    7520:	d0f2      	beq.n	7508 <qspi_xfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7522:	2200      	movs	r2, #0
    7524:	4908      	ldr	r1, [pc, #32]	; (7548 <qspi_xfer+0xb0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7526:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    752a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    752e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7530:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    7534:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7538:	601a      	str	r2, [r3, #0]
    753a:	e7e5      	b.n	7508 <qspi_xfer+0x70>
        return NRFX_ERROR_INVALID_ADDR;
    753c:	4804      	ldr	r0, [pc, #16]	; (7550 <qspi_xfer+0xb8>)
    753e:	e7e4      	b.n	750a <qspi_xfer+0x72>
        return NRFX_ERROR_BUSY;
    7540:	4804      	ldr	r0, [pc, #16]	; (7554 <qspi_xfer+0xbc>)
    7542:	e7e2      	b.n	750a <qspi_xfer+0x72>
    7544:	2001c0e8 	.word	0x2001c0e8
    7548:	5002b000 	.word	0x5002b000
    754c:	0bad0000 	.word	0x0bad0000
    7550:	0bad000a 	.word	0x0bad000a
    7554:	0bad000b 	.word	0x0bad000b

00007558 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    7558:	b538      	push	{r3, r4, r5, lr}
    755a:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    755c:	4d06      	ldr	r5, [pc, #24]	; (7578 <qspi_ready_wait+0x20>)
    755e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    7562:	b933      	cbnz	r3, 7572 <qspi_ready_wait+0x1a>
    7564:	200a      	movs	r0, #10
    7566:	f005 ffe4 	bl	d532 <nrfx_busy_wait>
    756a:	3c01      	subs	r4, #1
    756c:	d1f7      	bne.n	755e <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    756e:	4803      	ldr	r0, [pc, #12]	; (757c <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    7570:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    7572:	4803      	ldr	r0, [pc, #12]	; (7580 <qspi_ready_wait+0x28>)
    7574:	e7fc      	b.n	7570 <qspi_ready_wait+0x18>
    7576:	bf00      	nop
    7578:	5002b000 	.word	0x5002b000
    757c:	0bad0007 	.word	0x0bad0007
    7580:	0bad0000 	.word	0x0bad0000

00007584 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    7584:	4b08      	ldr	r3, [pc, #32]	; (75a8 <qspi_event_xfer_handle.constprop.0+0x24>)
    7586:	689a      	ldr	r2, [r3, #8]
    7588:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    758a:	691a      	ldr	r2, [r3, #16]
    758c:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    758e:	699a      	ldr	r2, [r3, #24]
    7590:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    7592:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    7594:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    7596:	b132      	cbz	r2, 75a6 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    7598:	695a      	ldr	r2, [r3, #20]
    759a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    759c:	69da      	ldr	r2, [r3, #28]
    759e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    75a0:	2200      	movs	r2, #0
    75a2:	60da      	str	r2, [r3, #12]
    75a4:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    75a6:	4770      	bx	lr
    75a8:	2001c0e8 	.word	0x2001c0e8

000075ac <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    75ac:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    75ae:	4a0a      	ldr	r2, [pc, #40]	; (75d8 <nrf_gpio_cfg.constprop.0+0x2c>)
    75b0:	4c0a      	ldr	r4, [pc, #40]	; (75dc <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
    75b2:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    75b6:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    75b8:	2801      	cmp	r0, #1
    75ba:	bf08      	it	eq
    75bc:	4622      	moveq	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    75be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    75c2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    75c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    75ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    75ce:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    75d2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    75d6:	bd10      	pop	{r4, pc}
    75d8:	50842500 	.word	0x50842500
    75dc:	50842800 	.word	0x50842800

000075e0 <nrf_qspi_cinstrdata_get.constprop.0>:
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    75e0:	4b0e      	ldr	r3, [pc, #56]	; (761c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    75e2:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    75e4:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    75e8:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    75ec:	2807      	cmp	r0, #7
    75ee:	d813      	bhi.n	7618 <nrf_qspi_cinstrdata_get.constprop.0+0x38>
    75f0:	e8df f000 	tbb	[pc, r0]
    75f4:	0b0d0f11 	.word	0x0b0d0f11
    75f8:	0406080a 	.word	0x0406080a
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    75fc:	0e10      	lsrs	r0, r2, #24
    75fe:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    7600:	0c10      	lsrs	r0, r2, #16
    7602:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    7604:	0a10      	lsrs	r0, r2, #8
    7606:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    7608:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    760a:	0e1a      	lsrs	r2, r3, #24
    760c:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    760e:	0c1a      	lsrs	r2, r3, #16
    7610:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    7612:	0a1a      	lsrs	r2, r3, #8
    7614:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    7616:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    7618:	4770      	bx	lr
    761a:	bf00      	nop
    761c:	5002b000 	.word	0x5002b000

00007620 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    7620:	3802      	subs	r0, #2
    7622:	2807      	cmp	r0, #7
    7624:	d81f      	bhi.n	7666 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    7626:	e8df f000 	tbb	[pc, r0]
    762a:	2729      	.short	0x2729
    762c:	21231125 	.word	0x21231125
    7630:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    7632:	79cb      	ldrb	r3, [r1, #7]
    7634:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    7636:	798a      	ldrb	r2, [r1, #6]
    7638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    763c:	794a      	ldrb	r2, [r1, #5]
    763e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    7642:	790a      	ldrb	r2, [r1, #4]
    7644:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    7646:	4a0e      	ldr	r2, [pc, #56]	; (7680 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7648:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    764c:	78cb      	ldrb	r3, [r1, #3]
    764e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    7650:	788a      	ldrb	r2, [r1, #2]
    7652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    7656:	784a      	ldrb	r2, [r1, #1]
    7658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    765c:	780a      	ldrb	r2, [r1, #0]
    765e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    7660:	4a07      	ldr	r2, [pc, #28]	; (7680 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7662:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    7666:	4770      	bx	lr
    switch (length)
    7668:	2300      	movs	r3, #0
    766a:	e7e4      	b.n	7636 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    766c:	2300      	movs	r3, #0
    766e:	e7e5      	b.n	763c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    7670:	2300      	movs	r3, #0
    7672:	e7e6      	b.n	7642 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    7674:	2300      	movs	r3, #0
    7676:	e7eb      	b.n	7650 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    7678:	2300      	movs	r3, #0
    767a:	e7ec      	b.n	7656 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    767c:	2300      	movs	r3, #0
    767e:	e7ed      	b.n	765c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    7680:	5002b000 	.word	0x5002b000

00007684 <nrfx_qspi_init>:
{
    7684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7686:	4f6c      	ldr	r7, [pc, #432]	; (7838 <nrfx_qspi_init+0x1b4>)
{
    7688:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    768a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
{
    768e:	460d      	mov	r5, r1
    7690:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7692:	2b00      	cmp	r3, #0
    7694:	f040 80cc 	bne.w	7830 <nrfx_qspi_init+0x1ac>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    7698:	7cc2      	ldrb	r2, [r0, #19]
    769a:	b112      	cbz	r2, 76a2 <nrfx_qspi_init+0x1e>
    769c:	7d03      	ldrb	r3, [r0, #20]
    769e:	2b00      	cmp	r3, #0
    76a0:	d16c      	bne.n	777c <nrfx_qspi_init+0xf8>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    76a2:	7920      	ldrb	r0, [r4, #4]
    76a4:	28ff      	cmp	r0, #255	; 0xff
    76a6:	f000 80c5 	beq.w	7834 <nrfx_qspi_init+0x1b0>
    76aa:	7963      	ldrb	r3, [r4, #5]
    76ac:	2bff      	cmp	r3, #255	; 0xff
    76ae:	f000 80c1 	beq.w	7834 <nrfx_qspi_init+0x1b0>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    76b2:	79a3      	ldrb	r3, [r4, #6]
    76b4:	2bff      	cmp	r3, #255	; 0xff
    76b6:	f000 80bd 	beq.w	7834 <nrfx_qspi_init+0x1b0>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
    76ba:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    76bc:	29ff      	cmp	r1, #255	; 0xff
    76be:	f000 80b9 	beq.w	7834 <nrfx_qspi_init+0x1b0>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    76c2:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    76c4:	f8df c174 	ldr.w	ip, [pc, #372]	; 783c <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    76c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    76cc:	4563      	cmp	r3, ip
    76ce:	f040 80b1 	bne.w	7834 <nrfx_qspi_init+0x1b0>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
    76d2:	290e      	cmp	r1, #14
    76d4:	f040 80ae 	bne.w	7834 <nrfx_qspi_init+0x1b0>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    76d8:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    76da:	2bff      	cmp	r3, #255	; 0xff
    76dc:	d002      	beq.n	76e4 <nrfx_qspi_init+0x60>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    76de:	2b0f      	cmp	r3, #15
    76e0:	f040 80a8 	bne.w	7834 <nrfx_qspi_init+0x1b0>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    76e4:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    76e6:	2bff      	cmp	r3, #255	; 0xff
    76e8:	d002      	beq.n	76f0 <nrfx_qspi_init+0x6c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    76ea:	2b10      	cmp	r3, #16
    76ec:	f040 80a2 	bne.w	7834 <nrfx_qspi_init+0x1b0>
    if (!p_config->skip_gpio_cfg)
    76f0:	b9b2      	cbnz	r2, 7720 <nrfx_qspi_init+0x9c>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    76f2:	2103      	movs	r1, #3
    76f4:	f7ff ff5a 	bl	75ac <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    76f8:	7960      	ldrb	r0, [r4, #5]
    76fa:	f7ff ff57 	bl	75ac <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    76fe:	79a0      	ldrb	r0, [r4, #6]
    7700:	f7ff ff54 	bl	75ac <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    7704:	79e0      	ldrb	r0, [r4, #7]
    7706:	f7ff ff51 	bl	75ac <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    770a:	7a20      	ldrb	r0, [r4, #8]
    770c:	28ff      	cmp	r0, #255	; 0xff
    770e:	d001      	beq.n	7714 <nrfx_qspi_init+0x90>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    7710:	f7ff ff4c 	bl	75ac <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7714:	7a60      	ldrb	r0, [r4, #9]
    7716:	28ff      	cmp	r0, #255	; 0xff
    7718:	d002      	beq.n	7720 <nrfx_qspi_init+0x9c>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    771a:	2103      	movs	r1, #3
    771c:	f7ff ff46 	bl	75ac <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    7720:	7d23      	ldrb	r3, [r4, #20]
    7722:	bb5b      	cbnz	r3, 777c <nrfx_qspi_init+0xf8>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    7724:	7923      	ldrb	r3, [r4, #4]
    7726:	2bff      	cmp	r3, #255	; 0xff
    7728:	bf14      	ite	ne
    772a:	461a      	movne	r2, r3
    772c:	f04f 32ff 	moveq.w	r2, #4294967295
    7730:	4b43      	ldr	r3, [pc, #268]	; (7840 <nrfx_qspi_init+0x1bc>)
    7732:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    7736:	7962      	ldrb	r2, [r4, #5]
    7738:	2aff      	cmp	r2, #255	; 0xff
    773a:	bf08      	it	eq
    773c:	f04f 32ff 	moveq.w	r2, #4294967295
    7740:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    7744:	79a2      	ldrb	r2, [r4, #6]
    7746:	2aff      	cmp	r2, #255	; 0xff
    7748:	bf08      	it	eq
    774a:	f04f 32ff 	moveq.w	r2, #4294967295
    774e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    7752:	79e2      	ldrb	r2, [r4, #7]
    7754:	2aff      	cmp	r2, #255	; 0xff
    7756:	bf08      	it	eq
    7758:	f04f 32ff 	moveq.w	r2, #4294967295
    775c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    7760:	7a22      	ldrb	r2, [r4, #8]
    7762:	2aff      	cmp	r2, #255	; 0xff
    7764:	bf08      	it	eq
    7766:	f04f 32ff 	moveq.w	r2, #4294967295
    776a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    776e:	7a62      	ldrb	r2, [r4, #9]
    7770:	2aff      	cmp	r2, #255	; 0xff
    7772:	bf08      	it	eq
    7774:	f04f 32ff 	moveq.w	r2, #4294967295
    7778:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->XIPOFFSET = xip_offset;
    777c:	4a30      	ldr	r2, [pc, #192]	; (7840 <nrfx_qspi_init+0x1bc>)
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    777e:	6823      	ldr	r3, [r4, #0]
    7780:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7784:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    7786:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
    7788:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    778a:	019b      	lsls	r3, r3, #6
    778c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
    7790:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    7792:	7b61      	ldrb	r1, [r4, #13]
    7794:	2900      	cmp	r1, #0
    7796:	bf14      	ite	ne
    7798:	2180      	movne	r1, #128	; 0x80
    779a:	2100      	moveq	r1, #0
    779c:	430b      	orrs	r3, r1
    p_reg->IFCONFIG0 = config;
    779e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    return p_reg->IFCONFIG0;
    77a2:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    77a6:	7c62      	ldrb	r2, [r4, #17]
    77a8:	2a00      	cmp	r2, #0
    77aa:	d13c      	bne.n	7826 <nrfx_qspi_init+0x1a2>
        regval |= ((1 << 16) | (1 << 17));
    77ac:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    77b0:	4923      	ldr	r1, [pc, #140]	; (7840 <nrfx_qspi_init+0x1bc>)
    77b2:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    77b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    77ba:	f8c1 3640 	str.w	r3, [r1, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    77be:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
    77c2:	7ba2      	ldrb	r2, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    77c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    77c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    77cc:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    77ce:	7be2      	ldrb	r2, [r4, #15]
    77d0:	f894 c010 	ldrb.w	ip, [r4, #16]
    77d4:	2a00      	cmp	r2, #0
    77d6:	bf14      	ite	ne
    77d8:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    77dc:	2200      	moveq	r2, #0
    77de:	7c60      	ldrb	r0, [r4, #17]
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    77e0:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
    77e4:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
    77e8:	4313      	orrs	r3, r2
    p_reg->IFCONFIG1 = config;
    77ea:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    77ee:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
    77f0:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    77f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
    77f8:	2301      	movs	r3, #1
    77fa:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    if (handler)
    77fe:	b115      	cbz	r5, 7806 <nrfx_qspi_init+0x182>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    7800:	202b      	movs	r0, #43	; 0x2b
    7802:	f7fc f963 	bl	3acc <arch_irq_enable>
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7806:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
    7808:	2100      	movs	r1, #0
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    780a:	4b0d      	ldr	r3, [pc, #52]	; (7840 <nrfx_qspi_init+0x1bc>)
    m_cb.p_buffer_secondary = NULL;
    780c:	e9c7 1102 	strd	r1, r1, [r7, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    7810:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
    7814:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7818:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    781c:	601a      	str	r2, [r3, #0]
}
    781e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
    7822:	f7ff be99 	b.w	7558 <qspi_ready_wait>
        regval &= ~(1 << 17);
    7826:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    782a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    782e:	e7bf      	b.n	77b0 <nrfx_qspi_init+0x12c>
        return NRFX_ERROR_INVALID_STATE;
    7830:	4804      	ldr	r0, [pc, #16]	; (7844 <nrfx_qspi_init+0x1c0>)
}
    7832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7834:	4804      	ldr	r0, [pc, #16]	; (7848 <nrfx_qspi_init+0x1c4>)
    7836:	e7fc      	b.n	7832 <nrfx_qspi_init+0x1ae>
    7838:	2001c0e8 	.word	0x2001c0e8
    783c:	000d1211 	.word	0x000d1211
    7840:	5002b000 	.word	0x5002b000
    7844:	0bad0005 	.word	0x0bad0005
    7848:	0bad0004 	.word	0x0bad0004

0000784c <nrfx_qspi_cinstr_xfer>:
{
    784c:	b570      	push	{r4, r5, r6, lr}
    784e:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7850:	4a19      	ldr	r2, [pc, #100]	; (78b8 <nrfx_qspi_cinstr_xfer+0x6c>)
{
    7852:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7854:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    7858:	2a01      	cmp	r2, #1
    785a:	d12b      	bne.n	78b4 <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    785c:	2200      	movs	r2, #0
    785e:	4e17      	ldr	r6, [pc, #92]	; (78bc <nrfx_qspi_cinstr_xfer+0x70>)
    7860:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
    7864:	b111      	cbz	r1, 786c <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    7866:	7840      	ldrb	r0, [r0, #1]
    7868:	f7ff feda 	bl	7620 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    786c:	2301      	movs	r3, #1
    786e:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7872:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7874:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7876:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    787c:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    787e:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7880:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    7882:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7886:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7888:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    788c:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    788e:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7892:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    7896:	f7ff fe5f 	bl	7558 <qspi_ready_wait>
    789a:	4b09      	ldr	r3, [pc, #36]	; (78c0 <nrfx_qspi_cinstr_xfer+0x74>)
    789c:	4298      	cmp	r0, r3
    789e:	d00a      	beq.n	78b6 <nrfx_qspi_cinstr_xfer+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78a0:	2300      	movs	r3, #0
    78a2:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
    78a6:	b11c      	cbz	r4, 78b0 <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    78a8:	4621      	mov	r1, r4
    78aa:	7868      	ldrb	r0, [r5, #1]
    78ac:	f7ff fe98 	bl	75e0 <nrf_qspi_cinstrdata_get.constprop.0>
    78b0:	4804      	ldr	r0, [pc, #16]	; (78c4 <nrfx_qspi_cinstr_xfer+0x78>)
    78b2:	e000      	b.n	78b6 <nrfx_qspi_cinstr_xfer+0x6a>
        return NRFX_ERROR_BUSY;
    78b4:	4804      	ldr	r0, [pc, #16]	; (78c8 <nrfx_qspi_cinstr_xfer+0x7c>)
}
    78b6:	bd70      	pop	{r4, r5, r6, pc}
    78b8:	2001c0e8 	.word	0x2001c0e8
    78bc:	5002b000 	.word	0x5002b000
    78c0:	0bad0007 	.word	0x0bad0007
    78c4:	0bad0000 	.word	0x0bad0000
    78c8:	0bad000b 	.word	0x0bad000b

000078cc <nrfx_qspi_mem_busy_check>:
{
    78cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    78ce:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    78d0:	f8cd 300a 	str.w	r3, [sp, #10]
    uint8_t status_value = 0;
    78d4:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    78d8:	2305      	movs	r3, #5
    78da:	f88d 3008 	strb.w	r3, [sp, #8]
    78de:	2302      	movs	r3, #2
    78e0:	f88d 3009 	strb.w	r3, [sp, #9]
    78e4:	2301      	movs	r3, #1
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    78e6:	f10d 0207 	add.w	r2, sp, #7
    78ea:	4611      	mov	r1, r2
    78ec:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    78ee:	f88d 300b 	strb.w	r3, [sp, #11]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    78f2:	f7ff ffab 	bl	784c <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    78f6:	4b06      	ldr	r3, [pc, #24]	; (7910 <nrfx_qspi_mem_busy_check+0x44>)
    78f8:	4298      	cmp	r0, r3
    78fa:	d106      	bne.n	790a <nrfx_qspi_mem_busy_check+0x3e>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    78fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    7900:	f013 0f01 	tst.w	r3, #1
    7904:	4b03      	ldr	r3, [pc, #12]	; (7914 <nrfx_qspi_mem_busy_check+0x48>)
    7906:	bf18      	it	ne
    7908:	4618      	movne	r0, r3
}
    790a:	b005      	add	sp, #20
    790c:	f85d fb04 	ldr.w	pc, [sp], #4
    7910:	0bad0000 	.word	0x0bad0000
    7914:	0bad000b 	.word	0x0bad000b

00007918 <nrfx_qspi_uninit>:
{
    7918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    791c:	202b      	movs	r0, #43	; 0x2b
    791e:	f7fc f8e5 	bl	3aec <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    7922:	4b21      	ldr	r3, [pc, #132]	; (79a8 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
    7924:	4e21      	ldr	r6, [pc, #132]	; (79ac <nrfx_qspi_uninit+0x94>)
    7926:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    792a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    792e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    7932:	bf04      	itt	eq
    7934:	4a1e      	ldreq	r2, [pc, #120]	; (79b0 <nrfx_qspi_uninit+0x98>)
    7936:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    793a:	2201      	movs	r2, #1
    793c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7940:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    7942:	2200      	movs	r2, #0
    7944:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7948:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    794c:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    7950:	bb22      	cbnz	r2, 799c <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    7952:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    7956:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    795a:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    795c:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    7960:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    7964:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    7968:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    796c:	f005 ff39 	bl	d7e2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    7970:	fa5f f089 	uxtb.w	r0, r9
    7974:	f005 ff35 	bl	d7e2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    7978:	fa5f f088 	uxtb.w	r0, r8
    797c:	f005 ff31 	bl	d7e2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    7980:	b2f8      	uxtb	r0, r7
    7982:	f005 ff2e 	bl	d7e2 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7986:	b2e8      	uxtb	r0, r5
    7988:	28ff      	cmp	r0, #255	; 0xff
    798a:	b2e4      	uxtb	r4, r4
    798c:	d001      	beq.n	7992 <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
    798e:	f005 ff28 	bl	d7e2 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7992:	2cff      	cmp	r4, #255	; 0xff
    7994:	d002      	beq.n	799c <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
    7996:	4620      	mov	r0, r4
    7998:	f005 ff23 	bl	d7e2 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    799c:	2300      	movs	r3, #0
    799e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    79a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    79a6:	bf00      	nop
    79a8:	5002b000 	.word	0x5002b000
    79ac:	2001c0e8 	.word	0x2001c0e8
    79b0:	00030100 	.word	0x00030100

000079b4 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    79b4:	078b      	lsls	r3, r1, #30
{
    79b6:	b510      	push	{r4, lr}
    if (!nrfx_is_word_aligned((void const *)start_address))
    79b8:	d120      	bne.n	79fc <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    79ba:	4a12      	ldr	r2, [pc, #72]	; (7a04 <nrfx_qspi_erase+0x50>)
    79bc:	6814      	ldr	r4, [r2, #0]
    79be:	b11c      	cbz	r4, 79c8 <nrfx_qspi_erase+0x14>
    79c0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    79c4:	2b01      	cmp	r3, #1
    79c6:	d11b      	bne.n	7a00 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    79c8:	2304      	movs	r3, #4
    79ca:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    79ce:	4b0e      	ldr	r3, [pc, #56]	; (7a08 <nrfx_qspi_erase+0x54>)
    79d0:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79d4:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    79d6:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79da:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79de:	2101      	movs	r1, #1
    79e0:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    79e2:	b944      	cbnz	r4, 79f6 <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    79e4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    79e8:	2900      	cmp	r1, #0
    79ea:	d0fb      	beq.n	79e4 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    79ec:	2301      	movs	r3, #1
    79ee:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    return NRFX_SUCCESS;
    79f2:	4806      	ldr	r0, [pc, #24]	; (7a0c <nrfx_qspi_erase+0x58>)
}
    79f4:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
    79f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    79fa:	e7fa      	b.n	79f2 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    79fc:	4804      	ldr	r0, [pc, #16]	; (7a10 <nrfx_qspi_erase+0x5c>)
    79fe:	e7f9      	b.n	79f4 <nrfx_qspi_erase+0x40>
        return NRFX_ERROR_BUSY;
    7a00:	4804      	ldr	r0, [pc, #16]	; (7a14 <nrfx_qspi_erase+0x60>)
    7a02:	e7f7      	b.n	79f4 <nrfx_qspi_erase+0x40>
    7a04:	2001c0e8 	.word	0x2001c0e8
    7a08:	5002b000 	.word	0x5002b000
    7a0c:	0bad0000 	.word	0x0bad0000
    7a10:	0bad000a 	.word	0x0bad000a
    7a14:	0bad000b 	.word	0x0bad000b

00007a18 <nrfx_qspi_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a18:	4b17      	ldr	r3, [pc, #92]	; (7a78 <nrfx_qspi_irq_handler+0x60>)
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    7a1a:	b510      	push	{r4, lr}
    7a1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7a20:	b1e2      	cbz	r2, 7a5c <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a22:	2200      	movs	r2, #0
    switch (m_cb.state)
    7a24:	4c15      	ldr	r4, [pc, #84]	; (7a7c <nrfx_qspi_irq_handler+0x64>)
    7a26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7a2a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    7a2e:	2a03      	cmp	r2, #3
    7a30:	d015      	beq.n	7a5e <nrfx_qspi_irq_handler+0x46>
    7a32:	2a04      	cmp	r2, #4
    7a34:	d015      	beq.n	7a62 <nrfx_qspi_irq_handler+0x4a>
    7a36:	2a02      	cmp	r2, #2
    7a38:	d104      	bne.n	7a44 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    7a3a:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    7a3c:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    7a40:	f7ff fda0 	bl	7584 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    7a44:	68a3      	ldr	r3, [r4, #8]
    7a46:	b913      	cbnz	r3, 7a4e <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    7a48:	2301      	movs	r3, #1
    7a4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    7a4e:	e9d4 3100 	ldrd	r3, r1, [r4]
    7a52:	2000      	movs	r0, #0
    7a54:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    7a56:	2300      	movs	r3, #0
    7a58:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    7a5c:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    7a5e:	2302      	movs	r3, #2
    7a60:	e7ec      	b.n	7a3c <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    7a62:	2203      	movs	r2, #3
    7a64:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    7a68:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    7a6c:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    7a6e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    7a72:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    7a76:	e7e5      	b.n	7a44 <nrfx_qspi_irq_handler+0x2c>
    7a78:	5002b000 	.word	0x5002b000
    7a7c:	2001c0e8 	.word	0x2001c0e8

00007a80 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7a80:	4b05      	ldr	r3, [pc, #20]	; (7a98 <ep_state_access+0x18>)
    7a82:	f010 0f80 	tst.w	r0, #128	; 0x80
    7a86:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    7a8a:	bf08      	it	eq
    7a8c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    7a8e:	f000 000f 	and.w	r0, r0, #15
}
    7a92:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7a96:	4770      	bx	lr
    7a98:	2001c28c 	.word	0x2001c28c

00007a9c <ev_usbreset_handler>:
 * @{
 */

static void ev_usbreset_handler(void)
{
    m_bus_suspend = false;
    7a9c:	2300      	movs	r3, #0
{
    7a9e:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    7aa0:	4a08      	ldr	r2, [pc, #32]	; (7ac4 <ev_usbreset_handler+0x28>)
    m_last_setup_dir = NRFX_USBD_EPOUT0;

    const nrfx_usbd_evt_t evt = {
    7aa2:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_bus_suspend = false;
    7aa6:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7aa8:	4a07      	ldr	r2, [pc, #28]	; (7ac8 <ev_usbreset_handler+0x2c>)
    const nrfx_usbd_evt_t evt = {
    7aaa:	f88d 3007 	strb.w	r3, [sp, #7]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7aae:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    7ab0:	2301      	movs	r3, #1
    7ab2:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    7ab6:	4b05      	ldr	r3, [pc, #20]	; (7acc <ev_usbreset_handler+0x30>)
    7ab8:	a801      	add	r0, sp, #4
    7aba:	681b      	ldr	r3, [r3, #0]
    7abc:	4798      	blx	r3
}
    7abe:	b003      	add	sp, #12
    7ac0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ac4:	2005e382 	.word	0x2005e382
    7ac8:	2005e385 	.word	0x2005e385
    7acc:	2001c31c 	.word	0x2001c31c

00007ad0 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    7ad0:	4b21      	ldr	r3, [pc, #132]	; (7b58 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    7ad2:	b513      	push	{r0, r1, r4, lr}
    7ad4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    7ad8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    7adc:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    7ade:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7ae2:	d50e      	bpl.n	7b02 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    7ae4:	2201      	movs	r2, #1
    7ae6:	4b1d      	ldr	r3, [pc, #116]	; (7b5c <ev_usbevent_handler+0x8c>)
        const nrfx_usbd_evt_t evt = {
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    7ae8:	a801      	add	r0, sp, #4
        m_bus_suspend = true;
    7aea:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    7aec:	2300      	movs	r3, #0
    7aee:	f8ad 3005 	strh.w	r3, [sp, #5]
    7af2:	f88d 3007 	strb.w	r3, [sp, #7]
    7af6:	2302      	movs	r3, #2
    7af8:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7afc:	4b18      	ldr	r3, [pc, #96]	; (7b60 <ev_usbevent_handler+0x90>)
    7afe:	681b      	ldr	r3, [r3, #0]
    7b00:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7b02:	05a2      	lsls	r2, r4, #22
    7b04:	d50d      	bpl.n	7b22 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    7b06:	2300      	movs	r3, #0
    7b08:	4a14      	ldr	r2, [pc, #80]	; (7b5c <ev_usbevent_handler+0x8c>)
        const nrfx_usbd_evt_t evt = {
    7b0a:	f8ad 3005 	strh.w	r3, [sp, #5]
        m_bus_suspend = false;
    7b0e:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    7b10:	f88d 3007 	strb.w	r3, [sp, #7]
    7b14:	2303      	movs	r3, #3
    7b16:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    7b1a:	4b11      	ldr	r3, [pc, #68]	; (7b60 <ev_usbevent_handler+0x90>)
    7b1c:	a801      	add	r0, sp, #4
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    7b22:	0563      	lsls	r3, r4, #21
    7b24:	d515      	bpl.n	7b52 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    7b26:	4a0d      	ldr	r2, [pc, #52]	; (7b5c <ev_usbevent_handler+0x8c>)
    7b28:	7813      	ldrb	r3, [r2, #0]
    7b2a:	b193      	cbz	r3, 7b52 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    7b2c:	2300      	movs	r3, #0
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    7b2e:	2101      	movs	r1, #1
    7b30:	7013      	strb	r3, [r2, #0]
    7b32:	4a09      	ldr	r2, [pc, #36]	; (7b58 <ev_usbevent_handler+0x88>)
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    7b34:	a801      	add	r0, sp, #4
    7b36:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7b3a:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7b3c:	6d92      	ldr	r2, [r2, #88]	; 0x58
            const nrfx_usbd_evt_t evt = {
    7b3e:	f8ad 3005 	strh.w	r3, [sp, #5]
    7b42:	f88d 3007 	strb.w	r3, [sp, #7]
    7b46:	2304      	movs	r3, #4
    7b48:	f88d 3004 	strb.w	r3, [sp, #4]
            m_event_handler(&evt);
    7b4c:	4b04      	ldr	r3, [pc, #16]	; (7b60 <ev_usbevent_handler+0x90>)
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	4798      	blx	r3
        }
    }
}
    7b52:	b002      	add	sp, #8
    7b54:	bd10      	pop	{r4, pc}
    7b56:	bf00      	nop
    7b58:	50036000 	.word	0x50036000
    7b5c:	2005e382 	.word	0x2005e382
    7b60:	2001c31c 	.word	0x2001c31c

00007b64 <nrfx_usbd_feeder_flash>:
{
    7b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    7b66:	684d      	ldr	r5, [r1, #4]
{
    7b68:	460c      	mov	r4, r1
    7b6a:	4295      	cmp	r5, r2
    7b6c:	bf28      	it	cs
    7b6e:	4615      	movcs	r5, r2
    7b70:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7b72:	4f09      	ldr	r7, [pc, #36]	; (7b98 <nrfx_usbd_feeder_flash+0x34>)
    7b74:	462a      	mov	r2, r5
    7b76:	4638      	mov	r0, r7
    7b78:	6809      	ldr	r1, [r1, #0]
    7b7a:	f003 fcc6 	bl	b50a <memcpy>
    p_transfer->size -= tx_size;
    7b7e:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    7b80:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    7b82:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    7b84:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    7b88:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    7b8a:	6060      	str	r0, [r4, #4]
}
    7b8c:	3800      	subs	r0, #0
    7b8e:	bf18      	it	ne
    7b90:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    7b92:	6022      	str	r2, [r4, #0]
}
    7b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b96:	bf00      	nop
    7b98:	2001c320 	.word	0x2001c320

00007b9c <nrfx_usbd_feeder_flash_zlp>:
{
    7b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    7b9e:	684c      	ldr	r4, [r1, #4]
{
    7ba0:	4606      	mov	r6, r0
    7ba2:	4294      	cmp	r4, r2
    7ba4:	bf28      	it	cs
    7ba6:	4614      	movcs	r4, r2
    7ba8:	460d      	mov	r5, r1
    if (tx_size != 0)
    7baa:	b18c      	cbz	r4, 7bd0 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7bac:	4f09      	ldr	r7, [pc, #36]	; (7bd4 <nrfx_usbd_feeder_flash_zlp+0x38>)
    7bae:	4622      	mov	r2, r4
    7bb0:	4638      	mov	r0, r7
    7bb2:	6809      	ldr	r1, [r1, #0]
    7bb4:	f003 fca9 	bl	b50a <memcpy>
        p_next->p_data.tx = p_buffer;
    7bb8:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    7bba:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    7bbc:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    7bbe:	1b1b      	subs	r3, r3, r4
    7bc0:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    7bc2:	682b      	ldr	r3, [r5, #0]
}
    7bc4:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    7bc6:	4423      	add	r3, r4
}
    7bc8:	bf18      	it	ne
    7bca:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    7bcc:	602b      	str	r3, [r5, #0]
}
    7bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    7bd0:	6004      	str	r4, [r0, #0]
    7bd2:	e7f2      	b.n	7bba <nrfx_usbd_feeder_flash_zlp+0x1e>
    7bd4:	2001c320 	.word	0x2001c320

00007bd8 <ev_sof_handler>:
    nrfx_usbd_evt_t evt =  {
    7bd8:	2300      	movs	r3, #0
{
    7bda:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    7bdc:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    7be0:	4b0b      	ldr	r3, [pc, #44]	; (7c10 <ev_sof_handler+0x38>)
    m_event_handler(&evt);
    7be2:	a801      	add	r0, sp, #4
    7be4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    7be8:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    7bec:	f8ad 2006 	strh.w	r2, [sp, #6]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	bf0c      	ite	eq
    7bf4:	f44f 7180 	moveq.w	r1, #256	; 0x100
    7bf8:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    7bfc:	4a05      	ldr	r2, [pc, #20]	; (7c14 <ev_sof_handler+0x3c>)
    7bfe:	6813      	ldr	r3, [r2, #0]
    7c00:	430b      	orrs	r3, r1
    7c02:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    7c04:	4b04      	ldr	r3, [pc, #16]	; (7c18 <ev_sof_handler+0x40>)
    7c06:	681b      	ldr	r3, [r3, #0]
    7c08:	4798      	blx	r3
}
    7c0a:	b003      	add	sp, #12
    7c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c10:	50036000 	.word	0x50036000
    7c14:	2001c1f8 	.word	0x2001c1f8
    7c18:	2001c31c 	.word	0x2001c31c

00007c1c <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7c1c:	4b04      	ldr	r3, [pc, #16]	; (7c30 <atomic_and.constprop.0.isra.0+0x14>)
    7c1e:	e8d3 2fef 	ldaex	r2, [r3]
    7c22:	4002      	ands	r2, r0
    7c24:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7c28:	2900      	cmp	r1, #0
    7c2a:	d1f8      	bne.n	7c1e <atomic_and.constprop.0.isra.0+0x2>
}
    7c2c:	4770      	bx	lr
    7c2e:	bf00      	nop
    7c30:	2001c188 	.word	0x2001c188

00007c34 <nrf_usbd_epin_dma_handler>:
    m_dma_pending = false;
    7c34:	2200      	movs	r2, #0
{
    7c36:	b508      	push	{r3, lr}
    m_dma_pending = false;
    7c38:	4b0b      	ldr	r3, [pc, #44]	; (7c68 <nrf_usbd_epin_dma_handler+0x34>)
{
    7c3a:	4601      	mov	r1, r0
    m_dma_pending = false;
    7c3c:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7c3e:	f7ff ff1f 	bl	7a80 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7c42:	7b83      	ldrb	r3, [r0, #14]
    7c44:	2b03      	cmp	r3, #3
    7c46:	d10a      	bne.n	7c5e <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7c48:	4608      	mov	r0, r1
    7c4a:	f005 fe14 	bl	d876 <ep2bit>
    7c4e:	2301      	movs	r3, #1
    7c50:	fa03 f000 	lsl.w	r0, r3, r0
    7c54:	43c0      	mvns	r0, r0
}
    7c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7c5a:	f7ff bfdf 	b.w	7c1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7c5e:	6803      	ldr	r3, [r0, #0]
    7c60:	2b00      	cmp	r3, #0
    7c62:	d0f1      	beq.n	7c48 <nrf_usbd_epin_dma_handler+0x14>
}
    7c64:	bd08      	pop	{r3, pc}
    7c66:	bf00      	nop
    7c68:	2005e383 	.word	0x2005e383

00007c6c <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    7c6c:	2200      	movs	r2, #0
    7c6e:	4b08      	ldr	r3, [pc, #32]	; (7c90 <nrf_usbd_ep0in_dma_handler+0x24>)
    7c70:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7c72:	4b08      	ldr	r3, [pc, #32]	; (7c94 <nrf_usbd_ep0in_dma_handler+0x28>)
    7c74:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    7c78:	2a03      	cmp	r2, #3
    7c7a:	d103      	bne.n	7c84 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7c7c:	f06f 0001 	mvn.w	r0, #1
    7c80:	f7ff bfcc 	b.w	7c1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7c88:	2b00      	cmp	r3, #0
    7c8a:	d0f7      	beq.n	7c7c <nrf_usbd_ep0in_dma_handler+0x10>
}
    7c8c:	4770      	bx	lr
    7c8e:	bf00      	nop
    7c90:	2005e383 	.word	0x2005e383
    7c94:	2001c1fc 	.word	0x2001c1fc

00007c98 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    7c98:	2201      	movs	r2, #1
{
    7c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    7c9c:	fa02 f501 	lsl.w	r5, r2, r1
    7ca0:	491c      	ldr	r1, [pc, #112]	; (7d14 <usbd_ep_data_handler+0x7c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    7ca2:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    7ca6:	680b      	ldr	r3, [r1, #0]
{
    7ca8:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    7caa:	ea43 0305 	orr.w	r3, r3, r5
    7cae:	4e1a      	ldr	r6, [pc, #104]	; (7d18 <usbd_ep_data_handler+0x80>)
    7cb0:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7cb2:	d024      	beq.n	7cfe <usbd_ep_data_handler+0x66>
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7cb4:	4b19      	ldr	r3, [pc, #100]	; (7d1c <usbd_ep_data_handler+0x84>)
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7cb6:	f000 020f 	and.w	r2, r0, #15
    7cba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7cbe:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    7cc2:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7cc6:	681a      	ldr	r2, [r3, #0]
    if (ret)
    7cc8:	b132      	cbz	r2, 7cd8 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7cca:	2200      	movs	r2, #0
            if (ep != NRFX_USBD_EPIN0)
    7ccc:	2880      	cmp	r0, #128	; 0x80
    7cce:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7cd0:	681b      	ldr	r3, [r3, #0]
    7cd2:	d011      	beq.n	7cf8 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    7cd4:	f7ff ffae 	bl	7c34 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7cd8:	6831      	ldr	r1, [r6, #0]
    7cda:	4029      	ands	r1, r5
    7cdc:	d10a      	bne.n	7cf4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7cde:	2306      	movs	r3, #6
    7ce0:	f88d 4006 	strb.w	r4, [sp, #6]
    7ce4:	f88d 3004 	strb.w	r3, [sp, #4]
    7ce8:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    7cec:	4b0c      	ldr	r3, [pc, #48]	; (7d20 <usbd_ep_data_handler+0x88>)
    7cee:	a801      	add	r0, sp, #4
    7cf0:	681b      	ldr	r3, [r3, #0]
    7cf2:	4798      	blx	r3
}
    7cf4:	b002      	add	sp, #8
    7cf6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    7cf8:	f7ff ffb8 	bl	7c6c <nrf_usbd_ep0in_dma_handler>
    7cfc:	e7ec      	b.n	7cd8 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7cfe:	6833      	ldr	r3, [r6, #0]
    7d00:	421d      	tst	r5, r3
    7d02:	d1f7      	bne.n	7cf4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    7d04:	2306      	movs	r3, #6
    7d06:	f88d 0006 	strb.w	r0, [sp, #6]
    7d0a:	f88d 3004 	strb.w	r3, [sp, #4]
    7d0e:	f88d 2007 	strb.w	r2, [sp, #7]
    7d12:	e7eb      	b.n	7cec <usbd_ep_data_handler+0x54>
    7d14:	2001c1f8 	.word	0x2001c1f8
    7d18:	2001c188 	.word	0x2001c188
    7d1c:	0000e87a 	.word	0x0000e87a
    7d20:	2001c31c 	.word	0x2001c31c

00007d24 <ev_setup_data_handler>:
{
    7d24:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7d26:	4b05      	ldr	r3, [pc, #20]	; (7d3c <ev_setup_data_handler+0x18>)
    7d28:	781a      	ldrb	r2, [r3, #0]
    7d2a:	4610      	mov	r0, r2
    7d2c:	f005 fda3 	bl	d876 <ep2bit>
}
    7d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7d34:	4601      	mov	r1, r0
    7d36:	4610      	mov	r0, r2
    7d38:	f7ff bfae 	b.w	7c98 <usbd_ep_data_handler>
    7d3c:	2005e385 	.word	0x2005e385

00007d40 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7d40:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    7d42:	2200      	movs	r2, #0
    7d44:	4b0d      	ldr	r3, [pc, #52]	; (7d7c <ev_dma_epout8_handler+0x3c>)
    7d46:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7d48:	4b0d      	ldr	r3, [pc, #52]	; (7d80 <ev_dma_epout8_handler+0x40>)
    7d4a:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    7d4e:	2a03      	cmp	r2, #3
    7d50:	d010      	beq.n	7d74 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    7d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    7d56:	b96b      	cbnz	r3, 7d74 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7d58:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    7d5c:	f7ff ff5e 	bl	7c1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7d60:	2306      	movs	r3, #6
    7d62:	f88d 3004 	strb.w	r3, [sp, #4]
    7d66:	2308      	movs	r3, #8
    7d68:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7d6c:	4b05      	ldr	r3, [pc, #20]	; (7d84 <ev_dma_epout8_handler+0x44>)
    7d6e:	a801      	add	r0, sp, #4
    7d70:	681b      	ldr	r3, [r3, #0]
    7d72:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7d74:	b003      	add	sp, #12
    7d76:	f85d fb04 	ldr.w	pc, [sp], #4
    7d7a:	bf00      	nop
    7d7c:	2005e383 	.word	0x2005e383
    7d80:	2001c1fc 	.word	0x2001c1fc
    7d84:	2001c31c 	.word	0x2001c31c

00007d88 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7d88:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    7d8a:	2200      	movs	r2, #0
    7d8c:	4b10      	ldr	r3, [pc, #64]	; (7dd0 <ev_dma_epin8_handler+0x48>)
    7d8e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7d90:	4b10      	ldr	r3, [pc, #64]	; (7dd4 <ev_dma_epin8_handler+0x4c>)
    7d92:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    7d96:	2a03      	cmp	r2, #3
    7d98:	d106      	bne.n	7da8 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7d9a:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7d9e:	b003      	add	sp, #12
    7da0:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7da4:	f7ff bf3a 	b.w	7c1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7da8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    7dac:	b96b      	cbnz	r3, 7dca <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7dae:	f46f 7080 	mvn.w	r0, #256	; 0x100
    7db2:	f7ff ff33 	bl	7c1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7db6:	2306      	movs	r3, #6
    7db8:	f88d 3004 	strb.w	r3, [sp, #4]
    7dbc:	2388      	movs	r3, #136	; 0x88
    7dbe:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7dc2:	4b05      	ldr	r3, [pc, #20]	; (7dd8 <ev_dma_epin8_handler+0x50>)
    7dc4:	a801      	add	r0, sp, #4
    7dc6:	681b      	ldr	r3, [r3, #0]
    7dc8:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7dca:	b003      	add	sp, #12
    7dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    7dd0:	2005e383 	.word	0x2005e383
    7dd4:	2001c1fc 	.word	0x2001c1fc
    7dd8:	2001c31c 	.word	0x2001c31c

00007ddc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    7ddc:	2300      	movs	r3, #0
    7dde:	4a02      	ldr	r2, [pc, #8]	; (7de8 <nrfx_usbd_uninit+0xc>)
    7de0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    7de2:	4a02      	ldr	r2, [pc, #8]	; (7dec <nrfx_usbd_uninit+0x10>)
    7de4:	7013      	strb	r3, [r2, #0]
    return;
}
    7de6:	4770      	bx	lr
    7de8:	2001c31c 	.word	0x2001c31c
    7dec:	2005e384 	.word	0x2005e384

00007df0 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    7df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7df4:	4b13      	ldr	r3, [pc, #76]	; (7e44 <nrfx_usbd_enable+0x54>)
    7df6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7dfa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    7dfe:	2201      	movs	r2, #1
    7e00:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7e04:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    7e08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    7e0c:	0512      	lsls	r2, r2, #20
    7e0e:	d5fb      	bpl.n	7e08 <nrfx_usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    7e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7e14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7e18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    7e1c:	2280      	movs	r2, #128	; 0x80
    7e1e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7e22:	2200      	movs	r2, #0
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7e24:	f240 11ff 	movw	r1, #511	; 0x1ff
    7e28:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    7e2c:	4b06      	ldr	r3, [pc, #24]	; (7e48 <nrfx_usbd_enable+0x58>)
    7e2e:	6019      	str	r1, [r3, #0]
    m_ep_dma_waiting = 0;
    7e30:	4b06      	ldr	r3, [pc, #24]	; (7e4c <nrfx_usbd_enable+0x5c>)
    7e32:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7e34:	4b06      	ldr	r3, [pc, #24]	; (7e50 <nrfx_usbd_enable+0x60>)
    7e36:	701a      	strb	r2, [r3, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7e38:	4b06      	ldr	r3, [pc, #24]	; (7e54 <nrfx_usbd_enable+0x64>)
    7e3a:	701a      	strb	r2, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    7e3c:	2202      	movs	r2, #2
    7e3e:	4b06      	ldr	r3, [pc, #24]	; (7e58 <nrfx_usbd_enable+0x68>)
    7e40:	701a      	strb	r2, [r3, #0]
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    7e42:	4770      	bx	lr
    7e44:	50036000 	.word	0x50036000
    7e48:	2001c1f8 	.word	0x2001c1f8
    7e4c:	2001c188 	.word	0x2001c188
    7e50:	2005e383 	.word	0x2005e383
    7e54:	2005e385 	.word	0x2005e385
    7e58:	2005e384 	.word	0x2005e384

00007e5c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    7e5c:	2200      	movs	r2, #0
    7e5e:	4b0a      	ldr	r3, [pc, #40]	; (7e88 <nrfx_usbd_start+0x2c>)
{
    7e60:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    7e62:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    7e64:	4a09      	ldr	r2, [pc, #36]	; (7e8c <nrfx_usbd_start+0x30>)
    7e66:	4b0a      	ldr	r3, [pc, #40]	; (7e90 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    7e68:	4c0a      	ldr	r4, [pc, #40]	; (7e94 <nrfx_usbd_start+0x38>)
    7e6a:	2800      	cmp	r0, #0
    7e6c:	bf18      	it	ne
    7e6e:	4613      	movne	r3, r2
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    7e70:	2036      	movs	r0, #54	; 0x36
    7e72:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    7e76:	f7fb fe29 	bl	3acc <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    7e7a:	2301      	movs	r3, #1
    7e7c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    7e80:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    7e84:	bd10      	pop	{r4, pc}
    7e86:	bf00      	nop
    7e88:	2005e382 	.word	0x2005e382
    7e8c:	01e01407 	.word	0x01e01407
    7e90:	01c01407 	.word	0x01c01407
    7e94:	50036000 	.word	0x50036000

00007e98 <nrfx_usbd_is_initialized>:
    }
}

bool nrfx_usbd_is_initialized(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
    7e98:	4b02      	ldr	r3, [pc, #8]	; (7ea4 <nrfx_usbd_is_initialized+0xc>)
    7e9a:	7818      	ldrb	r0, [r3, #0]
}
    7e9c:	3800      	subs	r0, #0
    7e9e:	bf18      	it	ne
    7ea0:	2001      	movne	r0, #1
    7ea2:	4770      	bx	lr
    7ea4:	2005e384 	.word	0x2005e384

00007ea8 <nrfx_usbd_is_enabled>:

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    7ea8:	4b03      	ldr	r3, [pc, #12]	; (7eb8 <nrfx_usbd_is_enabled+0x10>)
    7eaa:	7818      	ldrb	r0, [r3, #0]
}
    7eac:	2801      	cmp	r0, #1
    7eae:	bf94      	ite	ls
    7eb0:	2000      	movls	r0, #0
    7eb2:	2001      	movhi	r0, #1
    7eb4:	4770      	bx	lr
    7eb6:	bf00      	nop
    7eb8:	2005e384 	.word	0x2005e384

00007ebc <nrfx_usbd_init>:
{
    7ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    7ec0:	4b1d      	ldr	r3, [pc, #116]	; (7f38 <nrfx_usbd_init+0x7c>)
    7ec2:	781c      	ldrb	r4, [r3, #0]
    7ec4:	2c00      	cmp	r4, #0
    7ec6:	d135      	bne.n	7f34 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    7ec8:	4a1c      	ldr	r2, [pc, #112]	; (7f3c <nrfx_usbd_init+0x80>)
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7eca:	4625      	mov	r5, r4
    m_event_handler = event_handler;
    7ecc:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7ece:	2201      	movs	r2, #1
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7ed0:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7ed4:	4627      	mov	r7, r4
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7ed6:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7ed8:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7edc:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7ee0:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7ee2:	bf14      	ite	ne
    7ee4:	4641      	movne	r1, r8
    7ee6:	2140      	moveq	r1, #64	; 0x40
    7ee8:	4630      	mov	r0, r6
    7eea:	f005 fce5 	bl	d8b8 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7eee:	4630      	mov	r0, r6
    7ef0:	f7ff fdc6 	bl	7a80 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7ef4:	3501      	adds	r5, #1
    7ef6:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    7ef8:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    7efa:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    7efc:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7efe:	d1eb      	bne.n	7ed8 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f00:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    7f02:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f04:	f240 16ff 	movw	r6, #511	; 0x1ff
    7f08:	4620      	mov	r0, r4
    7f0a:	f005 fcd5 	bl	d8b8 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7f0e:	4620      	mov	r0, r4
    7f10:	f7ff fdb6 	bl	7a80 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7f14:	3401      	adds	r4, #1
    7f16:	b2e4      	uxtb	r4, r4
    7f18:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7f1a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    7f1c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    7f1e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7f20:	d102      	bne.n	7f28 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    7f22:	4807      	ldr	r0, [pc, #28]	; (7f40 <nrfx_usbd_init+0x84>)
}
    7f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f28:	f014 0f08 	tst.w	r4, #8
    7f2c:	bf14      	ite	ne
    7f2e:	4631      	movne	r1, r6
    7f30:	2140      	moveq	r1, #64	; 0x40
    7f32:	e7e9      	b.n	7f08 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    7f34:	4803      	ldr	r0, [pc, #12]	; (7f44 <nrfx_usbd_init+0x88>)
    7f36:	e7f5      	b.n	7f24 <nrfx_usbd_init+0x68>
    7f38:	2005e384 	.word	0x2005e384
    7f3c:	2001c31c 	.word	0x2001c31c
    7f40:	0bad0000 	.word	0x0bad0000
    7f44:	0bad0005 	.word	0x0bad0005

00007f48 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    7f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f4c:	4605      	mov	r5, r0
	__asm__ volatile(
    7f4e:	f04f 0320 	mov.w	r3, #32
    7f52:	f3ef 8811 	mrs	r8, BASEPRI
    7f56:	f383 8812 	msr	BASEPRI_MAX, r3
    7f5a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    7f5e:	f010 040f 	ands.w	r4, r0, #15
    7f62:	d103      	bne.n	7f6c <nrfx_usbd_ep_transfer+0x24>
    7f64:	4b27      	ldr	r3, [pc, #156]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	4283      	cmp	r3, r0
    7f6a:	d147      	bne.n	7ffc <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7f6c:	4b26      	ldr	r3, [pc, #152]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    const uint8_t ep_bitpos = ep2bit(ep);
    7f6e:	4628      	mov	r0, r5
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7f70:	681a      	ldr	r2, [r3, #0]
    7f72:	f04f 0901 	mov.w	r9, #1
    7f76:	43d2      	mvns	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    7f78:	f005 fc7d 	bl	d876 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7f7c:	4f23      	ldr	r7, [pc, #140]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f7e:	b292      	uxth	r2, r2
    7f80:	683e      	ldr	r6, [r7, #0]
    7f82:	fa09 f900 	lsl.w	r9, r9, r0
    7f86:	4332      	orrs	r2, r6
    7f88:	ea12 0f09 	tst.w	r2, r9
    7f8c:	d138      	bne.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7f8e:	4628      	mov	r0, r5
    7f90:	f7ff fd76 	bl	7a80 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7f94:	220c      	movs	r2, #12
    7f96:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    7f98:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7f9a:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    7f9c:	d52a      	bpl.n	7ff4 <nrfx_usbd_ep_transfer+0xac>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7f9e:	4a1c      	ldr	r2, [pc, #112]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fa0:	6808      	ldr	r0, [r1, #0]
    7fa2:	4414      	add	r4, r2
    7fa4:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7fa8:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7faa:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7fae:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7fb2:	d11a      	bne.n	7fea <nrfx_usbd_ep_transfer+0xa2>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7fb4:	b9ba      	cbnz	r2, 7fe6 <nrfx_usbd_ep_transfer+0x9e>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    7fb6:	4a17      	ldr	r2, [pc, #92]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    7fb8:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    7fba:	c907      	ldmia	r1, {r0, r1, r2}
    7fbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    7fc0:	2200      	movs	r2, #0
    7fc2:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    7fc4:	739a      	strb	r2, [r3, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fc6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
        p_state->p_context = p_context;
    7fca:	605c      	str	r4, [r3, #4]
    7fcc:	4b12      	ldr	r3, [pc, #72]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7fce:	ea46 0609 	orr.w	r6, r6, r9
        ret = NRFX_SUCCESS;
    7fd2:	4812      	ldr	r0, [pc, #72]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7fd4:	603e      	str	r6, [r7, #0]
    7fd6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    7fda:	f388 8811 	msr	BASEPRI, r8
    7fde:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    7fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    7fe6:	4a0e      	ldr	r2, [pc, #56]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7fe8:	e7e6      	b.n	7fb8 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7fea:	b90a      	cbnz	r2, 7ff0 <nrfx_usbd_ep_transfer+0xa8>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    7fec:	4a0d      	ldr	r2, [pc, #52]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fee:	e7e3      	b.n	7fb8 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    7ff0:	4a0d      	ldr	r2, [pc, #52]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7ff2:	e7e1      	b.n	7fb8 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    7ff4:	4a0d      	ldr	r2, [pc, #52]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    7ff6:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    7ff8:	4a0d      	ldr	r2, [pc, #52]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7ffa:	e7dd      	b.n	7fb8 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    7ffc:	480d      	ldr	r0, [pc, #52]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7ffe:	e7ec      	b.n	7fda <nrfx_usbd_ep_transfer+0x92>
        ret = NRFX_ERROR_BUSY;
    8000:	480d      	ldr	r0, [pc, #52]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    8002:	e7ea      	b.n	7fda <nrfx_usbd_ep_transfer+0x92>
    8004:	2005e385 	.word	0x2005e385
    8008:	2001c1f8 	.word	0x2001c1f8
    800c:	2001c188 	.word	0x2001c188
    8010:	2001c18c 	.word	0x2001c18c
    8014:	0000d82b 	.word	0x0000d82b
    8018:	e000e100 	.word	0xe000e100
    801c:	0bad0000 	.word	0x0bad0000
    8020:	0000d84d 	.word	0x0000d84d
    8024:	00007b65 	.word	0x00007b65
    8028:	00007b9d 	.word	0x00007b9d
    802c:	2001c11c 	.word	0x2001c11c
    8030:	0000d7fd 	.word	0x0000d7fd
    8034:	0bad000a 	.word	0x0bad000a
    8038:	0bad000b 	.word	0x0bad000b

0000803c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    803c:	f010 0f08 	tst.w	r0, #8
    8040:	4b07      	ldr	r3, [pc, #28]	; (8060 <nrfx_usbd_epout_size_get+0x24>)
    8042:	d006      	beq.n	8052 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8044:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    8048:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    804c:	bf18      	it	ne
    804e:	2000      	movne	r0, #0
    8050:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8052:	f000 000f 	and.w	r0, r0, #15
    8056:	f500 7094 	add.w	r0, r0, #296	; 0x128
    805a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    805e:	4770      	bx	lr
    8060:	50036000 	.word	0x50036000

00008064 <usbd_dmareq_process>:
{
    8064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    8068:	f8df 814c 	ldr.w	r8, [pc, #332]	; 81b8 <usbd_dmareq_process+0x154>
{
    806c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    806e:	f898 3000 	ldrb.w	r3, [r8]
    8072:	2b00      	cmp	r3, #0
    8074:	d164      	bne.n	8140 <usbd_dmareq_process+0xdc>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8076:	f8df 9144 	ldr.w	r9, [pc, #324]	; 81bc <usbd_dmareq_process+0x158>
    807a:	4e51      	ldr	r6, [pc, #324]	; (81c0 <usbd_dmareq_process+0x15c>)
    807c:	f8d9 1000 	ldr.w	r1, [r9]
    8080:	6833      	ldr	r3, [r6, #0]
    8082:	4019      	ands	r1, r3
    8084:	d05c      	beq.n	8140 <usbd_dmareq_process+0xdc>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8086:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    808a:	bf14      	ite	ne
    808c:	fa93 f1a3 	rbitne	r1, r3
    8090:	fa91 f1a1 	rbiteq	r1, r1
    8094:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8098:	290f      	cmp	r1, #15
    809a:	bf8a      	itet	hi
    809c:	f1a1 0410 	subhi.w	r4, r1, #16
    80a0:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    80a4:	b2e4      	uxtbhi	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    80a6:	f04f 0b01 	mov.w	fp, #1
            usbd_ep_state_t * p_state = ep_state_access(ep);
    80aa:	4620      	mov	r0, r4
    80ac:	f7ff fce8 	bl	7a80 <ep_state_access>
            if (NRF_USBD_EPIN_CHECK(ep))
    80b0:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    80b4:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    80b8:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    80bc:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    80be:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    80c2:	da40      	bge.n	8146 <usbd_dmareq_process+0xe2>
                continue_transfer = p_state->handler.feeder(
    80c4:	6803      	ldr	r3, [r0, #0]
    80c6:	8982      	ldrh	r2, [r0, #12]
    80c8:	6841      	ldr	r1, [r0, #4]
    80ca:	a802      	add	r0, sp, #8
    80cc:	4798      	blx	r3
                if (!continue_transfer)
    80ce:	b900      	cbnz	r0, 80d2 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    80d0:	6028      	str	r0, [r5, #0]
    m_dma_pending = true;
    80d2:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    80d4:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    80d6:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    80d8:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    80dc:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    80de:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    80e2:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    80e4:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    80e8:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    80ea:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    80ec:	f004 0008 	and.w	r0, r4, #8
    80f0:	9902      	ldr	r1, [sp, #8]
    80f2:	4b34      	ldr	r3, [pc, #208]	; (81c4 <usbd_dmareq_process+0x160>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    80f4:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    80f8:	da4f      	bge.n	819a <usbd_dmareq_process+0x136>
        if (NRF_USBD_EPISO_CHECK(ep))
    80fa:	2800      	cmp	r0, #0
    80fc:	d045      	beq.n	818a <usbd_dmareq_process+0x126>
            p_reg->ISOIN.PTR    = ptr;
    80fe:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    8102:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    8106:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8108:	2201      	movs	r2, #1
    810a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    810e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8112:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8116:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8118:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    811a:	4a2b      	ldr	r2, [pc, #172]	; (81c8 <usbd_dmareq_process+0x164>)
    811c:	4b2b      	ldr	r3, [pc, #172]	; (81cc <usbd_dmareq_process+0x168>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    811e:	4929      	ldr	r1, [pc, #164]	; (81c4 <usbd_dmareq_process+0x160>)
    8120:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    8124:	bf38      	it	cc
    8126:	4613      	movcc	r3, r2
    8128:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    812c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    8130:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8134:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8136:	b91a      	cbnz	r2, 8140 <usbd_dmareq_process+0xdc>
    8138:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    813c:	2a00      	cmp	r2, #0
    813e:	d0f9      	beq.n	8134 <usbd_dmareq_process+0xd0>
}
    8140:	b005      	add	sp, #20
    8142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8146:	4620      	mov	r0, r4
    8148:	f7ff ff78 	bl	803c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    814c:	89aa      	ldrh	r2, [r5, #12]
    814e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8150:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    8152:	6869      	ldr	r1, [r5, #4]
    8154:	f8d5 c000 	ldr.w	ip, [r5]
    8158:	a802      	add	r0, sp, #8
    815a:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    815c:	9a02      	ldr	r2, [sp, #8]
    815e:	2a00      	cmp	r2, #0
    8160:	d0b5      	beq.n	80ce <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    8162:	9a03      	ldr	r2, [sp, #12]
    8164:	4297      	cmp	r7, r2
    8166:	d9b2      	bls.n	80ce <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8168:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    816a:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    816c:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    816e:	f7ff fd55 	bl	7c1c <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8172:	2306      	movs	r3, #6
    8174:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8178:	4b15      	ldr	r3, [pc, #84]	; (81d0 <usbd_dmareq_process+0x16c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    817a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    817e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8180:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8184:	a801      	add	r0, sp, #4
    8186:	4798      	blx	r3
                    continue;
    8188:	e778      	b.n	807c <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    818a:	2014      	movs	r0, #20
    818c:	fb00 3304 	mla	r3, r0, r4, r3
    8190:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8194:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    8198:	e7b5      	b.n	8106 <usbd_dmareq_process+0xa2>
        if (NRF_USBD_EPISO_CHECK(ep))
    819a:	b128      	cbz	r0, 81a8 <usbd_dmareq_process+0x144>
            p_reg->ISOOUT.PTR    = ptr;
    819c:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    81a0:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    81a4:	2328      	movs	r3, #40	; 0x28
    81a6:	e7af      	b.n	8108 <usbd_dmareq_process+0xa4>
            p_reg->EPOUT[epnr].PTR    = ptr;
    81a8:	2014      	movs	r0, #20
    81aa:	fb00 3304 	mla	r3, r0, r4, r3
    81ae:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    81b2:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    81b6:	e7f5      	b.n	81a4 <usbd_dmareq_process+0x140>
    81b8:	2005e383 	.word	0x2005e383
    81bc:	2001c188 	.word	0x2001c188
    81c0:	2001c1f8 	.word	0x2001c1f8
    81c4:	50036000 	.word	0x50036000
    81c8:	0000e88c 	.word	0x0000e88c
    81cc:	0000e87a 	.word	0x0000e87a
    81d0:	2001c31c 	.word	0x2001c31c

000081d4 <ev_epdata_handler>:
{
    81d4:	b538      	push	{r3, r4, r5, lr}
        dataepstatus &= ~(1UL << bitpos);
    81d6:	2501      	movs	r5, #1
    return p_reg->EPDATASTATUS;
    81d8:	4b0e      	ldr	r3, [pc, #56]	; (8214 <ev_epdata_handler+0x40>)
    81da:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    81de:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    while (dataepstatus)
    81e2:	b91c      	cbnz	r4, 81ec <ev_epdata_handler+0x18>
}
    81e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    81e8:	f7ff bf3c 	b.w	8064 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    81ec:	fa94 f3a4 	rbit	r3, r4
    81f0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    81f4:	2b0f      	cmp	r3, #15
    81f6:	bfc8      	it	gt
    81f8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    81fc:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    81fe:	bfd4      	ite	le
    8200:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    8204:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    8206:	fa05 f303 	lsl.w	r3, r5, r3
    820a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    820e:	f7ff fd43 	bl	7c98 <usbd_ep_data_handler>
    8212:	e7e6      	b.n	81e2 <ev_epdata_handler+0xe>
    8214:	50036000 	.word	0x50036000

00008218 <nrf_usbd_epout_dma_handler>:
{
    8218:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    821a:	2200      	movs	r2, #0
    821c:	4b16      	ldr	r3, [pc, #88]	; (8278 <nrf_usbd_epout_dma_handler+0x60>)
{
    821e:	4604      	mov	r4, r0
    m_dma_pending = false;
    8220:	701a      	strb	r2, [r3, #0]
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8222:	f7ff fc2d 	bl	7a80 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8226:	7b83      	ldrb	r3, [r0, #14]
    8228:	2b03      	cmp	r3, #3
    822a:	d10d      	bne.n	8248 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    822c:	4620      	mov	r0, r4
    822e:	f005 fb22 	bl	d876 <ep2bit>
    8232:	2301      	movs	r3, #1
    8234:	fa03 f000 	lsl.w	r0, r3, r0
    8238:	43c0      	mvns	r0, r0
    823a:	f7ff fcef 	bl	7c1c <atomic_and.constprop.0.isra.0>
}
    823e:	b003      	add	sp, #12
    8240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    8244:	f7ff bf0e 	b.w	8064 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8248:	6805      	ldr	r5, [r0, #0]
    824a:	2d00      	cmp	r5, #0
    824c:	d1f7      	bne.n	823e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    824e:	4620      	mov	r0, r4
    8250:	f005 fb11 	bl	d876 <ep2bit>
    8254:	2301      	movs	r3, #1
    8256:	fa03 f000 	lsl.w	r0, r3, r0
    825a:	43c0      	mvns	r0, r0
    825c:	f7ff fcde 	bl	7c1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8260:	2306      	movs	r3, #6
    8262:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8266:	4b05      	ldr	r3, [pc, #20]	; (827c <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8268:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    826c:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    826e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    8272:	a801      	add	r0, sp, #4
    8274:	4798      	blx	r3
    8276:	e7e2      	b.n	823e <nrf_usbd_epout_dma_handler+0x26>
    8278:	2005e383 	.word	0x2005e383
    827c:	2001c31c 	.word	0x2001c31c

00008280 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    8280:	4b02      	ldr	r3, [pc, #8]	; (828c <nrfx_usbd_ep_stall+0xc>)
    8282:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8286:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    828a:	4770      	bx	lr
    828c:	50036000 	.word	0x50036000

00008290 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8290:	0702      	lsls	r2, r0, #28
    8292:	d413      	bmi.n	82bc <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8294:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8298:	f010 0f80 	tst.w	r0, #128	; 0x80
    829c:	4a08      	ldr	r2, [pc, #32]	; (82c0 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    829e:	bf0b      	itete	eq
    82a0:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    82a4:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    82a8:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    82ac:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    82b0:	bf08      	it	eq
    82b2:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    82b4:	1e43      	subs	r3, r0, #1
    82b6:	4258      	negs	r0, r3
    82b8:	4158      	adcs	r0, r3
    82ba:	4770      	bx	lr
        return false;
    82bc:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    82be:	4770      	bx	lr
    82c0:	50036000 	.word	0x50036000

000082c4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    82c4:	4b04      	ldr	r3, [pc, #16]	; (82d8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    82c6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    82ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    82ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    82d2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    82d6:	4770      	bx	lr
    82d8:	50036000 	.word	0x50036000

000082dc <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    82dc:	b510      	push	{r4, lr}
    82de:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    82e0:	2208      	movs	r2, #8
    82e2:	2100      	movs	r1, #0
    82e4:	f003 f91c 	bl	b520 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    82e8:	4b0e      	ldr	r3, [pc, #56]	; (8324 <nrfx_usbd_setup_get+0x48>)
    82ea:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    82ee:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    82f0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    82f4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    82f6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    82fa:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    82fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    8302:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    8304:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    8308:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    830c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    8310:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    8312:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    8316:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    831a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    831e:	80e3      	strh	r3, [r4, #6]
}
    8320:	bd10      	pop	{r4, pc}
    8322:	bf00      	nop
    8324:	50036000 	.word	0x50036000

00008328 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8328:	2201      	movs	r2, #1
    832a:	4b02      	ldr	r3, [pc, #8]	; (8334 <nrfx_usbd_setup_data_clear+0xc>)
    832c:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    832e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    8330:	4770      	bx	lr
    8332:	bf00      	nop
    8334:	50036000 	.word	0x50036000

00008338 <ev_dma_epout0_handler>:
    m_dma_pending = false;
    8338:	2200      	movs	r2, #0
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    833a:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    833c:	4b11      	ldr	r3, [pc, #68]	; (8384 <ev_dma_epout0_handler+0x4c>)
    833e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8340:	4b11      	ldr	r3, [pc, #68]	; (8388 <ev_dma_epout0_handler+0x50>)
    8342:	7b9a      	ldrb	r2, [r3, #14]
    8344:	2a03      	cmp	r2, #3
    8346:	d106      	bne.n	8356 <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8348:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    834c:	b002      	add	sp, #8
    834e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8352:	f7ff bc63 	b.w	7c1c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    8356:	681c      	ldr	r4, [r3, #0]
    8358:	b974      	cbnz	r4, 8378 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    835a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    835e:	f7ff fc5d 	bl	7c1c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8362:	2306      	movs	r3, #6
    8364:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8368:	4b08      	ldr	r3, [pc, #32]	; (838c <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    836a:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    836e:	681b      	ldr	r3, [r3, #0]
    8370:	a801      	add	r0, sp, #4
    8372:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8374:	b002      	add	sp, #8
    8376:	bd10      	pop	{r4, pc}
    8378:	b002      	add	sp, #8
    837a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    837e:	f7ff bfd3 	b.w	8328 <nrfx_usbd_setup_data_clear>
    8382:	bf00      	nop
    8384:	2005e383 	.word	0x2005e383
    8388:	2001c1fc 	.word	0x2001c1fc
    838c:	2001c31c 	.word	0x2001c31c

00008390 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8390:	2201      	movs	r2, #1
    8392:	4b02      	ldr	r3, [pc, #8]	; (839c <nrfx_usbd_setup_clear+0xc>)
    8394:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8396:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8398:	4770      	bx	lr
    839a:	bf00      	nop
    839c:	50036000 	.word	0x50036000

000083a0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    83a0:	2201      	movs	r2, #1
    83a2:	4b02      	ldr	r3, [pc, #8]	; (83ac <nrfx_usbd_setup_stall+0xc>)
    83a4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    83a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    83a8:	4770      	bx	lr
    83aa:	bf00      	nop
    83ac:	50036000 	.word	0x50036000

000083b0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    83b0:	4b01      	ldr	r3, [pc, #4]	; (83b8 <nrfx_usbd_last_setup_dir_get+0x8>)
    83b2:	7818      	ldrb	r0, [r3, #0]
    83b4:	4770      	bx	lr
    83b6:	bf00      	nop
    83b8:	2005e385 	.word	0x2005e385

000083bc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    83bc:	4602      	mov	r2, r0
    83be:	b510      	push	{r4, lr}
	__asm__ volatile(
    83c0:	f04f 0320 	mov.w	r3, #32
    83c4:	f3ef 8411 	mrs	r4, BASEPRI
    83c8:	f383 8812 	msr	BASEPRI_MAX, r3
    83cc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    83d0:	f005 fa51 	bl	d876 <ep2bit>
    83d4:	2301      	movs	r3, #1
    83d6:	490d      	ldr	r1, [pc, #52]	; (840c <nrfx_usbd_transfer_out_drop+0x50>)
    83d8:	fa03 f000 	lsl.w	r0, r3, r0
    83dc:	680b      	ldr	r3, [r1, #0]
    83de:	ea23 0300 	bic.w	r3, r3, r0
    83e2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    83e4:	f012 0108 	ands.w	r1, r2, #8
    83e8:	d10a      	bne.n	8400 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    83ea:	f002 030f 	and.w	r3, r2, #15
    83ee:	009b      	lsls	r3, r3, #2
    83f0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    83f4:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
    83f8:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    83fc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    8400:	f384 8811 	msr	BASEPRI, r4
    8404:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8408:	bd10      	pop	{r4, pc}
    840a:	bf00      	nop
    840c:	2001c1f8 	.word	0x2001c1f8

00008410 <usbd_ep_abort>:
{
    8410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8412:	4601      	mov	r1, r0
	__asm__ volatile(
    8414:	f04f 0320 	mov.w	r3, #32
    8418:	f3ef 8511 	mrs	r5, BASEPRI
    841c:	f383 8812 	msr	BASEPRI_MAX, r3
    8420:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8424:	f7ff fb2c 	bl	7a80 <ep_state_access>
    8428:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    842a:	4608      	mov	r0, r1
    842c:	f005 fa23 	bl	d876 <ep2bit>
    8430:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    8432:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8436:	fa02 f200 	lsl.w	r2, r2, r0
    843a:	482e      	ldr	r0, [pc, #184]	; (84f4 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    843c:	d118      	bne.n	8470 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    843e:	6803      	ldr	r3, [r0, #0]
    8440:	ea32 0403 	bics.w	r4, r2, r3
    8444:	d00a      	beq.n	845c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    8446:	4608      	mov	r0, r1
    8448:	f7ff ffb8 	bl	83bc <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    844c:	2303      	movs	r3, #3
    844e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    8450:	f385 8811 	msr	BASEPRI, r5
    8454:	f3bf 8f6f 	isb	sy
}
    8458:	b003      	add	sp, #12
    845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    845c:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    8460:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8462:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8464:	4b24      	ldr	r3, [pc, #144]	; (84f8 <usbd_ep_abort+0xe8>)
    8466:	6818      	ldr	r0, [r3, #0]
    8468:	ea20 0002 	bic.w	r0, r0, r2
    846c:	6018      	str	r0, [r3, #0]
    846e:	e7ed      	b.n	844c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    8470:	070b      	lsls	r3, r1, #28
    8472:	d415      	bmi.n	84a0 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    8474:	2980      	cmp	r1, #128	; 0x80
    8476:	4b21      	ldr	r3, [pc, #132]	; (84fc <usbd_ep_abort+0xec>)
    8478:	d02f      	beq.n	84da <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    847a:	f001 040f 	and.w	r4, r1, #15
    847e:	f204 34da 	addw	r4, r4, #986	; 0x3da
    8482:	0064      	lsls	r4, r4, #1
    8484:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8488:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    848c:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8490:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8492:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8496:	433c      	orrs	r4, r7
    8498:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    849c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    84a0:	4f15      	ldr	r7, [pc, #84]	; (84f8 <usbd_ep_abort+0xe8>)
    84a2:	6804      	ldr	r4, [r0, #0]
    84a4:	683b      	ldr	r3, [r7, #0]
    84a6:	ea64 0c03 	orn	ip, r4, r3
    84aa:	ea1c 0f02 	tst.w	ip, r2
    84ae:	d0cf      	beq.n	8450 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    84b0:	4313      	orrs	r3, r2
    84b2:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    84b4:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    84b6:	ea24 0402 	bic.w	r4, r4, r2
    84ba:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    84bc:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    84be:	2303      	movs	r3, #3
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    84c0:	2206      	movs	r2, #6
            p_state->status = NRFX_USBD_EP_ABORTED;
    84c2:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    84c4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    84c8:	4b0d      	ldr	r3, [pc, #52]	; (8500 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    84ca:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    84ce:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    84d0:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
    84d4:	a801      	add	r0, sp, #4
    84d6:	4798      	blx	r3
    84d8:	e7ba      	b.n	8450 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    84da:	f240 74b4 	movw	r4, #1972	; 0x7b4
    84de:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    84e2:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    84e6:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    84ea:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    84ec:	f044 0404 	orr.w	r4, r4, #4
    84f0:	e7d1      	b.n	8496 <usbd_ep_abort+0x86>
    84f2:	bf00      	nop
    84f4:	2001c188 	.word	0x2001c188
    84f8:	2001c1f8 	.word	0x2001c1f8
    84fc:	50036000 	.word	0x50036000
    8500:	2001c31c 	.word	0x2001c31c

00008504 <ev_setup_handler>:
{
    8504:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8506:	4b17      	ldr	r3, [pc, #92]	; (8564 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8508:	4c17      	ldr	r4, [pc, #92]	; (8568 <ev_setup_handler+0x64>)
    850a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    850e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8510:	4e16      	ldr	r6, [pc, #88]	; (856c <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8512:	43da      	mvns	r2, r3
    8514:	4b16      	ldr	r3, [pc, #88]	; (8570 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    8516:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8518:	681b      	ldr	r3, [r3, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    851a:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    851c:	b292      	uxth	r2, r2
    851e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    8520:	f005 f9a9 	bl	d876 <ep2bit>
    8524:	2301      	movs	r3, #1
    8526:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8528:	4213      	tst	r3, r2
    852a:	d002      	beq.n	8532 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    852c:	4608      	mov	r0, r1
    852e:	f7ff ff6f 	bl	8410 <usbd_ep_abort>
    (void)(NRFX_ATOMIC_FETCH_AND(
    8532:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    8536:	f005 0580 	and.w	r5, r5, #128	; 0x80
    m_last_setup_dir =
    853a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    853c:	f7ff fb6e 	bl	7c1c <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8540:	6823      	ldr	r3, [r4, #0]
    m_event_handler(&evt);
    8542:	a801      	add	r0, sp, #4
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    8544:	f043 0301 	orr.w	r3, r3, #1
    8548:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    854a:	2300      	movs	r3, #0
    854c:	f8ad 3005 	strh.w	r3, [sp, #5]
    8550:	f88d 3007 	strb.w	r3, [sp, #7]
    8554:	2305      	movs	r3, #5
    8556:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    855a:	4b06      	ldr	r3, [pc, #24]	; (8574 <ev_setup_handler+0x70>)
    855c:	681b      	ldr	r3, [r3, #0]
    855e:	4798      	blx	r3
}
    8560:	b002      	add	sp, #8
    8562:	bd70      	pop	{r4, r5, r6, pc}
    8564:	50036000 	.word	0x50036000
    8568:	2001c1f8 	.word	0x2001c1f8
    856c:	2005e385 	.word	0x2005e385
    8570:	2001c188 	.word	0x2001c188
    8574:	2001c31c 	.word	0x2001c31c

00008578 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    8578:	4b1b      	ldr	r3, [pc, #108]	; (85e8 <nrfx_usbd_irq_handler+0x70>)
{
    857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    857e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    8582:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    8584:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8586:	461d      	mov	r5, r3
    while (to_process)
    8588:	b970      	cbnz	r0, 85a8 <nrfx_usbd_irq_handler+0x30>
        active &= ~(1UL << event_nr);
    858a:	f04f 0801 	mov.w	r8, #1
        m_isr[event_nr]();
    858e:	4f17      	ldr	r7, [pc, #92]	; (85ec <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8590:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    8594:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
    while (active)
    8598:	b9bc      	cbnz	r4, 85ca <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    859a:	f7ff fd63 	bl	8064 <usbd_dmareq_process>
    if (setup_active)
    859e:	b306      	cbz	r6, 85e2 <nrfx_usbd_irq_handler+0x6a>
}
    85a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    85a4:	f7ff bfae 	b.w	8504 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    85a8:	fa90 f2a0 	rbit	r2, r0
    85ac:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    85b0:	490f      	ldr	r1, [pc, #60]	; (85f0 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    85b2:	0096      	lsls	r6, r2, #2
    85b4:	4431      	add	r1, r6
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    85b6:	680e      	ldr	r6, [r1, #0]
            active |= 1UL << event_nr;
    85b8:	fa04 f202 	lsl.w	r2, r4, r2
    if (ret)
    85bc:	b116      	cbz	r6, 85c4 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    85be:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    85c0:	6809      	ldr	r1, [r1, #0]
    85c2:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    85c4:	ea20 0002 	bic.w	r0, r0, r2
    85c8:	e7de      	b.n	8588 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    85ca:	fa94 f5a4 	rbit	r5, r4
    85ce:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    85d2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    85d6:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    85da:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    85dc:	ea24 0405 	bic.w	r4, r4, r5
    85e0:	e7da      	b.n	8598 <nrfx_usbd_irq_handler+0x20>
}
    85e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85e6:	bf00      	nop
    85e8:	50036000 	.word	0x50036000
    85ec:	0000e74c 	.word	0x0000e74c
    85f0:	50036100 	.word	0x50036100

000085f4 <usbd_ep_abort_all>:
{
    85f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        ep_waiting &= ~(1U << bitpos);
    85f6:	2701      	movs	r7, #1
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    85f8:	4e10      	ldr	r6, [pc, #64]	; (863c <usbd_ep_abort_all+0x48>)
    85fa:	4b11      	ldr	r3, [pc, #68]	; (8640 <usbd_ep_abort_all+0x4c>)
    85fc:	6834      	ldr	r4, [r6, #0]
    85fe:	681b      	ldr	r3, [r3, #0]
    8600:	0c24      	lsrs	r4, r4, #16
    8602:	0424      	lsls	r4, r4, #16
    8604:	431c      	orrs	r4, r3
    while (0 != ep_waiting)
    8606:	b91c      	cbnz	r4, 8610 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8608:	f240 13ff 	movw	r3, #511	; 0x1ff
    860c:	6033      	str	r3, [r6, #0]
}
    860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8610:	fa94 f5a4 	rbit	r5, r4
    8614:	fab5 f585 	clz	r5, r5
    8618:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    861a:	2d0f      	cmp	r5, #15
    861c:	bfc6      	itte	gt
    861e:	f1a5 0010 	subgt.w	r0, r5, #16
    8622:	b2c0      	uxtbgt	r0, r0
    8624:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8628:	0703      	lsls	r3, r0, #28
    862a:	d401      	bmi.n	8630 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    862c:	f7ff fef0 	bl	8410 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    8630:	fa07 f505 	lsl.w	r5, r7, r5
    8634:	ea24 0405 	bic.w	r4, r4, r5
    8638:	e7e5      	b.n	8606 <usbd_ep_abort_all+0x12>
    863a:	bf00      	nop
    863c:	2001c1f8 	.word	0x2001c1f8
    8640:	2001c188 	.word	0x2001c188

00008644 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8644:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8648:	4b0b      	ldr	r3, [pc, #44]	; (8678 <nrfx_usbd_stop+0x34>)
{
    864a:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    864c:	2036      	movs	r0, #54	; 0x36
    864e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    8652:	f7fb fa5f 	bl	3b14 <arch_irq_is_enabled>
    8656:	b170      	cbz	r0, 8676 <nrfx_usbd_stop+0x32>
        usbd_ep_abort_all();
    8658:	f7ff ffcc 	bl	85f4 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    865c:	2300      	movs	r3, #0
    865e:	4c07      	ldr	r4, [pc, #28]	; (867c <nrfx_usbd_stop+0x38>)
        NRFX_IRQ_DISABLE(USBD_IRQn);
    8660:	2036      	movs	r0, #54	; 0x36
    8662:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8666:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    866a:	f7fb fa3f 	bl	3aec <arch_irq_disable>
    p_reg->INTENCLR = mask;
    866e:	f04f 33ff 	mov.w	r3, #4294967295
    8672:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    8676:	bd10      	pop	{r4, pc}
    8678:	e000e100 	.word	0xe000e100
    867c:	50036000 	.word	0x50036000

00008680 <nrfx_usbd_disable>:
{
    8680:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    8682:	f7ff ffdf 	bl	8644 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    8686:	4b08      	ldr	r3, [pc, #32]	; (86a8 <nrfx_usbd_disable+0x28>)
    8688:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    868c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8690:	2200      	movs	r2, #0
    8692:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8696:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    869a:	4b04      	ldr	r3, [pc, #16]	; (86ac <nrfx_usbd_disable+0x2c>)
    869c:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    869e:	2201      	movs	r2, #1
    86a0:	4b03      	ldr	r3, [pc, #12]	; (86b0 <nrfx_usbd_disable+0x30>)
    86a2:	701a      	strb	r2, [r3, #0]
}
    86a4:	bd08      	pop	{r3, pc}
    86a6:	bf00      	nop
    86a8:	50036000 	.word	0x50036000
    86ac:	2005e383 	.word	0x2005e383
    86b0:	2005e384 	.word	0x2005e384

000086b4 <nrfx_usbd_suspend>:
{
    86b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    86b6:	f04f 0320 	mov.w	r3, #32
    86ba:	f3ef 8511 	mrs	r5, BASEPRI
    86be:	f383 8812 	msr	BASEPRI_MAX, r3
    86c2:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    86c6:	4b11      	ldr	r3, [pc, #68]	; (870c <nrfx_usbd_suspend+0x58>)
    86c8:	781b      	ldrb	r3, [r3, #0]
    86ca:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    86ce:	b933      	cbnz	r3, 86de <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    86d0:	2400      	movs	r4, #0
	__asm__ volatile(
    86d2:	f385 8811 	msr	BASEPRI, r5
    86d6:	f3bf 8f6f 	isb	sy
}
    86da:	4620      	mov	r0, r4
    86dc:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    86de:	f7ff ff89 	bl	85f4 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    86e2:	4b0b      	ldr	r3, [pc, #44]	; (8710 <nrfx_usbd_suspend+0x5c>)
    86e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    86e8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    86ec:	d1f0      	bne.n	86d0 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    86ee:	2101      	movs	r1, #1
    86f0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    86f4:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    86f8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    86fc:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    86fe:	bf42      	ittt	mi
    8700:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    bool suspended = false;
    8704:	4614      	movmi	r4, r2
    (void) p_reg->LOWPOWER;
    8706:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
}
    870a:	e7e2      	b.n	86d2 <nrfx_usbd_suspend+0x1e>
    870c:	2005e382 	.word	0x2005e382
    8710:	50036000 	.word	0x50036000

00008714 <nrfx_usbd_ep_disable>:
{
    8714:	b510      	push	{r4, lr}
    8716:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8718:	f7ff fe7a 	bl	8410 <usbd_ep_abort>
        p_reg->EPINEN &= ~(1UL << epnr);
    871c:	2301      	movs	r3, #1
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    871e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    8722:	4083      	lsls	r3, r0
    8724:	43db      	mvns	r3, r3
    8726:	4a0c      	ldr	r2, [pc, #48]	; (8758 <nrfx_usbd_ep_disable+0x44>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8728:	f014 0f80 	tst.w	r4, #128	; 0x80
        p_reg->EPINEN &= ~(1UL << epnr);
    872c:	bf15      	itete	ne
    872e:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8732:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    8736:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8738:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    873a:	bf15      	itete	ne
    873c:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8740:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8744:	4b05      	ldrne	r3, [pc, #20]	; (875c <nrfx_usbd_ep_disable+0x48>)
    8746:	4b06      	ldreq	r3, [pc, #24]	; (8760 <nrfx_usbd_ep_disable+0x4c>)
    8748:	5c1a      	ldrb	r2, [r3, r0]
    874a:	2301      	movs	r3, #1
    874c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    874e:	4a02      	ldr	r2, [pc, #8]	; (8758 <nrfx_usbd_ep_disable+0x44>)
    8750:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8754:	bd10      	pop	{r4, pc}
    8756:	bf00      	nop
    8758:	50036000 	.word	0x50036000
    875c:	0000ec02 	.word	0x0000ec02
    8760:	0000ec0b 	.word	0x0000ec0b

00008764 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8764:	b243      	sxtb	r3, r0
    8766:	2b00      	cmp	r3, #0
    8768:	4b23      	ldr	r3, [pc, #140]	; (87f8 <nrfx_usbd_ep_enable+0x94>)
    876a:	4a24      	ldr	r2, [pc, #144]	; (87fc <nrfx_usbd_ep_enable+0x98>)
    876c:	bfa8      	it	ge
    876e:	461a      	movge	r2, r3
{
    8770:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8772:	f04f 0401 	mov.w	r4, #1
    8776:	f000 030f 	and.w	r3, r0, #15
    877a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    877c:	4a20      	ldr	r2, [pc, #128]	; (8800 <nrfx_usbd_ep_enable+0x9c>)
    877e:	fa04 f101 	lsl.w	r1, r4, r1
{
    8782:	4605      	mov	r5, r0
    8784:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    8788:	da0c      	bge.n	87a4 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    878a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    878e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8790:	07c8      	lsls	r0, r1, #31
    8792:	d406      	bmi.n	87a2 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    8794:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8798:	fa04 f303 	lsl.w	r3, r4, r3
    879c:	4303      	orrs	r3, r0
    879e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    87a2:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    87a4:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    87a8:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    87aa:	07c9      	lsls	r1, r1, #31
    87ac:	d4f9      	bmi.n	87a2 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    87ae:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    87b2:	fa04 f103 	lsl.w	r1, r4, r3
    87b6:	4331      	orrs	r1, r6
    87b8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    87bc:	2b00      	cmp	r3, #0
    87be:	d0f0      	beq.n	87a2 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    87c0:	0703      	lsls	r3, r0, #28
    87c2:	d4ee      	bmi.n	87a2 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    87c4:	f04f 0320 	mov.w	r3, #32
    87c8:	f3ef 8611 	mrs	r6, BASEPRI
    87cc:	f383 8812 	msr	BASEPRI_MAX, r3
    87d0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    87d4:	f7ff fdf2 	bl	83bc <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    87d8:	4628      	mov	r0, r5
    87da:	f005 f84c 	bl	d876 <ep2bit>
    87de:	4a09      	ldr	r2, [pc, #36]	; (8804 <nrfx_usbd_ep_enable+0xa0>)
    87e0:	fa04 f000 	lsl.w	r0, r4, r0
    87e4:	6813      	ldr	r3, [r2, #0]
    87e6:	ea23 0000 	bic.w	r0, r3, r0
    87ea:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    87ec:	f386 8811 	msr	BASEPRI, r6
    87f0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    87f4:	e7d5      	b.n	87a2 <nrfx_usbd_ep_enable+0x3e>
    87f6:	bf00      	nop
    87f8:	0000ec0b 	.word	0x0000ec0b
    87fc:	0000ec02 	.word	0x0000ec02
    8800:	50036000 	.word	0x50036000
    8804:	2001c188 	.word	0x2001c188

00008808 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8808:	0603      	lsls	r3, r0, #24
{
    880a:	b510      	push	{r4, lr}
    880c:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    880e:	d405      	bmi.n	881c <nrfx_usbd_ep_stall_clear+0x14>
    8810:	f7ff fd3e 	bl	8290 <nrfx_usbd_ep_stall_check>
    8814:	b110      	cbz	r0, 881c <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    8816:	4620      	mov	r0, r4
    8818:	f7ff fdd0 	bl	83bc <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    881c:	4b01      	ldr	r3, [pc, #4]	; (8824 <nrfx_usbd_ep_stall_clear+0x1c>)
    881e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8822:	bd10      	pop	{r4, pc}
    8824:	50036000 	.word	0x50036000

00008828 <nrfx_usbreg_enable>:
    p_reg->INTENSET = mask;
    8828:	2207      	movs	r2, #7
    882a:	4b02      	ldr	r3, [pc, #8]	; (8834 <nrfx_usbreg_enable+0xc>)
    882c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
void nrfx_usbreg_enable(void)
{
    nrf_usbreg_int_enable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                            NRF_USBREG_INT_USBREMOVED  |
                                            NRF_USBREG_INT_USBPWRRDY);
}
    8830:	4770      	bx	lr
    8832:	bf00      	nop
    8834:	50037000 	.word	0x50037000

00008838 <nrfx_usbreg_disable>:
    p_reg->INTENCLR = mask;
    8838:	2207      	movs	r2, #7
    883a:	4b02      	ldr	r3, [pc, #8]	; (8844 <nrfx_usbreg_disable+0xc>)
    883c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
void nrfx_usbreg_disable(void)
{
    nrf_usbreg_int_disable(NRF_USBREGULATOR, NRF_USBREG_INT_USBDETECTED |
                                             NRF_USBREG_INT_USBREMOVED  |
                                             NRF_USBREG_INT_USBPWRRDY);
}
    8840:	4770      	bx	lr
    8842:	bf00      	nop
    8844:	50037000 	.word	0x50037000

00008848 <nrfx_usbreg_uninit>:
    8848:	2207      	movs	r2, #7

void nrfx_usbreg_uninit(void)
{
    884a:	b508      	push	{r3, lr}
    884c:	4b04      	ldr	r3, [pc, #16]	; (8860 <nrfx_usbreg_uninit+0x18>)
    nrfx_usbreg_disable();
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    884e:	2037      	movs	r0, #55	; 0x37
    8850:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8854:	f7fb f94a 	bl	3aec <arch_irq_disable>
    m_usbevt_handler = NULL;
    8858:	2200      	movs	r2, #0
    885a:	4b02      	ldr	r3, [pc, #8]	; (8864 <nrfx_usbreg_uninit+0x1c>)
    885c:	601a      	str	r2, [r3, #0]
}
    885e:	bd08      	pop	{r3, pc}
    8860:	50037000 	.word	0x50037000
    8864:	2001c360 	.word	0x2001c360

00008868 <nrfx_usbreg_init>:
{
    8868:	b510      	push	{r4, lr}
    886a:	4604      	mov	r4, r0
    nrfx_usbreg_uninit();
    886c:	f7ff ffec 	bl	8848 <nrfx_usbreg_uninit>
    m_usbevt_handler = p_config->handler;
    8870:	6822      	ldr	r2, [r4, #0]
    8872:	4b07      	ldr	r3, [pc, #28]	; (8890 <nrfx_usbreg_init+0x28>)
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    8874:	2037      	movs	r0, #55	; 0x37
}
    8876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m_usbevt_handler = p_config->handler;
    887a:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    887c:	2200      	movs	r2, #0
    887e:	4b05      	ldr	r3, [pc, #20]	; (8894 <nrfx_usbreg_init+0x2c>)
    8880:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8884:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8888:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_USBREGULATOR));
    888c:	f7fb b91e 	b.w	3acc <arch_irq_enable>
    8890:	2001c360 	.word	0x2001c360
    8894:	50037000 	.word	0x50037000

00008898 <nrfx_usbreg_irq_handler>:

void nrfx_usbreg_irq_handler(void)
{
    8898:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    889a:	4c11      	ldr	r4, [pc, #68]	; (88e0 <nrfx_usbreg_irq_handler+0x48>)
    889c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED))
    88a0:	b12b      	cbz	r3, 88ae <nrfx_usbreg_irq_handler+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88a2:	2000      	movs	r0, #0
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBDETECTED);
        m_usbevt_handler(NRFX_USBREG_EVT_DETECTED);
    88a4:	4b0f      	ldr	r3, [pc, #60]	; (88e4 <nrfx_usbreg_irq_handler+0x4c>)
    88a6:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    88aa:	681b      	ldr	r3, [r3, #0]
    88ac:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED))
    88b2:	b133      	cbz	r3, 88c2 <nrfx_usbreg_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88b4:	2300      	movs	r3, #0
    88b6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBREMOVED);
        m_usbevt_handler(NRFX_USBREG_EVT_REMOVED);
    88ba:	4b0a      	ldr	r3, [pc, #40]	; (88e4 <nrfx_usbreg_irq_handler+0x4c>)
    88bc:	2001      	movs	r0, #1
    88be:	681b      	ldr	r3, [r3, #0]
    88c0:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88c2:	4b07      	ldr	r3, [pc, #28]	; (88e0 <nrfx_usbreg_irq_handler+0x48>)
    88c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    }
    if (nrf_usbreg_event_check(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY))
    88c8:	b142      	cbz	r2, 88dc <nrfx_usbreg_irq_handler+0x44>
    {
        nrf_usbreg_event_clear(NRF_USBREGULATOR, NRF_USBREG_EVENT_USBPWRRDY);
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    }
}
    88ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88ce:	2200      	movs	r2, #0
    88d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        m_usbevt_handler(NRFX_USBREG_EVT_READY);
    88d4:	4b03      	ldr	r3, [pc, #12]	; (88e4 <nrfx_usbreg_irq_handler+0x4c>)
    88d6:	2002      	movs	r0, #2
    88d8:	681b      	ldr	r3, [r3, #0]
    88da:	4718      	bx	r3
}
    88dc:	bd10      	pop	{r4, pc}
    88de:	bf00      	nop
    88e0:	50037000 	.word	0x50037000
    88e4:	2001c360 	.word	0x2001c360

000088e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    88e8:	4b0e      	ldr	r3, [pc, #56]	; (8924 <z_sys_init_run_level+0x3c>)
{
    88ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    88ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    88f0:	3001      	adds	r0, #1
    88f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    88f6:	42a6      	cmp	r6, r4
    88f8:	d800      	bhi.n	88fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    88fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    88fc:	e9d4 3500 	ldrd	r3, r5, [r4]
    8900:	4628      	mov	r0, r5
    8902:	4798      	blx	r3
		if (dev != NULL) {
    8904:	b165      	cbz	r5, 8920 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    8906:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    8908:	b130      	cbz	r0, 8918 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    890a:	2800      	cmp	r0, #0
    890c:	bfb8      	it	lt
    890e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    8910:	28ff      	cmp	r0, #255	; 0xff
    8912:	bfa8      	it	ge
    8914:	20ff      	movge	r0, #255	; 0xff
    8916:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    8918:	785a      	ldrb	r2, [r3, #1]
    891a:	f042 0201 	orr.w	r2, r2, #1
    891e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8920:	3408      	adds	r4, #8
    8922:	e7e8      	b.n	88f6 <z_sys_init_run_level+0xe>
    8924:	0000e7b0 	.word	0x0000e7b0

00008928 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8928:	2201      	movs	r2, #1
{
    892a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    892c:	4b09      	ldr	r3, [pc, #36]	; (8954 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    892e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    8930:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8932:	f7ff ffd9 	bl	88e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    8936:	f005 fa9a 	bl	de6e <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    893a:	2003      	movs	r0, #3
    893c:	f7ff ffd4 	bl	88e8 <z_sys_init_run_level>

	z_init_static_threads();
    8940:	f000 f95e 	bl	8c00 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    8944:	f7f7 fd72 	bl	42c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8948:	4a03      	ldr	r2, [pc, #12]	; (8958 <bg_thread_main+0x30>)
    894a:	7b13      	ldrb	r3, [r2, #12]
    894c:	f023 0301 	bic.w	r3, r3, #1
    8950:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8952:	bd08      	pop	{r3, pc}
    8954:	2005e386 	.word	0x2005e386
    8958:	2000a600 	.word	0x2000a600

0000895c <z_bss_zero>:
{
    895c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    895e:	4803      	ldr	r0, [pc, #12]	; (896c <z_bss_zero+0x10>)
    8960:	4a03      	ldr	r2, [pc, #12]	; (8970 <z_bss_zero+0x14>)
    8962:	2100      	movs	r1, #0
    8964:	1a12      	subs	r2, r2, r0
    8966:	f005 f80c 	bl	d982 <z_early_memset>
}
    896a:	bd08      	pop	{r3, pc}
    896c:	2000a438 	.word	0x2000a438
    8970:	2005e388 	.word	0x2005e388

00008974 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    8974:	2378      	movs	r3, #120	; 0x78
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    8976:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    8978:	4e13      	ldr	r6, [pc, #76]	; (89c8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    897a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    897c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    8980:	2300      	movs	r3, #0
{
    8982:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    8984:	e9cd 2304 	strd	r2, r3, [sp, #16]
    8988:	220f      	movs	r2, #15
    898a:	9301      	str	r3, [sp, #4]
    898c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8990:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    8992:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8996:	4d0d      	ldr	r5, [pc, #52]	; (89cc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    8998:	490d      	ldr	r1, [pc, #52]	; (89d0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    899a:	fb03 5500 	mla	r5, r3, r0, r5
{
    899e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    89a0:	fb02 1100 	mla	r1, r2, r0, r1
    89a4:	4b0b      	ldr	r3, [pc, #44]	; (89d4 <z_init_cpu+0x60>)
    89a6:	4630      	mov	r0, r6
    89a8:	9500      	str	r5, [sp, #0]
    89aa:	f000 f8cd 	bl	8b48 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    89ae:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    89b0:	4809      	ldr	r0, [pc, #36]	; (89d8 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    89b2:	742c      	strb	r4, [r5, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    89b4:	3401      	adds	r4, #1
    89b6:	f023 0304 	bic.w	r3, r3, #4
    89ba:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    89be:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    89c0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    89c2:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    89c4:	b006      	add	sp, #24
    89c6:	bd70      	pop	{r4, r5, r6, pc}
    89c8:	2000a588 	.word	0x2000a588
    89cc:	2001c364 	.word	0x2001c364
    89d0:	20061388 	.word	0x20061388
    89d4:	0000da29 	.word	0x0000da29
    89d8:	200614c8 	.word	0x200614c8

000089dc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    89dc:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    89de:	4b2b      	ldr	r3, [pc, #172]	; (8a8c <z_cstart+0xb0>)
    89e0:	b0a4      	sub	sp, #144	; 0x90
	uint32_t msp =
    89e2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    89e6:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    89ea:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    89ee:	2400      	movs	r4, #0
    89f0:	23e0      	movs	r3, #224	; 0xe0
    89f2:	4d27      	ldr	r5, [pc, #156]	; (8a90 <z_cstart+0xb4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    89f4:	4e27      	ldr	r6, [pc, #156]	; (8a94 <z_cstart+0xb8>)
    89f6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    89fa:	77ec      	strb	r4, [r5, #31]
    89fc:	762c      	strb	r4, [r5, #24]
    89fe:	766c      	strb	r4, [r5, #25]
    8a00:	76ac      	strb	r4, [r5, #26]
    8a02:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8a08:	4f23      	ldr	r7, [pc, #140]	; (8a98 <z_cstart+0xbc>)
    8a0a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    8a0e:	626b      	str	r3, [r5, #36]	; 0x24
    8a10:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8a14:	f7fb fa44 	bl	3ea0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8a18:	f7fb f83a 	bl	3a90 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8a1c:	f04f 33ff 	mov.w	r3, #4294967295
    8a20:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8a22:	62eb      	str	r3, [r5, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    8a24:	f240 1301 	movw	r3, #257	; 0x101
    8a28:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    8a2c:	ab06      	add	r3, sp, #24
    8a2e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    8a30:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	dummy_thread->resource_pool = NULL;
    8a34:	9421      	str	r4, [sp, #132]	; 0x84
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8a36:	f004 ff72 	bl	d91e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8a3a:	4620      	mov	r0, r4
    8a3c:	f7ff ff54 	bl	88e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8a40:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    8a42:	4d16      	ldr	r5, [pc, #88]	; (8a9c <z_cstart+0xc0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8a44:	f7ff ff50 	bl	88e8 <z_sys_init_run_level>
	z_sched_init();
    8a48:	f000 fcf6 	bl	9438 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8a4c:	4b14      	ldr	r3, [pc, #80]	; (8aa0 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
    8a4e:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8a50:	9305      	str	r3, [sp, #20]
    8a52:	2301      	movs	r3, #1
    8a54:	4913      	ldr	r1, [pc, #76]	; (8aa4 <z_cstart+0xc8>)
    8a56:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    8a5a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    8a5e:	4628      	mov	r0, r5
    8a60:	463b      	mov	r3, r7
    8a62:	e9cd 4401 	strd	r4, r4, [sp, #4]
    8a66:	9400      	str	r4, [sp, #0]
    8a68:	f000 f86e 	bl	8b48 <z_setup_new_thread>
    8a6c:	4606      	mov	r6, r0
    8a6e:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    8a70:	4628      	mov	r0, r5
    8a72:	f022 0204 	bic.w	r2, r2, #4
    8a76:	736a      	strb	r2, [r5, #13]
    8a78:	f005 f906 	bl	dc88 <z_ready_thread>
	z_init_cpu(0);
    8a7c:	4620      	mov	r0, r4
    8a7e:	f7ff ff79 	bl	8974 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8a82:	463a      	mov	r2, r7
    8a84:	4631      	mov	r1, r6
    8a86:	4628      	mov	r0, r5
    8a88:	f7fb f8fa 	bl	3c80 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8a8c:	200614c8 	.word	0x200614c8
    8a90:	e000ed00 	.word	0xe000ed00
    8a94:	2001c364 	.word	0x2001c364
    8a98:	00008929 	.word	0x00008929
    8a9c:	2000a600 	.word	0x2000a600
    8aa0:	0000ec14 	.word	0x0000ec14
    8aa4:	2005eb88 	.word	0x2005eb88

00008aa8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8aa8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8aaa:	4b0e      	ldr	r3, [pc, #56]	; (8ae4 <init_mem_slab_module+0x3c>)
    8aac:	4c0e      	ldr	r4, [pc, #56]	; (8ae8 <init_mem_slab_module+0x40>)
    8aae:	42a3      	cmp	r3, r4
    8ab0:	d301      	bcc.n	8ab6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    8ab2:	2000      	movs	r0, #0
	return rc;
}
    8ab4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8ab6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    8aba:	ea41 0200 	orr.w	r2, r1, r0
    8abe:	f012 0203 	ands.w	r2, r2, #3
    8ac2:	d10b      	bne.n	8adc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    8ac4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    8ac6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ac8:	42aa      	cmp	r2, r5
    8aca:	d101      	bne.n	8ad0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8acc:	331c      	adds	r3, #28
    8ace:	e7ee      	b.n	8aae <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    8ad0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ad2:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    8ad4:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    8ad6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    8ad8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    8ada:	e7f5      	b.n	8ac8 <init_mem_slab_module+0x20>
	return rc;
    8adc:	f06f 0015 	mvn.w	r0, #21
    8ae0:	e7e8      	b.n	8ab4 <init_mem_slab_module+0xc>
    8ae2:	bf00      	nop
    8ae4:	2000a2a0 	.word	0x2000a2a0
    8ae8:	2000a2bc 	.word	0x2000a2bc

00008aec <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8aee:	460c      	mov	r4, r1
	__asm__ volatile(
    8af0:	f04f 0520 	mov.w	r5, #32
    8af4:	f3ef 8111 	mrs	r1, BASEPRI
    8af8:	f385 8812 	msr	BASEPRI_MAX, r5
    8afc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8b00:	6945      	ldr	r5, [r0, #20]
    8b02:	b15d      	cbz	r5, 8b1c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    8b04:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    8b06:	682b      	ldr	r3, [r5, #0]
    8b08:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    8b0a:	6983      	ldr	r3, [r0, #24]
    8b0c:	3301      	adds	r3, #1
    8b0e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8b10:	2000      	movs	r0, #0
	__asm__ volatile(
    8b12:	f381 8811 	msr	BASEPRI, r1
    8b16:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    8b1a:	e011      	b.n	8b40 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8b1c:	ea52 0c03 	orrs.w	ip, r2, r3
    8b20:	d103      	bne.n	8b2a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    8b22:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    8b26:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    8b28:	e7f3      	b.n	8b12 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8b2a:	e9cd 2300 	strd	r2, r3, [sp]
    8b2e:	4602      	mov	r2, r0
    8b30:	3008      	adds	r0, #8
    8b32:	f000 fbdb 	bl	92ec <z_pend_curr>
		if (result == 0) {
    8b36:	b918      	cbnz	r0, 8b40 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8b38:	4b02      	ldr	r3, [pc, #8]	; (8b44 <k_mem_slab_alloc+0x58>)
    8b3a:	689b      	ldr	r3, [r3, #8]
    8b3c:	695b      	ldr	r3, [r3, #20]
    8b3e:	6023      	str	r3, [r4, #0]
}
    8b40:	b003      	add	sp, #12
    8b42:	bd30      	pop	{r4, r5, pc}
    8b44:	2001c364 	.word	0x2001c364

00008b48 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    8b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    8b4c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    8b4e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    8b52:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8b54:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    8b56:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    8b5a:	2500      	movs	r5, #0
{
    8b5c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    8b5e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    8b60:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    8b62:	e9c0 5506 	strd	r5, r5, [r0, #24]
    8b66:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8b68:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8b6c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    8b70:	e9c0 1618 	strd	r1, r6, [r0, #96]	; 0x60
	thread_base->pended_on = NULL;
    8b74:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    8b76:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    8b78:	6685      	str	r5, [r0, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b7a:	9202      	str	r2, [sp, #8]
    8b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    8b7e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b82:	9201      	str	r2, [sp, #4]
    8b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8b86:	9200      	str	r2, [sp, #0]
    8b88:	4642      	mov	r2, r8
    8b8a:	f7fb f85d 	bl	3c48 <arch_new_thread>
	if (!_current) {
    8b8e:	4b05      	ldr	r3, [pc, #20]	; (8ba4 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    8b90:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    8b92:	689b      	ldr	r3, [r3, #8]
    8b94:	b103      	cbz	r3, 8b98 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    8b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    8b98:	4640      	mov	r0, r8
    8b9a:	66e3      	str	r3, [r4, #108]	; 0x6c
    8b9c:	b004      	add	sp, #16
    8b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ba2:	bf00      	nop
    8ba4:	2001c364 	.word	0x2001c364

00008ba8 <z_impl_k_thread_create>:
{
    8ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8baa:	2700      	movs	r7, #0
{
    8bac:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bae:	9705      	str	r7, [sp, #20]
    8bb0:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
    8bb2:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bb6:	9704      	str	r7, [sp, #16]
    8bb8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
    8bba:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bbc:	9703      	str	r7, [sp, #12]
    8bbe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    8bc0:	9702      	str	r7, [sp, #8]
    8bc2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    8bc4:	9701      	str	r7, [sp, #4]
    8bc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8bc8:	9700      	str	r7, [sp, #0]
    8bca:	f7ff ffbd 	bl	8b48 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8bce:	f1b5 3fff 	cmp.w	r5, #4294967295
    8bd2:	bf08      	it	eq
    8bd4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    8bd8:	d005      	beq.n	8be6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8bda:	ea55 0306 	orrs.w	r3, r5, r6
    8bde:	d105      	bne.n	8bec <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    8be0:	4620      	mov	r0, r4
    8be2:	f000 fb27 	bl	9234 <z_sched_start>
}
    8be6:	4620      	mov	r0, r4
    8be8:	b007      	add	sp, #28
    8bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8bec:	4632      	mov	r2, r6
    8bee:	462b      	mov	r3, r5
    8bf0:	4902      	ldr	r1, [pc, #8]	; (8bfc <z_impl_k_thread_create+0x54>)
    8bf2:	f104 0018 	add.w	r0, r4, #24
    8bf6:	f000 fd99 	bl	972c <z_add_timeout>
    8bfa:	e7f4      	b.n	8be6 <z_impl_k_thread_create+0x3e>
    8bfc:	0000dca9 	.word	0x0000dca9

00008c00 <z_init_static_threads>:
{
    8c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8c04:	4c29      	ldr	r4, [pc, #164]	; (8cac <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    8c06:	4d2a      	ldr	r5, [pc, #168]	; (8cb0 <z_init_static_threads+0xb0>)
{
    8c08:	b087      	sub	sp, #28
    8c0a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    8c0c:	42ae      	cmp	r6, r5
    8c0e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    8c12:	d30f      	bcc.n	8c34 <z_init_static_threads+0x34>
	k_sched_lock();
    8c14:	f000 faaa 	bl	916c <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    8c18:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    8c1c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    8c20:	4c22      	ldr	r4, [pc, #136]	; (8cac <z_init_static_threads+0xac>)
    8c22:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8cb4 <z_init_static_threads+0xb4>
    8c26:	42ac      	cmp	r4, r5
    8c28:	d320      	bcc.n	8c6c <z_init_static_threads+0x6c>
}
    8c2a:	b007      	add	sp, #28
    8c2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    8c30:	f000 bbe6 	b.w	9400 <k_sched_unlock>
		z_setup_new_thread(
    8c34:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8c38:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    8c3c:	9305      	str	r3, [sp, #20]
    8c3e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8c42:	9304      	str	r3, [sp, #16]
    8c44:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8c48:	9303      	str	r3, [sp, #12]
    8c4a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8c4e:	9302      	str	r3, [sp, #8]
    8c50:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8c54:	9301      	str	r3, [sp, #4]
    8c56:	f854 3c20 	ldr.w	r3, [r4, #-32]
    8c5a:	9300      	str	r3, [sp, #0]
    8c5c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    8c60:	f7ff ff72 	bl	8b48 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8c64:	f854 3c30 	ldr.w	r3, [r4, #-48]
    8c68:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    8c6a:	e7ce      	b.n	8c0a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8c6e:	1c5a      	adds	r2, r3, #1
    8c70:	d00d      	beq.n	8c8e <z_init_static_threads+0x8e>
    8c72:	2100      	movs	r1, #0
    8c74:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    8c76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8c7a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8c7e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    8c82:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8c86:	d104      	bne.n	8c92 <z_init_static_threads+0x92>
	z_sched_start(thread);
    8c88:	4640      	mov	r0, r8
    8c8a:	f000 fad3 	bl	9234 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    8c8e:	3430      	adds	r4, #48	; 0x30
    8c90:	e7c9      	b.n	8c26 <z_init_static_threads+0x26>
    8c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c96:	2300      	movs	r3, #0
    8c98:	f7f7 fa5c 	bl	154 <__aeabi_uldivmod>
    8c9c:	4602      	mov	r2, r0
    8c9e:	460b      	mov	r3, r1
    8ca0:	f108 0018 	add.w	r0, r8, #24
    8ca4:	4649      	mov	r1, r9
    8ca6:	f000 fd41 	bl	972c <z_add_timeout>
    8caa:	e7f0      	b.n	8c8e <z_init_static_threads+0x8e>
    8cac:	2000a268 	.word	0x2000a268
    8cb0:	2000a268 	.word	0x2000a268
    8cb4:	0000dca9 	.word	0x0000dca9

00008cb8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8cbc:	4604      	mov	r4, r0
    8cbe:	4617      	mov	r7, r2
    8cc0:	461e      	mov	r6, r3
	__asm__ volatile(
    8cc2:	f04f 0320 	mov.w	r3, #32
    8cc6:	f3ef 8811 	mrs	r8, BASEPRI
    8cca:	f383 8812 	msr	BASEPRI_MAX, r3
    8cce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8cd2:	68c3      	ldr	r3, [r0, #12]
    8cd4:	4a32      	ldr	r2, [pc, #200]	; (8da0 <z_impl_k_mutex_lock+0xe8>)
    8cd6:	b16b      	cbz	r3, 8cf4 <z_impl_k_mutex_lock+0x3c>
    8cd8:	6880      	ldr	r0, [r0, #8]
    8cda:	6891      	ldr	r1, [r2, #8]
    8cdc:	4288      	cmp	r0, r1
    8cde:	d019      	beq.n	8d14 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8ce0:	ea57 0306 	orrs.w	r3, r7, r6
    8ce4:	d118      	bne.n	8d18 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    8ce6:	f388 8811 	msr	BASEPRI, r8
    8cea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8cee:	f06f 000f 	mvn.w	r0, #15
    8cf2:	e00c      	b.n	8d0e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    8cf4:	6891      	ldr	r1, [r2, #8]
    8cf6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    8cfa:	3301      	adds	r3, #1
    8cfc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8cfe:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8d00:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    8d02:	60a3      	str	r3, [r4, #8]
    8d04:	f388 8811 	msr	BASEPRI, r8
    8d08:	f3bf 8f6f 	isb	sy
		return 0;
    8d0c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8d0e:	b002      	add	sp, #8
    8d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8d14:	6921      	ldr	r1, [r4, #16]
    8d16:	e7f0      	b.n	8cfa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8d18:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8d1c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    8d20:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    8d24:	4299      	cmp	r1, r3
    8d26:	bfa8      	it	ge
    8d28:	4619      	movge	r1, r3
    8d2a:	4291      	cmp	r1, r2
    8d2c:	bfb8      	it	lt
    8d2e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8d30:	428b      	cmp	r3, r1
    8d32:	dd2e      	ble.n	8d92 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    8d34:	f004 fe84 	bl	da40 <adjust_owner_prio.isra.0>
    8d38:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8d3a:	4622      	mov	r2, r4
    8d3c:	4641      	mov	r1, r8
    8d3e:	e9cd 7600 	strd	r7, r6, [sp]
    8d42:	4818      	ldr	r0, [pc, #96]	; (8da4 <z_impl_k_mutex_lock+0xec>)
    8d44:	f000 fad2 	bl	92ec <z_pend_curr>
	if (got_mutex == 0) {
    8d48:	2800      	cmp	r0, #0
    8d4a:	d0e0      	beq.n	8d0e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    8d4c:	f04f 0320 	mov.w	r3, #32
    8d50:	f3ef 8611 	mrs	r6, BASEPRI
    8d54:	f383 8812 	msr	BASEPRI_MAX, r3
    8d58:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8d5c:	6823      	ldr	r3, [r4, #0]
    8d5e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d60:	429c      	cmp	r4, r3
    8d62:	d00a      	beq.n	8d7a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8d64:	b14b      	cbz	r3, 8d7a <z_impl_k_mutex_lock+0xc2>
    8d66:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8d6a:	4299      	cmp	r1, r3
    8d6c:	bfa8      	it	ge
    8d6e:	4619      	movge	r1, r3
    8d70:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8d74:	4299      	cmp	r1, r3
    8d76:	bfb8      	it	lt
    8d78:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8d7a:	68a0      	ldr	r0, [r4, #8]
    8d7c:	f004 fe60 	bl	da40 <adjust_owner_prio.isra.0>
    8d80:	b900      	cbnz	r0, 8d84 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    8d82:	b145      	cbz	r5, 8d96 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    8d84:	4631      	mov	r1, r6
    8d86:	4807      	ldr	r0, [pc, #28]	; (8da4 <z_impl_k_mutex_lock+0xec>)
    8d88:	f000 f9de 	bl	9148 <z_reschedule>
	return -EAGAIN;
    8d8c:	f06f 000a 	mvn.w	r0, #10
    8d90:	e7bd      	b.n	8d0e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    8d92:	2500      	movs	r5, #0
    8d94:	e7d1      	b.n	8d3a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    8d96:	f386 8811 	msr	BASEPRI, r6
    8d9a:	f3bf 8f6f 	isb	sy
    8d9e:	e7f5      	b.n	8d8c <z_impl_k_mutex_lock+0xd4>
    8da0:	2001c364 	.word	0x2001c364
    8da4:	2005e387 	.word	0x2005e387

00008da8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8da8:	6883      	ldr	r3, [r0, #8]
{
    8daa:	b570      	push	{r4, r5, r6, lr}
    8dac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    8dae:	b36b      	cbz	r3, 8e0c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8db0:	4a19      	ldr	r2, [pc, #100]	; (8e18 <z_impl_k_mutex_unlock+0x70>)
    8db2:	6892      	ldr	r2, [r2, #8]
    8db4:	4293      	cmp	r3, r2
    8db6:	d12c      	bne.n	8e12 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8db8:	68c3      	ldr	r3, [r0, #12]
    8dba:	2b01      	cmp	r3, #1
    8dbc:	d903      	bls.n	8dc6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    8dbe:	3b01      	subs	r3, #1
    8dc0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    8dc2:	2000      	movs	r0, #0
}
    8dc4:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    8dc6:	f04f 0320 	mov.w	r3, #32
    8dca:	f3ef 8511 	mrs	r5, BASEPRI
    8dce:	f383 8812 	msr	BASEPRI_MAX, r3
    8dd2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8dd6:	6901      	ldr	r1, [r0, #16]
    8dd8:	6880      	ldr	r0, [r0, #8]
    8dda:	f004 fe31 	bl	da40 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8dde:	4620      	mov	r0, r4
    8de0:	f004 ffae 	bl	dd40 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8de4:	2600      	movs	r6, #0
    8de6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8de8:	b150      	cbz	r0, 8e00 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    8dea:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8dee:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8df0:	6746      	str	r6, [r0, #116]	; 0x74
		z_ready_thread(new_owner);
    8df2:	f004 ff49 	bl	dc88 <z_ready_thread>
		z_reschedule(&lock, key);
    8df6:	4629      	mov	r1, r5
    8df8:	4808      	ldr	r0, [pc, #32]	; (8e1c <z_impl_k_mutex_unlock+0x74>)
    8dfa:	f000 f9a5 	bl	9148 <z_reschedule>
    8dfe:	e7e0      	b.n	8dc2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    8e00:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8e02:	f385 8811 	msr	BASEPRI, r5
    8e06:	f3bf 8f6f 	isb	sy
    8e0a:	e7da      	b.n	8dc2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    8e0c:	f06f 0015 	mvn.w	r0, #21
    8e10:	e7d8      	b.n	8dc4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    8e12:	f04f 30ff 	mov.w	r0, #4294967295
    8e16:	e7d5      	b.n	8dc4 <z_impl_k_mutex_unlock+0x1c>
    8e18:	2001c364 	.word	0x2001c364
    8e1c:	2005e387 	.word	0x2005e387

00008e20 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8e22:	4611      	mov	r1, r2
	__asm__ volatile(
    8e24:	f04f 0220 	mov.w	r2, #32
    8e28:	f3ef 8511 	mrs	r5, BASEPRI
    8e2c:	f382 8812 	msr	BASEPRI_MAX, r2
    8e30:	f3bf 8f6f 	isb	sy
    8e34:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    8e36:	b19c      	cbz	r4, 8e60 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8e38:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8e3a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8e3c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8e40:	4294      	cmp	r4, r2
	list->head = node;
    8e42:	6003      	str	r3, [r0, #0]
	list->tail = node;
    8e44:	bf08      	it	eq
    8e46:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    8e48:	2101      	movs	r1, #1
    8e4a:	4620      	mov	r0, r4
    8e4c:	f004 fe67 	bl	db1e <z_queue_node_peek>
    8e50:	4604      	mov	r4, r0
	__asm__ volatile(
    8e52:	f385 8811 	msr	BASEPRI, r5
    8e56:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    8e5a:	4620      	mov	r0, r4
    8e5c:	b003      	add	sp, #12
    8e5e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8e60:	ea51 0203 	orrs.w	r2, r1, r3
    8e64:	d0f5      	beq.n	8e52 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    8e66:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    8e6a:	e9cd 1300 	strd	r1, r3, [sp]
    8e6e:	4610      	mov	r0, r2
    8e70:	4629      	mov	r1, r5
    8e72:	f000 fa3b 	bl	92ec <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    8e76:	2800      	cmp	r0, #0
    8e78:	d1ef      	bne.n	8e5a <z_impl_k_queue_get+0x3a>
    8e7a:	4b02      	ldr	r3, [pc, #8]	; (8e84 <z_impl_k_queue_get+0x64>)
    8e7c:	689b      	ldr	r3, [r3, #8]
    8e7e:	695c      	ldr	r4, [r3, #20]
    8e80:	e7eb      	b.n	8e5a <z_impl_k_queue_get+0x3a>
    8e82:	bf00      	nop
    8e84:	2001c364 	.word	0x2001c364

00008e88 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8e88:	b538      	push	{r3, r4, r5, lr}
    8e8a:	4604      	mov	r4, r0
	__asm__ volatile(
    8e8c:	f04f 0320 	mov.w	r3, #32
    8e90:	f3ef 8511 	mrs	r5, BASEPRI
    8e94:	f383 8812 	msr	BASEPRI_MAX, r3
    8e98:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8e9c:	f004 ff50 	bl	dd40 <z_unpend_first_thread>

	if (thread != NULL) {
    8ea0:	b148      	cbz	r0, 8eb6 <z_impl_k_sem_give+0x2e>
    8ea2:	2200      	movs	r2, #0
    8ea4:	6742      	str	r2, [r0, #116]	; 0x74
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8ea6:	f004 feef 	bl	dc88 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8eaa:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8eb0:	4804      	ldr	r0, [pc, #16]	; (8ec4 <z_impl_k_sem_give+0x3c>)
    8eb2:	f000 b949 	b.w	9148 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8eb6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8eba:	429a      	cmp	r2, r3
    8ebc:	bf18      	it	ne
    8ebe:	3301      	addne	r3, #1
    8ec0:	60a3      	str	r3, [r4, #8]
}
    8ec2:	e7f2      	b.n	8eaa <z_impl_k_sem_give+0x22>
    8ec4:	2005e387 	.word	0x2005e387

00008ec8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8ec8:	b513      	push	{r0, r1, r4, lr}
    8eca:	f04f 0420 	mov.w	r4, #32
    8ece:	f3ef 8111 	mrs	r1, BASEPRI
    8ed2:	f384 8812 	msr	BASEPRI_MAX, r4
    8ed6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8eda:	6884      	ldr	r4, [r0, #8]
    8edc:	b144      	cbz	r4, 8ef0 <z_impl_k_sem_take+0x28>
		sem->count--;
    8ede:	3c01      	subs	r4, #1
    8ee0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    8ee2:	f381 8811 	msr	BASEPRI, r1
    8ee6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8eea:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8eec:	b002      	add	sp, #8
    8eee:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8ef0:	ea52 0403 	orrs.w	r4, r2, r3
    8ef4:	d106      	bne.n	8f04 <z_impl_k_sem_take+0x3c>
    8ef6:	f381 8811 	msr	BASEPRI, r1
    8efa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8efe:	f06f 000f 	mvn.w	r0, #15
    8f02:	e7f3      	b.n	8eec <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8f04:	e9cd 2300 	strd	r2, r3, [sp]
    8f08:	4602      	mov	r2, r0
    8f0a:	4802      	ldr	r0, [pc, #8]	; (8f14 <z_impl_k_sem_take+0x4c>)
    8f0c:	f000 f9ee 	bl	92ec <z_pend_curr>
	return ret;
    8f10:	e7ec      	b.n	8eec <z_impl_k_sem_take+0x24>
    8f12:	bf00      	nop
    8f14:	2005e387 	.word	0x2005e387

00008f18 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f1c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8f1e:	f04f 38ff 	mov.w	r8, #4294967295
    8f22:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
    8f26:	4e43      	ldr	r6, [pc, #268]	; (9034 <work_queue_main+0x11c>)
{
    8f28:	b085      	sub	sp, #20
	__asm__ volatile(
    8f2a:	f04f 0320 	mov.w	r3, #32
    8f2e:	f3ef 8711 	mrs	r7, BASEPRI
    8f32:	f383 8812 	msr	BASEPRI_MAX, r3
    8f36:	f3bf 8f6f 	isb	sy
    8f3a:	6fa5      	ldr	r5, [r4, #120]	; 0x78
Z_GENLIST_GET(slist, snode)
    8f3c:	b98d      	cbnz	r5, 8f62 <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
    8f3e:	2102      	movs	r1, #2
    8f40:	f104 0090 	add.w	r0, r4, #144	; 0x90
    8f44:	f004 fe0e 	bl	db64 <flag_test_and_clear>
    8f48:	2800      	cmp	r0, #0
    8f4a:	d132      	bne.n	8fb2 <work_queue_main+0x9a>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8f4c:	2300      	movs	r3, #0
    8f4e:	4639      	mov	r1, r7
    8f50:	e9cd 8900 	strd	r8, r9, [sp]
    8f54:	9302      	str	r3, [sp, #8]
    8f56:	f104 0280 	add.w	r2, r4, #128	; 0x80
    8f5a:	4837      	ldr	r0, [pc, #220]	; (9038 <work_queue_main+0x120>)
    8f5c:	f000 fb78 	bl	9650 <z_sched_wait>
			continue;
    8f60:	e7e3      	b.n	8f2a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8f62:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	return node->next;
    8f64:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8f66:	4295      	cmp	r5, r2
	list->head = node;
    8f68:	67a3      	str	r3, [r4, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8f6a:	d100      	bne.n	8f6e <work_queue_main+0x56>
	list->tail = node;
    8f6c:	67e3      	str	r3, [r4, #124]	; 0x7c
	*flagp |= BIT(bit);
    8f6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    8f72:	f043 0302 	orr.w	r3, r3, #2
    8f76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	*flagp &= ~BIT(bit);
    8f7a:	68eb      	ldr	r3, [r5, #12]
    8f7c:	f023 0304 	bic.w	r3, r3, #4
    8f80:	f043 0301 	orr.w	r3, r3, #1
    8f84:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    8f86:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    8f88:	f387 8811 	msr	BASEPRI, r7
    8f8c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8f90:	4628      	mov	r0, r5
    8f92:	4798      	blx	r3
	__asm__ volatile(
    8f94:	f04f 0320 	mov.w	r3, #32
    8f98:	f3ef 8b11 	mrs	fp, BASEPRI
    8f9c:	f383 8812 	msr	BASEPRI_MAX, r3
    8fa0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8fa4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8fa6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    8fa8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8fac:	d40b      	bmi.n	8fc6 <work_queue_main+0xae>
	*flagp &= ~BIT(bit);
    8fae:	60ea      	str	r2, [r5, #12]
    8fb0:	e00e      	b.n	8fd0 <work_queue_main+0xb8>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8fb2:	f104 0588 	add.w	r5, r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8fb6:	2200      	movs	r2, #0
    8fb8:	2101      	movs	r1, #1
    8fba:	4628      	mov	r0, r5
    8fbc:	f004 fee8 	bl	dd90 <z_sched_wake>
    8fc0:	2800      	cmp	r0, #0
    8fc2:	d1f8      	bne.n	8fb6 <work_queue_main+0x9e>
    8fc4:	e7c2      	b.n	8f4c <work_queue_main+0x34>
	return list->head;
    8fc6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    8fc8:	f023 0303 	bic.w	r3, r3, #3
    8fcc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8fce:	b970      	cbnz	r0, 8fee <work_queue_main+0xd6>
	*flagp &= ~BIT(bit);
    8fd0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    8fd4:	f023 0302 	bic.w	r3, r3, #2
    8fd8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	__asm__ volatile(
    8fdc:	f38b 8811 	msr	BASEPRI, fp
    8fe0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    8fe4:	05d8      	lsls	r0, r3, #23
    8fe6:	d4a0      	bmi.n	8f2a <work_queue_main+0x12>
	z_impl_k_yield();
    8fe8:	f000 fa2e 	bl	9448 <z_impl_k_yield>
}
    8fec:	e79d      	b.n	8f2a <work_queue_main+0x12>
	return node->next;
    8fee:	2700      	movs	r7, #0
	parent->next = child;
    8ff0:	463b      	mov	r3, r7
	return node->next;
    8ff2:	f8d0 a000 	ldr.w	sl, [r0]
		if (wc->work == work) {
    8ff6:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    8ff8:	4601      	mov	r1, r0
		if (wc->work == work) {
    8ffa:	4295      	cmp	r5, r2
    8ffc:	d10c      	bne.n	9018 <work_queue_main+0x100>
    8ffe:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    9000:	b997      	cbnz	r7, 9028 <work_queue_main+0x110>
    9002:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9004:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    9006:	4282      	cmp	r2, r0
    9008:	d100      	bne.n	900c <work_queue_main+0xf4>
	list->tail = node;
    900a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    900c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    9010:	f7ff ff3a 	bl	8e88 <z_impl_k_sem_give>
}
    9014:	4639      	mov	r1, r7
    9016:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9018:	f1ba 0f00 	cmp.w	sl, #0
    901c:	d0d8      	beq.n	8fd0 <work_queue_main+0xb8>
	return node->next;
    901e:	4650      	mov	r0, sl
    9020:	460f      	mov	r7, r1
    9022:	f8da a000 	ldr.w	sl, [sl]
    9026:	e7e6      	b.n	8ff6 <work_queue_main+0xde>
	return list->tail;
    9028:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    902a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    902c:	4290      	cmp	r0, r2
	list->tail = node;
    902e:	bf08      	it	eq
    9030:	6077      	streq	r7, [r6, #4]
}
    9032:	e7eb      	b.n	900c <work_queue_main+0xf4>
    9034:	2001c384 	.word	0x2001c384
    9038:	2005e387 	.word	0x2005e387

0000903c <submit_to_queue_locked>:
{
    903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    903e:	68c3      	ldr	r3, [r0, #12]
{
    9040:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9042:	079a      	lsls	r2, r3, #30
{
    9044:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9046:	f3c3 0540 	ubfx	r5, r3, #1, #1
    904a:	d41f      	bmi.n	908c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    904c:	075f      	lsls	r7, r3, #29
    904e:	d41f      	bmi.n	9090 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    9050:	680a      	ldr	r2, [r1, #0]
    9052:	b90a      	cbnz	r2, 9058 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9054:	6882      	ldr	r2, [r0, #8]
    9056:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    9058:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    905a:	bf42      	ittt	mi
    905c:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    905e:	2502      	movmi	r5, #2
			*queuep = work->queue;
    9060:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    9062:	6837      	ldr	r7, [r6, #0]
		ret = 1;
    9064:	bf58      	it	pl
    9066:	2501      	movpl	r5, #1
	if (queue == NULL) {
    9068:	b36f      	cbz	r7, 90c6 <submit_to_queue_locked+0x8a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    906a:	4b1a      	ldr	r3, [pc, #104]	; (90d4 <submit_to_queue_locked+0x98>)
    906c:	689b      	ldr	r3, [r3, #8]
    906e:	42bb      	cmp	r3, r7
    9070:	d111      	bne.n	9096 <submit_to_queue_locked+0x5a>
    9072:	f004 fcce 	bl	da12 <k_is_in_isr>
    9076:	f080 0001 	eor.w	r0, r0, #1
    907a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    907c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9080:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9082:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9086:	d521      	bpl.n	90cc <submit_to_queue_locked+0x90>
	} else if (draining && !chained) {
    9088:	b13a      	cbz	r2, 909a <submit_to_queue_locked+0x5e>
    908a:	b940      	cbnz	r0, 909e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    908c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    9090:	2300      	movs	r3, #0
    9092:	6033      	str	r3, [r6, #0]
	return ret;
    9094:	e012      	b.n	90bc <submit_to_queue_locked+0x80>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9096:	2000      	movs	r0, #0
    9098:	e7f0      	b.n	907c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    909a:	071b      	lsls	r3, r3, #28
    909c:	d4f6      	bmi.n	908c <submit_to_queue_locked+0x50>
	parent->next = child;
    909e:	2300      	movs	r3, #0
    90a0:	6023      	str	r3, [r4, #0]
	return list->tail;
    90a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
    90a4:	b963      	cbnz	r3, 90c0 <submit_to_queue_locked+0x84>
	list->head = node;
    90a6:	e9c7 441e 	strd	r4, r4, [r7, #120]	; 0x78
		(void)notify_queue_locked(queue);
    90aa:	4638      	mov	r0, r7
    90ac:	f004 fd65 	bl	db7a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    90b0:	68e3      	ldr	r3, [r4, #12]
    90b2:	f043 0304 	orr.w	r3, r3, #4
    90b6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    90b8:	6833      	ldr	r3, [r6, #0]
    90ba:	60a3      	str	r3, [r4, #8]
}
    90bc:	4628      	mov	r0, r5
    90be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    90c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    90c2:	67fc      	str	r4, [r7, #124]	; 0x7c
}
    90c4:	e7f1      	b.n	90aa <submit_to_queue_locked+0x6e>
		return -EINVAL;
    90c6:	f06f 0515 	mvn.w	r5, #21
    90ca:	e7e1      	b.n	9090 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    90cc:	f06f 0512 	mvn.w	r5, #18
    90d0:	e7de      	b.n	9090 <submit_to_queue_locked+0x54>
    90d2:	bf00      	nop
    90d4:	2001c364 	.word	0x2001c364

000090d8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    90d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    90da:	4604      	mov	r4, r0
	list->head = NULL;
    90dc:	2000      	movs	r0, #0
    90de:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    90e0:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
    90e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    90e6:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
    90ea:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    90ee:	f104 0088 	add.w	r0, r4, #136	; 0x88
    90f2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    90f6:	b31d      	cbz	r5, 9140 <k_work_queue_start+0x68>
    90f8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    90fa:	2800      	cmp	r0, #0
    90fc:	f240 1001 	movw	r0, #257	; 0x101
    9100:	bf08      	it	eq
    9102:	2001      	moveq	r0, #1
	*flagp = flags;
    9104:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9108:	2000      	movs	r0, #0
    910a:	f04f 36ff 	mov.w	r6, #4294967295
    910e:	f04f 37ff 	mov.w	r7, #4294967295
    9112:	e9cd 3003 	strd	r3, r0, [sp, #12]
    9116:	e9cd 0001 	strd	r0, r0, [sp, #4]
    911a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    911e:	4620      	mov	r0, r4
    9120:	4b08      	ldr	r3, [pc, #32]	; (9144 <k_work_queue_start+0x6c>)
    9122:	9400      	str	r4, [sp, #0]
    9124:	f7ff fd40 	bl	8ba8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9128:	b125      	cbz	r5, 9134 <k_work_queue_start+0x5c>
    912a:	6829      	ldr	r1, [r5, #0]
    912c:	b111      	cbz	r1, 9134 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    912e:	4620      	mov	r0, r4
    9130:	f004 fc75 	bl	da1e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9134:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9136:	b009      	add	sp, #36	; 0x24
    9138:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    913c:	f004 bc72 	b.w	da24 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9140:	2001      	movs	r0, #1
    9142:	e7df      	b.n	9104 <k_work_queue_start+0x2c>
    9144:	00008f19 	.word	0x00008f19

00009148 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9148:	b949      	cbnz	r1, 915e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    914a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    914e:	b930      	cbnz	r0, 915e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    9150:	4b05      	ldr	r3, [pc, #20]	; (9168 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    9152:	695a      	ldr	r2, [r3, #20]
    9154:	689b      	ldr	r3, [r3, #8]
    9156:	429a      	cmp	r2, r3
    9158:	d001      	beq.n	915e <z_reschedule+0x16>
	ret = arch_swap(key);
    915a:	f7fa bd1f 	b.w	3b9c <arch_swap>
    915e:	f381 8811 	msr	BASEPRI, r1
    9162:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    9166:	4770      	bx	lr
    9168:	2001c364 	.word	0x2001c364

0000916c <k_sched_lock>:
	__asm__ volatile(
    916c:	f04f 0320 	mov.w	r3, #32
    9170:	f3ef 8111 	mrs	r1, BASEPRI
    9174:	f383 8812 	msr	BASEPRI_MAX, r3
    9178:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    917c:	4b04      	ldr	r3, [pc, #16]	; (9190 <k_sched_lock+0x24>)
    917e:	689a      	ldr	r2, [r3, #8]
    9180:	7bd3      	ldrb	r3, [r2, #15]
    9182:	3b01      	subs	r3, #1
    9184:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    9186:	f381 8811 	msr	BASEPRI, r1
    918a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    918e:	4770      	bx	lr
    9190:	2001c364 	.word	0x2001c364

00009194 <update_cache>:
{
    9194:	b508      	push	{r3, lr}
    9196:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    9198:	4809      	ldr	r0, [pc, #36]	; (91c0 <update_cache+0x2c>)
    919a:	f004 fd6f 	bl	dc7c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    919e:	4b09      	ldr	r3, [pc, #36]	; (91c4 <update_cache+0x30>)
    91a0:	b900      	cbnz	r0, 91a4 <update_cache+0x10>
    91a2:	68d8      	ldr	r0, [r3, #12]
	if (preempt_ok != 0) {
    91a4:	b94a      	cbnz	r2, 91ba <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    91a6:	689a      	ldr	r2, [r3, #8]
    91a8:	7b51      	ldrb	r1, [r2, #13]
    91aa:	06c9      	lsls	r1, r1, #27
    91ac:	d105      	bne.n	91ba <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    91ae:	6981      	ldr	r1, [r0, #24]
    91b0:	b919      	cbnz	r1, 91ba <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    91b2:	89d1      	ldrh	r1, [r2, #14]
    91b4:	297f      	cmp	r1, #127	; 0x7f
    91b6:	bf88      	it	hi
    91b8:	4610      	movhi	r0, r2
    91ba:	6158      	str	r0, [r3, #20]
}
    91bc:	bd08      	pop	{r3, pc}
    91be:	bf00      	nop
    91c0:	2001c37c 	.word	0x2001c37c
    91c4:	2001c364 	.word	0x2001c364

000091c8 <ready_thread>:
{
    91c8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    91ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    91ce:	7b43      	ldrb	r3, [r0, #13]
    91d0:	2a00      	cmp	r2, #0
    91d2:	db2a      	blt.n	922a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    91d4:	06da      	lsls	r2, r3, #27
    91d6:	d128      	bne.n	922a <ready_thread+0x62>
    91d8:	6982      	ldr	r2, [r0, #24]
    91da:	bb32      	cbnz	r2, 922a <ready_thread+0x62>
	return list->head == list;
    91dc:	4a14      	ldr	r2, [pc, #80]	; (9230 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    91de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    91e2:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91e4:	f102 0518 	add.w	r5, r2, #24
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    91e8:	e9d2 3406 	ldrd	r3, r4, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91ec:	42ab      	cmp	r3, r5
    91ee:	d017      	beq.n	9220 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    91f0:	b1b3      	cbz	r3, 9220 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    91f2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    91f6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    91fa:	428e      	cmp	r6, r1
    91fc:	d00b      	beq.n	9216 <ready_thread+0x4e>
		return b2 - b1;
    91fe:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9200:	2900      	cmp	r1, #0
    9202:	dd08      	ble.n	9216 <ready_thread+0x4e>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9204:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    9206:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    920a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    920c:	6058      	str	r0, [r3, #4]
		update_cache(0);
    920e:	2000      	movs	r0, #0
}
    9210:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    9212:	f7ff bfbf 	b.w	9194 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9216:	42a3      	cmp	r3, r4
    9218:	d002      	beq.n	9220 <ready_thread+0x58>
    921a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    921c:	2b00      	cmp	r3, #0
    921e:	d1ea      	bne.n	91f6 <ready_thread+0x2e>
	node->prev = tail;
    9220:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    9224:	6020      	str	r0, [r4, #0]
	list->tail = node;
    9226:	61d0      	str	r0, [r2, #28]
}
    9228:	e7f1      	b.n	920e <ready_thread+0x46>
}
    922a:	bc70      	pop	{r4, r5, r6}
    922c:	4770      	bx	lr
    922e:	bf00      	nop
    9230:	2001c364 	.word	0x2001c364

00009234 <z_sched_start>:
{
    9234:	b510      	push	{r4, lr}
	__asm__ volatile(
    9236:	f04f 0220 	mov.w	r2, #32
    923a:	f3ef 8411 	mrs	r4, BASEPRI
    923e:	f382 8812 	msr	BASEPRI_MAX, r2
    9242:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9246:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    9248:	0751      	lsls	r1, r2, #29
    924a:	d404      	bmi.n	9256 <z_sched_start+0x22>
	__asm__ volatile(
    924c:	f384 8811 	msr	BASEPRI, r4
    9250:	f3bf 8f6f 	isb	sy
}
    9254:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9256:	f022 0204 	bic.w	r2, r2, #4
    925a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    925c:	f7ff ffb4 	bl	91c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9260:	4621      	mov	r1, r4
}
    9262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    9266:	4801      	ldr	r0, [pc, #4]	; (926c <z_sched_start+0x38>)
    9268:	f7ff bf6e 	b.w	9148 <z_reschedule>
    926c:	2005e387 	.word	0x2005e387

00009270 <unready_thread>:
{
    9270:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    9272:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    9276:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9278:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    927a:	7b43      	ldrb	r3, [r0, #13]
    927c:	da04      	bge.n	9288 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    927e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9282:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    9284:	f004 fcae 	bl	dbe4 <sys_dlist_remove>
	update_cache(thread == _current);
    9288:	4b04      	ldr	r3, [pc, #16]	; (929c <unready_thread+0x2c>)
    928a:	6898      	ldr	r0, [r3, #8]
    928c:	1a43      	subs	r3, r0, r1
    928e:	4258      	negs	r0, r3
    9290:	4158      	adcs	r0, r3
}
    9292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    9296:	f7ff bf7d 	b.w	9194 <update_cache>
    929a:	bf00      	nop
    929c:	2001c364 	.word	0x2001c364

000092a0 <pend>:
{
    92a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92a4:	4606      	mov	r6, r0
    92a6:	4615      	mov	r5, r2
    92a8:	461c      	mov	r4, r3
	__asm__ volatile(
    92aa:	f04f 0320 	mov.w	r3, #32
    92ae:	f3ef 8711 	mrs	r7, BASEPRI
    92b2:	f383 8812 	msr	BASEPRI_MAX, r3
    92b6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    92ba:	f004 fd17 	bl	dcec <add_to_waitq_locked>
	__asm__ volatile(
    92be:	f387 8811 	msr	BASEPRI, r7
    92c2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    92c6:	f1b4 3fff 	cmp.w	r4, #4294967295
    92ca:	bf08      	it	eq
    92cc:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    92d0:	d008      	beq.n	92e4 <pend+0x44>
    92d2:	462a      	mov	r2, r5
    92d4:	4623      	mov	r3, r4
    92d6:	f106 0018 	add.w	r0, r6, #24
    92da:	4903      	ldr	r1, [pc, #12]	; (92e8 <pend+0x48>)
}
    92dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    92e0:	f000 ba24 	b.w	972c <z_add_timeout>
    92e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92e8:	0000dca9 	.word	0x0000dca9

000092ec <z_pend_curr>:
{
    92ec:	b510      	push	{r4, lr}
    92ee:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
    92f0:	4805      	ldr	r0, [pc, #20]	; (9308 <z_pend_curr+0x1c>)
{
    92f2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    92f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    92f8:	6880      	ldr	r0, [r0, #8]
    92fa:	f7ff ffd1 	bl	92a0 <pend>
    92fe:	4620      	mov	r0, r4
}
    9300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9304:	f7fa bc4a 	b.w	3b9c <arch_swap>
    9308:	2001c364 	.word	0x2001c364

0000930c <z_set_prio>:
{
    930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    930e:	4604      	mov	r4, r0
	__asm__ volatile(
    9310:	f04f 0320 	mov.w	r3, #32
    9314:	f3ef 8611 	mrs	r6, BASEPRI
    9318:	f383 8812 	msr	BASEPRI_MAX, r3
    931c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    9320:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    9322:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9324:	06da      	lsls	r2, r3, #27
    9326:	d133      	bne.n	9390 <z_set_prio+0x84>
		if (need_sched) {
    9328:	6982      	ldr	r2, [r0, #24]
    932a:	bb8a      	cbnz	r2, 9390 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    932c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9330:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9332:	f004 fc57 	bl	dbe4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    9336:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    9338:	4a17      	ldr	r2, [pc, #92]	; (9398 <z_set_prio+0x8c>)
    933a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    933e:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
    9340:	7381      	strb	r1, [r0, #14]
    9342:	4610      	mov	r0, r2
    9344:	f850 3f18 	ldr.w	r3, [r0, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9348:	4283      	cmp	r3, r0
    934a:	d01b      	beq.n	9384 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    934c:	b1d3      	cbz	r3, 9384 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    934e:	69d7      	ldr	r7, [r2, #28]
	int32_t b2 = thread_2->base.prio;
    9350:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    9354:	42a9      	cmp	r1, r5
    9356:	d010      	beq.n	937a <z_set_prio+0x6e>
		return b2 - b1;
    9358:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    935a:	2d00      	cmp	r5, #0
    935c:	dd0d      	ble.n	937a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    935e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9360:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9364:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9366:	605c      	str	r4, [r3, #4]
			update_cache(1);
    9368:	2001      	movs	r0, #1
    936a:	f7ff ff13 	bl	9194 <update_cache>
    936e:	2001      	movs	r0, #1
	__asm__ volatile(
    9370:	f386 8811 	msr	BASEPRI, r6
    9374:	f3bf 8f6f 	isb	sy
}
    9378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    937a:	42bb      	cmp	r3, r7
    937c:	d002      	beq.n	9384 <z_set_prio+0x78>
    937e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9380:	2b00      	cmp	r3, #0
    9382:	d1e5      	bne.n	9350 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    9384:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
    9386:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    938a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    938c:	61d4      	str	r4, [r2, #28]
}
    938e:	e7eb      	b.n	9368 <z_set_prio+0x5c>
			thread->base.prio = prio;
    9390:	2000      	movs	r0, #0
    9392:	73a1      	strb	r1, [r4, #14]
    9394:	e7ec      	b.n	9370 <z_set_prio+0x64>
    9396:	bf00      	nop
    9398:	2001c364 	.word	0x2001c364

0000939c <z_impl_k_thread_suspend>:
{
    939c:	b570      	push	{r4, r5, r6, lr}
    939e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    93a0:	3018      	adds	r0, #24
    93a2:	f004 fd12 	bl	ddca <z_abort_timeout>
	__asm__ volatile(
    93a6:	f04f 0320 	mov.w	r3, #32
    93aa:	f3ef 8611 	mrs	r6, BASEPRI
    93ae:	f383 8812 	msr	BASEPRI_MAX, r3
    93b2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    93b6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    93ba:	7b63      	ldrb	r3, [r4, #13]
    93bc:	2a00      	cmp	r2, #0
    93be:	da05      	bge.n	93cc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    93c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    93c4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    93c6:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    93c8:	f004 fc0c 	bl	dbe4 <sys_dlist_remove>
		update_cache(thread == _current);
    93cc:	4d0b      	ldr	r5, [pc, #44]	; (93fc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    93ce:	7b63      	ldrb	r3, [r4, #13]
    93d0:	68a8      	ldr	r0, [r5, #8]
    93d2:	f043 0310 	orr.w	r3, r3, #16
    93d6:	7363      	strb	r3, [r4, #13]
    93d8:	1b03      	subs	r3, r0, r4
    93da:	4258      	negs	r0, r3
    93dc:	4158      	adcs	r0, r3
    93de:	f7ff fed9 	bl	9194 <update_cache>
	__asm__ volatile(
    93e2:	f386 8811 	msr	BASEPRI, r6
    93e6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    93ea:	68ab      	ldr	r3, [r5, #8]
    93ec:	42a3      	cmp	r3, r4
    93ee:	d103      	bne.n	93f8 <z_impl_k_thread_suspend+0x5c>
}
    93f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    93f4:	f004 bc38 	b.w	dc68 <z_reschedule_unlocked>
}
    93f8:	bd70      	pop	{r4, r5, r6, pc}
    93fa:	bf00      	nop
    93fc:	2001c364 	.word	0x2001c364

00009400 <k_sched_unlock>:
{
    9400:	b510      	push	{r4, lr}
	__asm__ volatile(
    9402:	f04f 0320 	mov.w	r3, #32
    9406:	f3ef 8411 	mrs	r4, BASEPRI
    940a:	f383 8812 	msr	BASEPRI_MAX, r3
    940e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    9412:	4b08      	ldr	r3, [pc, #32]	; (9434 <k_sched_unlock+0x34>)
		update_cache(0);
    9414:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    9416:	689a      	ldr	r2, [r3, #8]
    9418:	7bd3      	ldrb	r3, [r2, #15]
    941a:	3301      	adds	r3, #1
    941c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    941e:	f7ff feb9 	bl	9194 <update_cache>
	__asm__ volatile(
    9422:	f384 8811 	msr	BASEPRI, r4
    9426:	f3bf 8f6f 	isb	sy
}
    942a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    942e:	f004 bc1b 	b.w	dc68 <z_reschedule_unlocked>
    9432:	bf00      	nop
    9434:	2001c364 	.word	0x2001c364

00009438 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    9438:	4b02      	ldr	r3, [pc, #8]	; (9444 <z_sched_init+0xc>)
    943a:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
    943e:	e9c3 2206 	strd	r2, r2, [r3, #24]

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    9442:	4770      	bx	lr
    9444:	2001c364 	.word	0x2001c364

00009448 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    9448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    944a:	f04f 0320 	mov.w	r3, #32
    944e:	f3ef 8511 	mrs	r5, BASEPRI
    9452:	f383 8812 	msr	BASEPRI_MAX, r3
    9456:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    945a:	491a      	ldr	r1, [pc, #104]	; (94c4 <z_impl_k_yield+0x7c>)
    945c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    945e:	7b43      	ldrb	r3, [r0, #13]
    9460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9464:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9466:	f004 fbbd 	bl	dbe4 <sys_dlist_remove>
	return list->head == list;
    946a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    946c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    946e:	7b5a      	ldrb	r2, [r3, #13]
    9470:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9474:	735a      	strb	r2, [r3, #13]
    9476:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    947a:	4282      	cmp	r2, r0
    947c:	d01c      	beq.n	94b8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    947e:	b1da      	cbz	r2, 94b8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    9480:	69cf      	ldr	r7, [r1, #28]
	int32_t b1 = thread_1->base.prio;
    9482:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    9486:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    948a:	42a6      	cmp	r6, r4
    948c:	d00f      	beq.n	94ae <z_impl_k_yield+0x66>
		return b2 - b1;
    948e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9490:	2c00      	cmp	r4, #0
    9492:	dd0c      	ble.n	94ae <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    9494:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    9496:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    949a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    949c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    949e:	2001      	movs	r0, #1
    94a0:	f7ff fe78 	bl	9194 <update_cache>
    94a4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    94a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    94aa:	f7fa bb77 	b.w	3b9c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    94ae:	42ba      	cmp	r2, r7
    94b0:	d002      	beq.n	94b8 <z_impl_k_yield+0x70>
    94b2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    94b4:	2a00      	cmp	r2, #0
    94b6:	d1e6      	bne.n	9486 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    94b8:	69ca      	ldr	r2, [r1, #28]
	node->prev = tail;
    94ba:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    94be:	6013      	str	r3, [r2, #0]
	list->tail = node;
    94c0:	61cb      	str	r3, [r1, #28]
}
    94c2:	e7ec      	b.n	949e <z_impl_k_yield+0x56>
    94c4:	2001c364 	.word	0x2001c364

000094c8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    94c8:	ea50 0301 	orrs.w	r3, r0, r1
{
    94cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94d0:	4605      	mov	r5, r0
    94d2:	460e      	mov	r6, r1
	if (ticks == 0) {
    94d4:	d103      	bne.n	94de <z_tick_sleep+0x16>
	z_impl_k_yield();
    94d6:	f7ff ffb7 	bl	9448 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    94da:	2000      	movs	r0, #0
    94dc:	e031      	b.n	9542 <z_tick_sleep+0x7a>
	if (Z_TICK_ABS(ticks) <= 0) {
    94de:	f06f 0401 	mvn.w	r4, #1
    94e2:	f04f 33ff 	mov.w	r3, #4294967295
    94e6:	1a24      	subs	r4, r4, r0
    94e8:	eb63 0301 	sbc.w	r3, r3, r1
    94ec:	2c01      	cmp	r4, #1
    94ee:	f173 0300 	sbcs.w	r3, r3, #0
    94f2:	da02      	bge.n	94fa <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    94f4:	f004 fc7f 	bl	ddf6 <sys_clock_tick_get_32>
    94f8:	1944      	adds	r4, r0, r5
    94fa:	f04f 0320 	mov.w	r3, #32
    94fe:	f3ef 8811 	mrs	r8, BASEPRI
    9502:	f383 8812 	msr	BASEPRI_MAX, r3
    9506:	f3bf 8f6f 	isb	sy
	unready_thread(_current);
    950a:	4f0f      	ldr	r7, [pc, #60]	; (9548 <z_tick_sleep+0x80>)
    950c:	68b8      	ldr	r0, [r7, #8]
    950e:	f7ff feaf 	bl	9270 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9512:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9514:	490d      	ldr	r1, [pc, #52]	; (954c <z_tick_sleep+0x84>)
    9516:	462a      	mov	r2, r5
    9518:	4633      	mov	r3, r6
    951a:	3018      	adds	r0, #24
    951c:	f000 f906 	bl	972c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9520:	68ba      	ldr	r2, [r7, #8]
    9522:	4640      	mov	r0, r8
    9524:	7b53      	ldrb	r3, [r2, #13]
    9526:	f043 0310 	orr.w	r3, r3, #16
    952a:	7353      	strb	r3, [r2, #13]
    952c:	f7fa fb36 	bl	3b9c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9530:	f004 fc61 	bl	ddf6 <sys_clock_tick_get_32>
    9534:	1a20      	subs	r0, r4, r0
    9536:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    953a:	2801      	cmp	r0, #1
    953c:	f173 0300 	sbcs.w	r3, r3, #0
    9540:	dbcb      	blt.n	94da <z_tick_sleep+0x12>
}
    9542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9546:	bf00      	nop
    9548:	2001c364 	.word	0x2001c364
    954c:	0000dca9 	.word	0x0000dca9

00009550 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9550:	f1b1 3fff 	cmp.w	r1, #4294967295
    9554:	bf08      	it	eq
    9556:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    955a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    955c:	d106      	bne.n	956c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    955e:	4b08      	ldr	r3, [pc, #32]	; (9580 <z_impl_k_sleep+0x30>)
    9560:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9562:	f7ff ff1b 	bl	939c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    9566:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    956a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    956c:	f7ff ffac 	bl	94c8 <z_tick_sleep>
    9570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9574:	fb80 0303 	smull	r0, r3, r0, r3
    9578:	0bc0      	lsrs	r0, r0, #15
    957a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    957e:	e7f4      	b.n	956a <z_impl_k_sleep+0x1a>
    9580:	2001c364 	.word	0x2001c364

00009584 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9584:	4b01      	ldr	r3, [pc, #4]	; (958c <z_impl_z_current_get+0x8>)
    9586:	6898      	ldr	r0, [r3, #8]
    9588:	4770      	bx	lr
    958a:	bf00      	nop
    958c:	2001c364 	.word	0x2001c364

00009590 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9594:	4604      	mov	r4, r0
    9596:	f04f 0320 	mov.w	r3, #32
    959a:	f3ef 8611 	mrs	r6, BASEPRI
    959e:	f383 8812 	msr	BASEPRI_MAX, r3
    95a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    95a6:	7b03      	ldrb	r3, [r0, #12]
    95a8:	07d9      	lsls	r1, r3, #31
    95aa:	d50b      	bpl.n	95c4 <z_thread_abort+0x34>
	__asm__ volatile(
    95ac:	f386 8811 	msr	BASEPRI, r6
    95b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    95b4:	4040      	eors	r0, r0
    95b6:	f380 8811 	msr	BASEPRI, r0
    95ba:	f04f 0004 	mov.w	r0, #4
    95be:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    95c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    95c4:	7b43      	ldrb	r3, [r0, #13]
    95c6:	071a      	lsls	r2, r3, #28
    95c8:	d504      	bpl.n	95d4 <z_thread_abort+0x44>
    95ca:	f386 8811 	msr	BASEPRI, r6
    95ce:	f3bf 8f6f 	isb	sy
    95d2:	e7f5      	b.n	95c0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    95d4:	f023 0220 	bic.w	r2, r3, #32
    95d8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    95dc:	09d2      	lsrs	r2, r2, #7
    95de:	d120      	bne.n	9622 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    95e0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    95e2:	68a3      	ldr	r3, [r4, #8]
    95e4:	b113      	cbz	r3, 95ec <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    95e6:	4620      	mov	r0, r4
    95e8:	f004 fb04 	bl	dbf4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    95ec:	f104 0018 	add.w	r0, r4, #24
    95f0:	f004 fbeb 	bl	ddca <z_abort_timeout>
    95f4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    95f8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    95fc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    95fe:	42bd      	cmp	r5, r7
    9600:	d000      	beq.n	9604 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9602:	b9b5      	cbnz	r5, 9632 <z_thread_abort+0xa2>
		update_cache(1);
    9604:	2001      	movs	r0, #1
    9606:	f7ff fdc5 	bl	9194 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    960a:	4b10      	ldr	r3, [pc, #64]	; (964c <z_thread_abort+0xbc>)
    960c:	689b      	ldr	r3, [r3, #8]
    960e:	42a3      	cmp	r3, r4
    9610:	d1db      	bne.n	95ca <z_thread_abort+0x3a>
    9612:	f3ef 8305 	mrs	r3, IPSR
    9616:	2b00      	cmp	r3, #0
    9618:	d1d7      	bne.n	95ca <z_thread_abort+0x3a>
    961a:	4630      	mov	r0, r6
    961c:	f7fa fabe 	bl	3b9c <arch_swap>
	return ret;
    9620:	e7d3      	b.n	95ca <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9622:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9626:	f043 0308 	orr.w	r3, r3, #8
    962a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    962c:	f004 fada 	bl	dbe4 <sys_dlist_remove>
}
    9630:	e7d7      	b.n	95e2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    9632:	4628      	mov	r0, r5
    9634:	f004 fade 	bl	dbf4 <unpend_thread_no_timeout>
    9638:	f105 0018 	add.w	r0, r5, #24
    963c:	f004 fbc5 	bl	ddca <z_abort_timeout>
		ready_thread(thread);
    9640:	4628      	mov	r0, r5
    9642:	f8c5 8074 	str.w	r8, [r5, #116]	; 0x74
    9646:	f7ff fdbf 	bl	91c8 <ready_thread>
    964a:	e7d7      	b.n	95fc <z_thread_abort+0x6c>
    964c:	2001c364 	.word	0x2001c364

00009650 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    9650:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9652:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    9656:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9658:	e9cd 6700 	strd	r6, r7, [sp]
    965c:	f7ff fe46 	bl	92ec <z_pend_curr>

	if (data != NULL) {
    9660:	b11c      	cbz	r4, 966a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    9662:	4b03      	ldr	r3, [pc, #12]	; (9670 <z_sched_wait+0x20>)
    9664:	689b      	ldr	r3, [r3, #8]
    9666:	695b      	ldr	r3, [r3, #20]
    9668:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    966a:	b002      	add	sp, #8
    966c:	bdd0      	pop	{r4, r6, r7, pc}
    966e:	bf00      	nop
    9670:	2001c364 	.word	0x2001c364

00009674 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9674:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9676:	4806      	ldr	r0, [pc, #24]	; (9690 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9678:	4a06      	ldr	r2, [pc, #24]	; (9694 <z_data_copy+0x20>)
    967a:	4907      	ldr	r1, [pc, #28]	; (9698 <z_data_copy+0x24>)
    967c:	1a12      	subs	r2, r2, r0
    967e:	f004 f982 	bl	d986 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9686:	4a05      	ldr	r2, [pc, #20]	; (969c <z_data_copy+0x28>)
    9688:	4905      	ldr	r1, [pc, #20]	; (96a0 <z_data_copy+0x2c>)
    968a:	4806      	ldr	r0, [pc, #24]	; (96a4 <z_data_copy+0x30>)
    968c:	f004 b97b 	b.w	d986 <z_early_memcpy>
    9690:	2000a000 	.word	0x2000a000
    9694:	2000a438 	.word	0x2000a438
    9698:	0000ec24 	.word	0x0000ec24
    969c:	00000000 	.word	0x00000000
    96a0:	0000ec24 	.word	0x0000ec24
    96a4:	2000a000 	.word	0x2000a000

000096a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    96a8:	4b03      	ldr	r3, [pc, #12]	; (96b8 <elapsed+0x10>)
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	b90b      	cbnz	r3, 96b2 <elapsed+0xa>
    96ae:	f7fc bbb1 	b.w	5e14 <sys_clock_elapsed>
}
    96b2:	2000      	movs	r0, #0
    96b4:	4770      	bx	lr
    96b6:	bf00      	nop
    96b8:	2001c38c 	.word	0x2001c38c

000096bc <next_timeout>:
	return list->head == list;
    96bc:	4b0d      	ldr	r3, [pc, #52]	; (96f4 <next_timeout+0x38>)

static int32_t next_timeout(void)
{
    96be:	b510      	push	{r4, lr}
    96c0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96c2:	429c      	cmp	r4, r3
    96c4:	bf08      	it	eq
    96c6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    96c8:	f7ff ffee 	bl	96a8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    96cc:	b174      	cbz	r4, 96ec <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    96ce:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    96d2:	1a1b      	subs	r3, r3, r0
    96d4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    96d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    96dc:	f170 0200 	sbcs.w	r2, r0, #0
    96e0:	da04      	bge.n	96ec <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    96e2:	2800      	cmp	r0, #0
    96e4:	bfac      	ite	ge
    96e6:	4618      	movge	r0, r3
    96e8:	2000      	movlt	r0, #0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    96ea:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    96ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    96f0:	e7fb      	b.n	96ea <next_timeout+0x2e>
    96f2:	bf00      	nop
    96f4:	2000a1dc 	.word	0x2000a1dc

000096f8 <remove_timeout>:
{
    96f8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    96fa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    96fc:	b168      	cbz	r0, 971a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    96fe:	4a0a      	ldr	r2, [pc, #40]	; (9728 <remove_timeout+0x30>)
    9700:	6852      	ldr	r2, [r2, #4]
    9702:	4290      	cmp	r0, r2
    9704:	d009      	beq.n	971a <remove_timeout+0x22>
	if (next(t) != NULL) {
    9706:	b143      	cbz	r3, 971a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9708:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    970c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9710:	1912      	adds	r2, r2, r4
    9712:	eb41 0105 	adc.w	r1, r1, r5
    9716:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    971a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    971c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    971e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9720:	2300      	movs	r3, #0
	node->prev = NULL;
    9722:	e9c0 3300 	strd	r3, r3, [r0]
}
    9726:	bd30      	pop	{r4, r5, pc}
    9728:	2000a1dc 	.word	0x2000a1dc

0000972c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    972c:	f1b3 3fff 	cmp.w	r3, #4294967295
    9730:	bf08      	it	eq
    9732:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    9736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9738:	4604      	mov	r4, r0
    973a:	461f      	mov	r7, r3
    973c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    973e:	d062      	beq.n	9806 <z_add_timeout+0xda>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    9740:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    9742:	f04f 0320 	mov.w	r3, #32
    9746:	f3ef 8611 	mrs	r6, BASEPRI
    974a:	f383 8812 	msr	BASEPRI_MAX, r3
    974e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    9752:	f06f 0201 	mvn.w	r2, #1
    9756:	f04f 3cff 	mov.w	ip, #4294967295
    975a:	1b53      	subs	r3, r2, r5
    975c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9760:	2b00      	cmp	r3, #0
    9762:	db1b      	blt.n	979c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9764:	4b28      	ldr	r3, [pc, #160]	; (9808 <z_add_timeout+0xdc>)
    9766:	e9d3 1300 	ldrd	r1, r3, [r3]
    976a:	1a52      	subs	r2, r2, r1
    976c:	eb6c 0303 	sbc.w	r3, ip, r3
    9770:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    9772:	eb63 0307 	sbc.w	r3, r3, r7
    9776:	2d01      	cmp	r5, #1
    9778:	f173 0200 	sbcs.w	r2, r3, #0
    977c:	bfbc      	itt	lt
    977e:	2501      	movlt	r5, #1
    9780:	2300      	movlt	r3, #0
    9782:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    9786:	4821      	ldr	r0, [pc, #132]	; (980c <z_add_timeout+0xe0>)
	sys_dnode_t *const tail = list->tail;
    9788:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    978c:	4283      	cmp	r3, r0
    978e:	d118      	bne.n	97c2 <z_add_timeout+0x96>
	node->prev = tail;
    9790:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    9794:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    9798:	6044      	str	r4, [r0, #4]
}
    979a:	e026      	b.n	97ea <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    979c:	f7ff ff84 	bl	96a8 <elapsed>
    97a0:	3501      	adds	r5, #1
    97a2:	f147 0700 	adc.w	r7, r7, #0
    97a6:	182d      	adds	r5, r5, r0
    97a8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    97ac:	e9c4 5704 	strd	r5, r7, [r4, #16]
    97b0:	e7e9      	b.n	9786 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    97b2:	1a52      	subs	r2, r2, r1
    97b4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    97b8:	459c      	cmp	ip, r3
    97ba:	e9c4 2504 	strd	r2, r5, [r4, #16]
    97be:	d0e7      	beq.n	9790 <z_add_timeout+0x64>
    97c0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    97c2:	2b00      	cmp	r3, #0
    97c4:	d0e4      	beq.n	9790 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    97c6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    97ca:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    97ce:	428a      	cmp	r2, r1
    97d0:	eb75 0e07 	sbcs.w	lr, r5, r7
    97d4:	daed      	bge.n	97b2 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    97d6:	1a8a      	subs	r2, r1, r2
    97d8:	eb67 0505 	sbc.w	r5, r7, r5
    97dc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    97e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    97e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    97e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    97e8:	605c      	str	r4, [r3, #4]
	return list->head == list;
    97ea:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    97ec:	4283      	cmp	r3, r0
    97ee:	d006      	beq.n	97fe <z_add_timeout+0xd2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    97f0:	429c      	cmp	r4, r3
    97f2:	d104      	bne.n	97fe <z_add_timeout+0xd2>
			if (next_time == 0 ||
			    _current_cpu->slice_ticks != next_time) {
				sys_clock_set_timeout(next_time, false);
			}
#else
			sys_clock_set_timeout(next_timeout(), false);
    97f4:	f7ff ff62 	bl	96bc <next_timeout>
    97f8:	2100      	movs	r1, #0
    97fa:	f7fc fadb 	bl	5db4 <sys_clock_set_timeout>
	__asm__ volatile(
    97fe:	f386 8811 	msr	BASEPRI, r6
    9802:	f3bf 8f6f 	isb	sy
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9808:	2000a678 	.word	0x2000a678
    980c:	2000a1dc 	.word	0x2000a1dc

00009810 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    9810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
    9814:	f04f 0320 	mov.w	r3, #32
    9818:	f3ef 8511 	mrs	r5, BASEPRI
    981c:	f383 8812 	msr	BASEPRI_MAX, r3
    9820:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9824:	4f24      	ldr	r7, [pc, #144]	; (98b8 <sys_clock_announce+0xa8>)
	return list->head == list;
    9826:	f8df 8094 	ldr.w	r8, [pc, #148]	; 98bc <sys_clock_announce+0xac>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    982a:	4e25      	ldr	r6, [pc, #148]	; (98c0 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    982c:	6038      	str	r0, [r7, #0]
    982e:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9832:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9834:	4540      	cmp	r0, r8
    9836:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
    983a:	e9d6 2e00 	ldrd	r2, lr, [r6]
    983e:	d00b      	beq.n	9858 <sys_clock_announce+0x48>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9840:	b150      	cbz	r0, 9858 <sys_clock_announce+0x48>
    9842:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    9846:	42a3      	cmp	r3, r4
    9848:	eb71 090c 	sbcs.w	r9, r1, ip
    984c:	da16      	bge.n	987c <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    984e:	1ae4      	subs	r4, r4, r3
    9850:	eb6c 0c01 	sbc.w	ip, ip, r1
    9854:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    9858:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    985a:	189b      	adds	r3, r3, r2
    985c:	eb4e 0101 	adc.w	r1, lr, r1
    9860:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    9864:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9866:	f7ff ff29 	bl	96bc <next_timeout>
    986a:	4621      	mov	r1, r4
    986c:	f7fc faa2 	bl	5db4 <sys_clock_set_timeout>
	__asm__ volatile(
    9870:	f385 8811 	msr	BASEPRI, r5
    9874:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    987c:	18a2      	adds	r2, r4, r2
    987e:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
    9882:	2300      	movs	r3, #0
		curr_tick += dt;
    9884:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    9888:	2200      	movs	r2, #0
    988a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    988e:	f7ff ff33 	bl	96f8 <remove_timeout>
    9892:	f385 8811 	msr	BASEPRI, r5
    9896:	f3bf 8f6f 	isb	sy
		t->fn(t);
    989a:	6883      	ldr	r3, [r0, #8]
    989c:	4798      	blx	r3
	__asm__ volatile(
    989e:	f04f 0320 	mov.w	r3, #32
    98a2:	f3ef 8511 	mrs	r5, BASEPRI
    98a6:	f383 8812 	msr	BASEPRI_MAX, r3
    98aa:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    98ae:	683b      	ldr	r3, [r7, #0]
    98b0:	1b1b      	subs	r3, r3, r4
    98b2:	603b      	str	r3, [r7, #0]
    98b4:	e7bb      	b.n	982e <sys_clock_announce+0x1e>
    98b6:	bf00      	nop
    98b8:	2001c38c 	.word	0x2001c38c
    98bc:	2000a1dc 	.word	0x2000a1dc
    98c0:	2000a678 	.word	0x2000a678

000098c4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    98c4:	b510      	push	{r4, lr}
    98c6:	f04f 0320 	mov.w	r3, #32
    98ca:	f3ef 8411 	mrs	r4, BASEPRI
    98ce:	f383 8812 	msr	BASEPRI_MAX, r3
    98d2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    98d6:	f7ff fee7 	bl	96a8 <elapsed>
    98da:	4601      	mov	r1, r0
    98dc:	4b05      	ldr	r3, [pc, #20]	; (98f4 <sys_clock_tick_get+0x30>)
    98de:	e9d3 0300 	ldrd	r0, r3, [r3]
    98e2:	1808      	adds	r0, r1, r0
    98e4:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    98e8:	f384 8811 	msr	BASEPRI, r4
    98ec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    98f0:	bd10      	pop	{r4, pc}
    98f2:	bf00      	nop
    98f4:	2000a678 	.word	0x2000a678

000098f8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    98f8:	b570      	push	{r4, r5, r6, lr}
    98fa:	4604      	mov	r4, r0
	__asm__ volatile(
    98fc:	f04f 0320 	mov.w	r3, #32
    9900:	f3ef 8511 	mrs	r5, BASEPRI
    9904:	f383 8812 	msr	BASEPRI_MAX, r3
    9908:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    990c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    9910:	3301      	adds	r3, #1
    9912:	f142 0200 	adc.w	r2, r2, #0
    9916:	2b02      	cmp	r3, #2
    9918:	f172 0300 	sbcs.w	r3, r2, #0
    991c:	d322      	bcc.n	9964 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    991e:	f004 fa6e 	bl	ddfe <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    9922:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    9926:	3001      	adds	r0, #1
    9928:	f141 0100 	adc.w	r1, r1, #0
    992c:	18c0      	adds	r0, r0, r3
    992e:	eb41 0102 	adc.w	r1, r1, r2
    9932:	2801      	cmp	r0, #1
    9934:	f171 0300 	sbcs.w	r3, r1, #0
    9938:	db32      	blt.n	99a0 <z_timer_expiration_handler+0xa8>
    993a:	f004 fa60 	bl	ddfe <z_impl_k_uptime_ticks>
    993e:	3001      	adds	r0, #1
    9940:	f141 0300 	adc.w	r3, r1, #0
    9944:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    9948:	1880      	adds	r0, r0, r2
    994a:	f06f 0201 	mvn.w	r2, #1
    994e:	eb43 0301 	adc.w	r3, r3, r1
    9952:	f04f 31ff 	mov.w	r1, #4294967295
    9956:	1a12      	subs	r2, r2, r0
    9958:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    995c:	4620      	mov	r0, r4
    995e:	491a      	ldr	r1, [pc, #104]	; (99c8 <z_timer_expiration_handler+0xd0>)
    9960:	f7ff fee4 	bl	972c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    9964:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9966:	3301      	adds	r3, #1
    9968:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    996a:	6a23      	ldr	r3, [r4, #32]
    996c:	b173      	cbz	r3, 998c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    996e:	f385 8811 	msr	BASEPRI, r5
    9972:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9976:	4620      	mov	r0, r4
    9978:	6a23      	ldr	r3, [r4, #32]
    997a:	4798      	blx	r3
	__asm__ volatile(
    997c:	f04f 0320 	mov.w	r3, #32
    9980:	f3ef 8511 	mrs	r5, BASEPRI
    9984:	f383 8812 	msr	BASEPRI_MAX, r3
    9988:	f3bf 8f6f 	isb	sy
	return list->head == list;
    998c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9990:	42a6      	cmp	r6, r4
    9992:	d000      	beq.n	9996 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9994:	b94e      	cbnz	r6, 99aa <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    9996:	f385 8811 	msr	BASEPRI, r5
    999a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    999e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    99a0:	f06f 0201 	mvn.w	r2, #1
    99a4:	f04f 33ff 	mov.w	r3, #4294967295
    99a8:	e7d8      	b.n	995c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    99aa:	4630      	mov	r0, r6
    99ac:	f004 f92c 	bl	dc08 <z_unpend_thread_no_timeout>
    99b0:	2300      	movs	r3, #0
    99b2:	6773      	str	r3, [r6, #116]	; 0x74
    99b4:	f385 8811 	msr	BASEPRI, r5
    99b8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    99bc:	4630      	mov	r0, r6
}
    99be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    99c2:	f004 b961 	b.w	dc88 <z_ready_thread>
    99c6:	bf00      	nop
    99c8:	000098f9 	.word	0x000098f9

000099cc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    99cc:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    99ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    99d2:	bf08      	it	eq
    99d4:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    99d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99dc:	4606      	mov	r6, r0
    99de:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    99e2:	461c      	mov	r4, r3
    99e4:	4689      	mov	r9, r1
    99e6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    99e8:	d03e      	beq.n	9a68 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    99ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    99ee:	bf08      	it	eq
    99f0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    99f4:	4615      	mov	r5, r2
    99f6:	4607      	mov	r7, r0
    99f8:	d014      	beq.n	9a24 <z_impl_k_timer_start+0x58>
    99fa:	ea50 0302 	orrs.w	r3, r0, r2
    99fe:	d011      	beq.n	9a24 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    9a00:	f06f 0301 	mvn.w	r3, #1
    9a04:	1a9b      	subs	r3, r3, r2
    9a06:	f04f 33ff 	mov.w	r3, #4294967295
    9a0a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9a0e:	2b00      	cmp	r3, #0
    9a10:	da08      	bge.n	9a24 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    9a12:	2a02      	cmp	r2, #2
    9a14:	f170 0300 	sbcs.w	r3, r0, #0
    9a18:	bfbc      	itt	lt
    9a1a:	2502      	movlt	r5, #2
    9a1c:	2700      	movlt	r7, #0
    9a1e:	3d01      	subs	r5, #1
    9a20:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    9a24:	f06f 0301 	mvn.w	r3, #1
    9a28:	1a5b      	subs	r3, r3, r1
    9a2a:	f04f 33ff 	mov.w	r3, #4294967295
    9a2e:	eb63 0304 	sbc.w	r3, r3, r4
    9a32:	2b00      	cmp	r3, #0
    9a34:	da09      	bge.n	9a4a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9a36:	2901      	cmp	r1, #1
    9a38:	f174 0300 	sbcs.w	r3, r4, #0
    9a3c:	bfbc      	itt	lt
    9a3e:	2101      	movlt	r1, #1
    9a40:	2400      	movlt	r4, #0
    9a42:	f111 39ff 	adds.w	r9, r1, #4294967295
    9a46:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    9a4a:	4630      	mov	r0, r6
    9a4c:	f004 f9bd 	bl	ddca <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    9a50:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9a52:	464a      	mov	r2, r9
	timer->status = 0U;
    9a54:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9a56:	4630      	mov	r0, r6
    9a58:	4643      	mov	r3, r8
	timer->period = period;
    9a5a:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28
		     duration);
}
    9a5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9a62:	4902      	ldr	r1, [pc, #8]	; (9a6c <z_impl_k_timer_start+0xa0>)
    9a64:	f7ff be62 	b.w	972c <z_add_timeout>
}
    9a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a6c:	000098f9 	.word	0x000098f9

00009a70 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    9a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9a72:	4606      	mov	r6, r0
    9a74:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    9a76:	f003 ffcc 	bl	da12 <k_is_in_isr>
    9a7a:	b978      	cbnz	r0, 9a9c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    9a7c:	4b0b      	ldr	r3, [pc, #44]	; (9aac <z_thread_aligned_alloc+0x3c>)
    9a7e:	689b      	ldr	r3, [r3, #8]
    9a80:	6edc      	ldr	r4, [r3, #108]	; 0x6c
	}

	if (heap != NULL) {
    9a82:	b17c      	cbz	r4, 9aa4 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9a84:	1d2a      	adds	r2, r5, #4
    9a86:	d209      	bcs.n	9a9c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    9a88:	2000      	movs	r0, #0
    9a8a:	2100      	movs	r1, #0
    9a8c:	e9cd 0100 	strd	r0, r1, [sp]
    9a90:	4620      	mov	r0, r4
    9a92:	f046 0104 	orr.w	r1, r6, #4
    9a96:	f004 f9f3 	bl	de80 <k_heap_aligned_alloc>
	if (mem == NULL) {
    9a9a:	b908      	cbnz	r0, 9aa0 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    9a9c:	2400      	movs	r4, #0
	}

	return ret;
    9a9e:	e001      	b.n	9aa4 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    9aa0:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    9aa2:	1d04      	adds	r4, r0, #4
}
    9aa4:	4620      	mov	r0, r4
    9aa6:	b002      	add	sp, #8
    9aa8:	bd70      	pop	{r4, r5, r6, pc}
    9aaa:	bf00      	nop
    9aac:	2001c364 	.word	0x2001c364

00009ab0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9ab0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9ab2:	4c06      	ldr	r4, [pc, #24]	; (9acc <statics_init+0x1c>)
    9ab4:	4d06      	ldr	r5, [pc, #24]	; (9ad0 <statics_init+0x20>)
    9ab6:	42ac      	cmp	r4, r5
    9ab8:	d301      	bcc.n	9abe <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    9aba:	2000      	movs	r0, #0
    9abc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9abe:	4620      	mov	r0, r4
    9ac0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9ac4:	f004 f9d4 	bl	de70 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9ac8:	3414      	adds	r4, #20
    9aca:	e7f4      	b.n	9ab6 <statics_init+0x6>
    9acc:	2000a2bc 	.word	0x2000a2bc
    9ad0:	2000a2bc 	.word	0x2000a2bc

00009ad4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    9ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    9ad6:	2400      	movs	r4, #0
    9ad8:	4b08      	ldr	r3, [pc, #32]	; (9afc <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    9ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    9ade:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    9ae0:	ab02      	add	r3, sp, #8
    9ae2:	9300      	str	r3, [sp, #0]
    9ae4:	4906      	ldr	r1, [pc, #24]	; (9b00 <k_sys_work_q_init+0x2c>)
    9ae6:	f04f 33ff 	mov.w	r3, #4294967295
    9aea:	4806      	ldr	r0, [pc, #24]	; (9b04 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9aec:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9af0:	f7ff faf2 	bl	90d8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9af4:	4620      	mov	r0, r4
    9af6:	b004      	add	sp, #16
    9af8:	bd10      	pop	{r4, pc}
    9afa:	bf00      	nop
    9afc:	0000ec19 	.word	0x0000ec19
    9b00:	20061cc8 	.word	0x20061cc8
    9b04:	2000a680 	.word	0x2000a680

00009b08 <nrf_cc3xx_platform_init_no_rng>:
    9b08:	b510      	push	{r4, lr}
    9b0a:	4c0a      	ldr	r4, [pc, #40]	; (9b34 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9b0c:	6823      	ldr	r3, [r4, #0]
    9b0e:	b11b      	cbz	r3, 9b18 <nrf_cc3xx_platform_init_no_rng+0x10>
    9b10:	2301      	movs	r3, #1
    9b12:	2000      	movs	r0, #0
    9b14:	6023      	str	r3, [r4, #0]
    9b16:	bd10      	pop	{r4, pc}
    9b18:	f000 f8e6 	bl	9ce8 <CC_LibInitNoRng>
    9b1c:	2800      	cmp	r0, #0
    9b1e:	d0f7      	beq.n	9b10 <nrf_cc3xx_platform_init_no_rng+0x8>
    9b20:	3801      	subs	r0, #1
    9b22:	2807      	cmp	r0, #7
    9b24:	d803      	bhi.n	9b2e <nrf_cc3xx_platform_init_no_rng+0x26>
    9b26:	4b04      	ldr	r3, [pc, #16]	; (9b38 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9b28:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9b2c:	bd10      	pop	{r4, pc}
    9b2e:	4803      	ldr	r0, [pc, #12]	; (9b3c <nrf_cc3xx_platform_init_no_rng+0x34>)
    9b30:	bd10      	pop	{r4, pc}
    9b32:	bf00      	nop
    9b34:	2001c390 	.word	0x2001c390
    9b38:	0000e7c8 	.word	0x0000e7c8
    9b3c:	ffff8ffe 	.word	0xffff8ffe

00009b40 <nrf_cc3xx_platform_abort>:
    9b40:	f3bf 8f4f 	dsb	sy
    9b44:	4905      	ldr	r1, [pc, #20]	; (9b5c <nrf_cc3xx_platform_abort+0x1c>)
    9b46:	4b06      	ldr	r3, [pc, #24]	; (9b60 <nrf_cc3xx_platform_abort+0x20>)
    9b48:	68ca      	ldr	r2, [r1, #12]
    9b4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9b4e:	4313      	orrs	r3, r2
    9b50:	60cb      	str	r3, [r1, #12]
    9b52:	f3bf 8f4f 	dsb	sy
    9b56:	bf00      	nop
    9b58:	e7fd      	b.n	9b56 <nrf_cc3xx_platform_abort+0x16>
    9b5a:	bf00      	nop
    9b5c:	e000ed00 	.word	0xe000ed00
    9b60:	05fa0004 	.word	0x05fa0004

00009b64 <CC_PalAbort>:
    9b64:	b430      	push	{r4, r5}
    9b66:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    9b6a:	2500      	movs	r5, #0
    9b6c:	4b0b      	ldr	r3, [pc, #44]	; (9b9c <CC_PalAbort+0x38>)
    9b6e:	4c0c      	ldr	r4, [pc, #48]	; (9ba0 <CC_PalAbort+0x3c>)
    9b70:	490c      	ldr	r1, [pc, #48]	; (9ba4 <CC_PalAbort+0x40>)
    9b72:	6849      	ldr	r1, [r1, #4]
    9b74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9b78:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9b7c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    9b80:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    9b84:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    9b88:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    9b8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    9b90:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    9b94:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    9b98:	bc30      	pop	{r4, r5}
    9b9a:	4708      	bx	r1
    9b9c:	50845000 	.word	0x50845000
    9ba0:	50844000 	.word	0x50844000
    9ba4:	2000a1e4 	.word	0x2000a1e4

00009ba8 <nrf_cc3xx_platform_set_abort>:
    9ba8:	4b02      	ldr	r3, [pc, #8]	; (9bb4 <nrf_cc3xx_platform_set_abort+0xc>)
    9baa:	e9d0 1200 	ldrd	r1, r2, [r0]
    9bae:	e9c3 1200 	strd	r1, r2, [r3]
    9bb2:	4770      	bx	lr
    9bb4:	2000a1e4 	.word	0x2000a1e4

00009bb8 <mutex_free>:
    9bb8:	b510      	push	{r4, lr}
    9bba:	4604      	mov	r4, r0
    9bbc:	b130      	cbz	r0, 9bcc <mutex_free+0x14>
    9bbe:	6863      	ldr	r3, [r4, #4]
    9bc0:	06db      	lsls	r3, r3, #27
    9bc2:	d502      	bpl.n	9bca <mutex_free+0x12>
    9bc4:	2300      	movs	r3, #0
    9bc6:	6023      	str	r3, [r4, #0]
    9bc8:	6063      	str	r3, [r4, #4]
    9bca:	bd10      	pop	{r4, pc}
    9bcc:	4b02      	ldr	r3, [pc, #8]	; (9bd8 <mutex_free+0x20>)
    9bce:	4803      	ldr	r0, [pc, #12]	; (9bdc <mutex_free+0x24>)
    9bd0:	685b      	ldr	r3, [r3, #4]
    9bd2:	4798      	blx	r3
    9bd4:	e7f3      	b.n	9bbe <mutex_free+0x6>
    9bd6:	bf00      	nop
    9bd8:	2000a1e4 	.word	0x2000a1e4
    9bdc:	0000e7e8 	.word	0x0000e7e8

00009be0 <mutex_lock>:
    9be0:	b1b0      	cbz	r0, 9c10 <mutex_lock+0x30>
    9be2:	6843      	ldr	r3, [r0, #4]
    9be4:	b193      	cbz	r3, 9c0c <mutex_lock+0x2c>
    9be6:	06db      	lsls	r3, r3, #27
    9be8:	d50e      	bpl.n	9c08 <mutex_lock+0x28>
    9bea:	2301      	movs	r3, #1
    9bec:	e850 2f00 	ldrex	r2, [r0]
    9bf0:	4619      	mov	r1, r3
    9bf2:	e840 1c00 	strex	ip, r1, [r0]
    9bf6:	f09c 0f00 	teq	ip, #0
    9bfa:	d1f7      	bne.n	9bec <mutex_lock+0xc>
    9bfc:	2a01      	cmp	r2, #1
    9bfe:	d0f5      	beq.n	9bec <mutex_lock+0xc>
    9c00:	f3bf 8f5f 	dmb	sy
    9c04:	2000      	movs	r0, #0
    9c06:	4770      	bx	lr
    9c08:	4803      	ldr	r0, [pc, #12]	; (9c18 <mutex_lock+0x38>)
    9c0a:	4770      	bx	lr
    9c0c:	4803      	ldr	r0, [pc, #12]	; (9c1c <mutex_lock+0x3c>)
    9c0e:	4770      	bx	lr
    9c10:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9c14:	4770      	bx	lr
    9c16:	bf00      	nop
    9c18:	ffff8fe9 	.word	0xffff8fe9
    9c1c:	ffff8fea 	.word	0xffff8fea

00009c20 <mutex_unlock>:
    9c20:	4603      	mov	r3, r0
    9c22:	b168      	cbz	r0, 9c40 <mutex_unlock+0x20>
    9c24:	6842      	ldr	r2, [r0, #4]
    9c26:	b13a      	cbz	r2, 9c38 <mutex_unlock+0x18>
    9c28:	06d2      	lsls	r2, r2, #27
    9c2a:	d507      	bpl.n	9c3c <mutex_unlock+0x1c>
    9c2c:	f3bf 8f5f 	dmb	sy
    9c30:	2200      	movs	r2, #0
    9c32:	4610      	mov	r0, r2
    9c34:	601a      	str	r2, [r3, #0]
    9c36:	4770      	bx	lr
    9c38:	4803      	ldr	r0, [pc, #12]	; (9c48 <mutex_unlock+0x28>)
    9c3a:	4770      	bx	lr
    9c3c:	4803      	ldr	r0, [pc, #12]	; (9c4c <mutex_unlock+0x2c>)
    9c3e:	4770      	bx	lr
    9c40:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9c44:	4770      	bx	lr
    9c46:	bf00      	nop
    9c48:	ffff8fea 	.word	0xffff8fea
    9c4c:	ffff8fe9 	.word	0xffff8fe9

00009c50 <mutex_init>:
    9c50:	b510      	push	{r4, lr}
    9c52:	4604      	mov	r4, r0
    9c54:	b120      	cbz	r0, 9c60 <mutex_init+0x10>
    9c56:	2200      	movs	r2, #0
    9c58:	2311      	movs	r3, #17
    9c5a:	6022      	str	r2, [r4, #0]
    9c5c:	6063      	str	r3, [r4, #4]
    9c5e:	bd10      	pop	{r4, pc}
    9c60:	4801      	ldr	r0, [pc, #4]	; (9c68 <mutex_init+0x18>)
    9c62:	f7ff ff7f 	bl	9b64 <CC_PalAbort>
    9c66:	e7f6      	b.n	9c56 <mutex_init+0x6>
    9c68:	0000e810 	.word	0x0000e810

00009c6c <nrf_cc3xx_platform_set_mutexes>:
    9c6c:	b570      	push	{r4, r5, r6, lr}
    9c6e:	4c16      	ldr	r4, [pc, #88]	; (9cc8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9c70:	f8d0 c004 	ldr.w	ip, [r0, #4]
    9c74:	6806      	ldr	r6, [r0, #0]
    9c76:	f8c4 c004 	str.w	ip, [r4, #4]
    9c7a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    9c7e:	68c0      	ldr	r0, [r0, #12]
    9c80:	f8c4 c008 	str.w	ip, [r4, #8]
    9c84:	60e0      	str	r0, [r4, #12]
    9c86:	6026      	str	r6, [r4, #0]
    9c88:	6808      	ldr	r0, [r1, #0]
    9c8a:	4b10      	ldr	r3, [pc, #64]	; (9ccc <nrf_cc3xx_platform_set_mutexes+0x60>)
    9c8c:	4d10      	ldr	r5, [pc, #64]	; (9cd0 <nrf_cc3xx_platform_set_mutexes+0x64>)
    9c8e:	6018      	str	r0, [r3, #0]
    9c90:	6848      	ldr	r0, [r1, #4]
    9c92:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    9c96:	6058      	str	r0, [r3, #4]
    9c98:	6888      	ldr	r0, [r1, #8]
    9c9a:	6098      	str	r0, [r3, #8]
    9c9c:	68c8      	ldr	r0, [r1, #12]
    9c9e:	6909      	ldr	r1, [r1, #16]
    9ca0:	60d8      	str	r0, [r3, #12]
    9ca2:	6119      	str	r1, [r3, #16]
    9ca4:	06d3      	lsls	r3, r2, #27
    9ca6:	d50d      	bpl.n	9cc4 <nrf_cc3xx_platform_set_mutexes+0x58>
    9ca8:	2300      	movs	r3, #0
    9caa:	f505 708a 	add.w	r0, r5, #276	; 0x114
    9cae:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    9cb2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    9cb6:	47b0      	blx	r6
    9cb8:	6823      	ldr	r3, [r4, #0]
    9cba:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    9cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9cc2:	4718      	bx	r3
    9cc4:	bd70      	pop	{r4, r5, r6, pc}
    9cc6:	bf00      	nop
    9cc8:	2000a1f4 	.word	0x2000a1f4
    9ccc:	2000a204 	.word	0x2000a204
    9cd0:	2001c3a8 	.word	0x2001c3a8

00009cd4 <mbedtls_platform_zeroize>:
    9cd4:	b138      	cbz	r0, 9ce6 <mbedtls_platform_zeroize+0x12>
    9cd6:	b131      	cbz	r1, 9ce6 <mbedtls_platform_zeroize+0x12>
    9cd8:	2200      	movs	r2, #0
    9cda:	4401      	add	r1, r0
    9cdc:	4603      	mov	r3, r0
    9cde:	3001      	adds	r0, #1
    9ce0:	4288      	cmp	r0, r1
    9ce2:	701a      	strb	r2, [r3, #0]
    9ce4:	d1fa      	bne.n	9cdc <mbedtls_platform_zeroize+0x8>
    9ce6:	4770      	bx	lr

00009ce8 <CC_LibInitNoRng>:
    9ce8:	b508      	push	{r3, lr}
    9cea:	f000 f811 	bl	9d10 <CC_HalInit>
    9cee:	b930      	cbnz	r0, 9cfe <CC_LibInitNoRng+0x16>
    9cf0:	f000 f810 	bl	9d14 <CC_PalInit>
    9cf4:	b938      	cbnz	r0, 9d06 <CC_LibInitNoRng+0x1e>
    9cf6:	4a05      	ldr	r2, [pc, #20]	; (9d0c <CC_LibInitNoRng+0x24>)
    9cf8:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    9cfc:	bd08      	pop	{r3, pc}
    9cfe:	f000 f837 	bl	9d70 <CC_PalTerminate>
    9d02:	2003      	movs	r0, #3
    9d04:	bd08      	pop	{r3, pc}
    9d06:	2004      	movs	r0, #4
    9d08:	bd08      	pop	{r3, pc}
    9d0a:	bf00      	nop
    9d0c:	50845000 	.word	0x50845000

00009d10 <CC_HalInit>:
    9d10:	2000      	movs	r0, #0
    9d12:	4770      	bx	lr

00009d14 <CC_PalInit>:
    9d14:	b510      	push	{r4, lr}
    9d16:	4811      	ldr	r0, [pc, #68]	; (9d5c <CC_PalInit+0x48>)
    9d18:	f000 f848 	bl	9dac <CC_PalMutexCreate>
    9d1c:	b100      	cbz	r0, 9d20 <CC_PalInit+0xc>
    9d1e:	bd10      	pop	{r4, pc}
    9d20:	480f      	ldr	r0, [pc, #60]	; (9d60 <CC_PalInit+0x4c>)
    9d22:	f000 f843 	bl	9dac <CC_PalMutexCreate>
    9d26:	2800      	cmp	r0, #0
    9d28:	d1f9      	bne.n	9d1e <CC_PalInit+0xa>
    9d2a:	4c0e      	ldr	r4, [pc, #56]	; (9d64 <CC_PalInit+0x50>)
    9d2c:	4620      	mov	r0, r4
    9d2e:	f000 f83d 	bl	9dac <CC_PalMutexCreate>
    9d32:	2800      	cmp	r0, #0
    9d34:	d1f3      	bne.n	9d1e <CC_PalInit+0xa>
    9d36:	4b0c      	ldr	r3, [pc, #48]	; (9d68 <CC_PalInit+0x54>)
    9d38:	480c      	ldr	r0, [pc, #48]	; (9d6c <CC_PalInit+0x58>)
    9d3a:	601c      	str	r4, [r3, #0]
    9d3c:	f000 f836 	bl	9dac <CC_PalMutexCreate>
    9d40:	4601      	mov	r1, r0
    9d42:	2800      	cmp	r0, #0
    9d44:	d1eb      	bne.n	9d1e <CC_PalInit+0xa>
    9d46:	f000 f82d 	bl	9da4 <CC_PalDmaInit>
    9d4a:	4604      	mov	r4, r0
    9d4c:	b108      	cbz	r0, 9d52 <CC_PalInit+0x3e>
    9d4e:	4620      	mov	r0, r4
    9d50:	bd10      	pop	{r4, pc}
    9d52:	f000 f83f 	bl	9dd4 <CC_PalPowerSaveModeInit>
    9d56:	4620      	mov	r0, r4
    9d58:	e7fa      	b.n	9d50 <CC_PalInit+0x3c>
    9d5a:	bf00      	nop
    9d5c:	2000a23c 	.word	0x2000a23c
    9d60:	2000a230 	.word	0x2000a230
    9d64:	2000a238 	.word	0x2000a238
    9d68:	2000a240 	.word	0x2000a240
    9d6c:	2000a234 	.word	0x2000a234

00009d70 <CC_PalTerminate>:
    9d70:	b508      	push	{r3, lr}
    9d72:	4808      	ldr	r0, [pc, #32]	; (9d94 <CC_PalTerminate+0x24>)
    9d74:	f000 f824 	bl	9dc0 <CC_PalMutexDestroy>
    9d78:	4807      	ldr	r0, [pc, #28]	; (9d98 <CC_PalTerminate+0x28>)
    9d7a:	f000 f821 	bl	9dc0 <CC_PalMutexDestroy>
    9d7e:	4807      	ldr	r0, [pc, #28]	; (9d9c <CC_PalTerminate+0x2c>)
    9d80:	f000 f81e 	bl	9dc0 <CC_PalMutexDestroy>
    9d84:	4806      	ldr	r0, [pc, #24]	; (9da0 <CC_PalTerminate+0x30>)
    9d86:	f000 f81b 	bl	9dc0 <CC_PalMutexDestroy>
    9d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9d8e:	f000 b80b 	b.w	9da8 <CC_PalDmaTerminate>
    9d92:	bf00      	nop
    9d94:	2000a23c 	.word	0x2000a23c
    9d98:	2000a230 	.word	0x2000a230
    9d9c:	2000a238 	.word	0x2000a238
    9da0:	2000a234 	.word	0x2000a234

00009da4 <CC_PalDmaInit>:
    9da4:	2000      	movs	r0, #0
    9da6:	4770      	bx	lr

00009da8 <CC_PalDmaTerminate>:
    9da8:	4770      	bx	lr
    9daa:	bf00      	nop

00009dac <CC_PalMutexCreate>:
    9dac:	b508      	push	{r3, lr}
    9dae:	4b03      	ldr	r3, [pc, #12]	; (9dbc <CC_PalMutexCreate+0x10>)
    9db0:	6802      	ldr	r2, [r0, #0]
    9db2:	681b      	ldr	r3, [r3, #0]
    9db4:	6810      	ldr	r0, [r2, #0]
    9db6:	4798      	blx	r3
    9db8:	2000      	movs	r0, #0
    9dba:	bd08      	pop	{r3, pc}
    9dbc:	2000a1f4 	.word	0x2000a1f4

00009dc0 <CC_PalMutexDestroy>:
    9dc0:	b508      	push	{r3, lr}
    9dc2:	4b03      	ldr	r3, [pc, #12]	; (9dd0 <CC_PalMutexDestroy+0x10>)
    9dc4:	6802      	ldr	r2, [r0, #0]
    9dc6:	685b      	ldr	r3, [r3, #4]
    9dc8:	6810      	ldr	r0, [r2, #0]
    9dca:	4798      	blx	r3
    9dcc:	2000      	movs	r0, #0
    9dce:	bd08      	pop	{r3, pc}
    9dd0:	2000a1f4 	.word	0x2000a1f4

00009dd4 <CC_PalPowerSaveModeInit>:
    9dd4:	b570      	push	{r4, r5, r6, lr}
    9dd6:	4c09      	ldr	r4, [pc, #36]	; (9dfc <CC_PalPowerSaveModeInit+0x28>)
    9dd8:	4d09      	ldr	r5, [pc, #36]	; (9e00 <CC_PalPowerSaveModeInit+0x2c>)
    9dda:	6920      	ldr	r0, [r4, #16]
    9ddc:	68ab      	ldr	r3, [r5, #8]
    9dde:	4798      	blx	r3
    9de0:	b118      	cbz	r0, 9dea <CC_PalPowerSaveModeInit+0x16>
    9de2:	4b08      	ldr	r3, [pc, #32]	; (9e04 <CC_PalPowerSaveModeInit+0x30>)
    9de4:	4808      	ldr	r0, [pc, #32]	; (9e08 <CC_PalPowerSaveModeInit+0x34>)
    9de6:	685b      	ldr	r3, [r3, #4]
    9de8:	4798      	blx	r3
    9dea:	2100      	movs	r1, #0
    9dec:	4a07      	ldr	r2, [pc, #28]	; (9e0c <CC_PalPowerSaveModeInit+0x38>)
    9dee:	68eb      	ldr	r3, [r5, #12]
    9df0:	6011      	str	r1, [r2, #0]
    9df2:	6920      	ldr	r0, [r4, #16]
    9df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9df8:	4718      	bx	r3
    9dfa:	bf00      	nop
    9dfc:	2000a204 	.word	0x2000a204
    9e00:	2000a1f4 	.word	0x2000a1f4
    9e04:	2000a1e4 	.word	0x2000a1e4
    9e08:	0000e834 	.word	0x0000e834
    9e0c:	2001c3a4 	.word	0x2001c3a4

00009e10 <flash_device_base>:
    if (fd_id != FLASH_DEVICE_ID) {
    9e10:	b908      	cbnz	r0, 9e16 <flash_device_base+0x6>
    *ret = FLASH_DEVICE_BASE;
    9e12:	6008      	str	r0, [r1, #0]
    return 0;
    9e14:	4770      	bx	lr
        return -EINVAL;
    9e16:	f06f 0015 	mvn.w	r0, #21
}
    9e1a:	4770      	bx	lr

00009e1c <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    9e1c:	b121      	cbz	r1, 9e28 <flash_area_id_from_multi_image_slot+0xc>
    9e1e:	2901      	cmp	r1, #1
    9e20:	d007      	beq.n	9e32 <flash_area_id_from_multi_image_slot+0x16>
    9e22:	f06f 0015 	mvn.w	r0, #21
    9e26:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    9e28:	b148      	cbz	r0, 9e3e <flash_area_id_from_multi_image_slot+0x22>
    9e2a:	2801      	cmp	r0, #1
    9e2c:	bf18      	it	ne
    9e2e:	20ff      	movne	r0, #255	; 0xff
    9e30:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    9e32:	b130      	cbz	r0, 9e42 <flash_area_id_from_multi_image_slot+0x26>
    9e34:	2801      	cmp	r0, #1
    9e36:	bf14      	ite	ne
    9e38:	20ff      	movne	r0, #255	; 0xff
    9e3a:	200b      	moveq	r0, #11
    9e3c:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    9e3e:	2004      	movs	r0, #4
    9e40:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    9e42:	2002      	movs	r0, #2
}
    9e44:	4770      	bx	lr

00009e46 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    9e46:	2000      	movs	r0, #0
    9e48:	4770      	bx	lr

00009e4a <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    9e4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9e4e:	460e      	mov	r6, r1
    9e50:	4617      	mov	r7, r2
    9e52:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    9e54:	4604      	mov	r4, r0
    9e56:	b928      	cbnz	r0, 9e64 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    9e58:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    9e5c:	4640      	mov	r0, r8
    9e5e:	b003      	add	sp, #12
    9e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    9e64:	2900      	cmp	r1, #0
    9e66:	d0f7      	beq.n	9e58 <bootutil_tlv_iter_begin+0xe>
    9e68:	2a00      	cmp	r2, #0
    9e6a:	d0f5      	beq.n	9e58 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    9e6c:	68cb      	ldr	r3, [r1, #12]
    9e6e:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    9e70:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    9e72:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    9e74:	2304      	movs	r3, #4
    9e76:	4629      	mov	r1, r5
    9e78:	eb0d 0203 	add.w	r2, sp, r3
    9e7c:	f000 ffce 	bl	ae1c <flash_area_read>
    9e80:	4680      	mov	r8, r0
    9e82:	2800      	cmp	r0, #0
    9e84:	d1e8      	bne.n	9e58 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    9e86:	f646 1208 	movw	r2, #26888	; 0x6908
    9e8a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    9e8e:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    9e90:	4291      	cmp	r1, r2
    9e92:	d123      	bne.n	9edc <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    9e94:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9e98:	4299      	cmp	r1, r3
    9e9a:	d1dd      	bne.n	9e58 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    9e9c:	2304      	movs	r3, #4
    9e9e:	4638      	mov	r0, r7
    9ea0:	eb0d 0203 	add.w	r2, sp, r3
    9ea4:	4429      	add	r1, r5
    9ea6:	f000 ffb9 	bl	ae1c <flash_area_read>
    9eaa:	2800      	cmp	r0, #0
    9eac:	d1d4      	bne.n	9e58 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    9eae:	f646 1307 	movw	r3, #26887	; 0x6907
    9eb2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9eb6:	429a      	cmp	r2, r3
    9eb8:	d1ce      	bne.n	9e58 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    9eba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9ebe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    9ec2:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    9ec4:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    9ec6:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    9eca:	442b      	add	r3, r5
    9ecc:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    9ece:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9ed0:	4413      	add	r3, r2
    it->type = type;
    9ed2:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9ed6:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    9ed8:	6125      	str	r5, [r4, #16]
    return 0;
    9eda:	e7bf      	b.n	9e5c <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    9edc:	2b00      	cmp	r3, #0
    9ede:	d0e6      	beq.n	9eae <bootutil_tlv_iter_begin+0x64>
    9ee0:	e7ba      	b.n	9e58 <bootutil_tlv_iter_begin+0xe>

00009ee2 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    9ee2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9ee6:	460f      	mov	r7, r1
    9ee8:	4690      	mov	r8, r2
    9eea:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    9eec:	4604      	mov	r4, r0
    9eee:	b920      	cbnz	r0, 9efa <bootutil_tlv_iter_next+0x18>
        return -1;
    9ef0:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    9ef4:	b003      	add	sp, #12
    9ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    9efa:	6803      	ldr	r3, [r0, #0]
    9efc:	2b00      	cmp	r3, #0
    9efe:	d0f7      	beq.n	9ef0 <bootutil_tlv_iter_next+0xe>
    9f00:	6843      	ldr	r3, [r0, #4]
    9f02:	2b00      	cmp	r3, #0
    9f04:	d0f4      	beq.n	9ef0 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    9f06:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    9f0a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9f0e:	429a      	cmp	r2, r3
    9f10:	d216      	bcs.n	9f40 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    9f12:	6823      	ldr	r3, [r4, #0]
    9f14:	895b      	ldrh	r3, [r3, #10]
    9f16:	b123      	cbz	r3, 9f22 <bootutil_tlv_iter_next+0x40>
    9f18:	68e3      	ldr	r3, [r4, #12]
    9f1a:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    9f1c:	bf04      	itt	eq
    9f1e:	3304      	addeq	r3, #4
    9f20:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    9f22:	2304      	movs	r3, #4
    9f24:	6921      	ldr	r1, [r4, #16]
    9f26:	6860      	ldr	r0, [r4, #4]
    9f28:	eb0d 0203 	add.w	r2, sp, r3
    9f2c:	f000 ff76 	bl	ae1c <flash_area_read>
        if (rc) {
    9f30:	2800      	cmp	r0, #0
    9f32:	d1dd      	bne.n	9ef0 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    9f34:	7aa3      	ldrb	r3, [r4, #10]
    9f36:	6925      	ldr	r5, [r4, #16]
    9f38:	b123      	cbz	r3, 9f44 <bootutil_tlv_iter_next+0x62>
    9f3a:	68e3      	ldr	r3, [r4, #12]
    9f3c:	42ab      	cmp	r3, r5
    9f3e:	d801      	bhi.n	9f44 <bootutil_tlv_iter_next+0x62>
            return 1;
    9f40:	2001      	movs	r0, #1
    9f42:	e7d7      	b.n	9ef4 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    9f44:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    9f46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    9f4a:	4549      	cmp	r1, r9
    9f4c:	f102 0304 	add.w	r3, r2, #4
    9f50:	d003      	beq.n	9f5a <bootutil_tlv_iter_next+0x78>
    9f52:	f8bd c004 	ldrh.w	ip, [sp, #4]
    9f56:	458c      	cmp	ip, r1
    9f58:	d10b      	bne.n	9f72 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    9f5a:	b116      	cbz	r6, 9f62 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    9f5c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9f60:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    9f62:	3504      	adds	r5, #4
    9f64:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    9f66:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    9f6a:	6922      	ldr	r2, [r4, #16]
    9f6c:	4413      	add	r3, r2
    9f6e:	6123      	str	r3, [r4, #16]
            return 0;
    9f70:	e7c0      	b.n	9ef4 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    9f72:	442b      	add	r3, r5
    9f74:	6123      	str	r3, [r4, #16]
    9f76:	e7c8      	b.n	9f0a <bootutil_tlv_iter_next+0x28>

00009f78 <boot_fih_memequal>:
 */
#ifdef MCUBOOT_FIH_PROFILE_OFF
inline
fih_int boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
    return memcmp(s1, s2, n);
    9f78:	f001 ba9e 	b.w	b4b8 <memcmp>

00009f7c <boot_trailer_sz>:
}

uint32_t
boot_status_sz(uint32_t min_write_sz)
{
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    9f7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    9f80:	4358      	muls	r0, r3

uint32_t
boot_trailer_sz(uint32_t min_write_sz)
{
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
}
    9f82:	3030      	adds	r0, #48	; 0x30
    9f84:	4770      	bx	lr

00009f86 <boot_status_off>:
    return -1;
}

uint32_t
boot_status_off(const struct flash_area *fap)
{
    9f86:	b510      	push	{r4, lr}
    9f88:	4604      	mov	r4, r0
    uint32_t off_from_end;
    uint32_t elem_sz;

    elem_sz = flash_area_align(fap);
    9f8a:	f000 ff85 	bl	ae98 <flash_area_align>
    }
#endif

    assert(off_from_end <= flash_area_get_size(fap));
    return flash_area_get_size(fap) - off_from_end;
}
    9f8e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    return flash_area_get_size(fap) - off_from_end;
    9f92:	68a3      	ldr	r3, [r4, #8]
    9f94:	3b30      	subs	r3, #48	; 0x30
}
    9f96:	fb02 3010 	mls	r0, r2, r0, r3
    9f9a:	bd10      	pop	{r4, pc}

00009f9c <boot_initialize_area>:
{
    9f9c:	4603      	mov	r3, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    9f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
    9fa2:	b513      	push	{r0, r1, r4, lr}
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    9fa4:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    9fa8:	4608      	mov	r0, r1
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    9faa:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    9fac:	b1ac      	cbz	r4, 9fda <boot_initialize_area+0x3e>
    9fae:	2c01      	cmp	r4, #1
    9fb0:	d121      	bne.n	9ff6 <boot_initialize_area+0x5a>
    9fb2:	2901      	cmp	r1, #1
    9fb4:	d001      	beq.n	9fba <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    9fb6:	220b      	movs	r2, #11
    9fb8:	e012      	b.n	9fe0 <boot_initialize_area+0x44>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    9fba:	2158      	movs	r1, #88	; 0x58
    9fbc:	fb01 3204 	mla	r2, r1, r4, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    9fc0:	fb01 3304 	mla	r3, r1, r4, r3
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    9fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    9fc6:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9fca:	a901      	add	r1, sp, #4
    9fcc:	f7f8 fefc 	bl	2dc8 <flash_area_get_sectors>
    if (rc != 0) {
    9fd0:	b908      	cbnz	r0, 9fd6 <boot_initialize_area+0x3a>
    *out_num_sectors = num_sectors;
    9fd2:	9b01      	ldr	r3, [sp, #4]
    9fd4:	6023      	str	r3, [r4, #0]
}
    9fd6:	b002      	add	sp, #8
    9fd8:	bd10      	pop	{r4, pc}
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    9fda:	2904      	cmp	r1, #4
    9fdc:	d0ed      	beq.n	9fba <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    9fde:	2202      	movs	r2, #2
    9fe0:	4282      	cmp	r2, r0
    9fe2:	d10a      	bne.n	9ffa <boot_initialize_area+0x5e>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    9fe4:	2158      	movs	r1, #88	; 0x58
    9fe6:	fb01 3204 	mla	r2, r1, r4, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    9fea:	fb01 3304 	mla	r3, r1, r4, r3
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    9fee:	6d12      	ldr	r2, [r2, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    9ff0:	f103 0454 	add.w	r4, r3, #84	; 0x54
    9ff4:	e7e9      	b.n	9fca <boot_initialize_area+0x2e>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    9ff6:	29ff      	cmp	r1, #255	; 0xff
    9ff8:	d0df      	beq.n	9fba <boot_initialize_area+0x1e>
        return BOOT_EFLASH;
    9ffa:	2001      	movs	r0, #1
    9ffc:	e7eb      	b.n	9fd6 <boot_initialize_area+0x3a>

00009ffe <boot_read_sectors>:
{
    9ffe:	b538      	push	{r3, r4, r5, lr}
    image_index = BOOT_CURR_IMG(state);
    a000:	f890 50b8 	ldrb.w	r5, [r0, #184]	; 0xb8
{
    a004:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a006:	b1ed      	cbz	r5, a044 <boot_read_sectors+0x46>
    a008:	2d01      	cmp	r5, #1
    a00a:	bf0c      	ite	eq
    a00c:	2101      	moveq	r1, #1
    a00e:	21ff      	movne	r1, #255	; 0xff
    a010:	4620      	mov	r0, r4
    a012:	f7ff ffc3 	bl	9f9c <boot_initialize_area>
    if (rc != 0) {
    a016:	b9c8      	cbnz	r0, a04c <boot_read_sectors+0x4e>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a018:	b1b5      	cbz	r5, a048 <boot_read_sectors+0x4a>
    a01a:	2d01      	cmp	r5, #1
    a01c:	bf0c      	ite	eq
    a01e:	210b      	moveq	r1, #11
    a020:	21ff      	movne	r1, #255	; 0xff
    a022:	4620      	mov	r0, r4
    a024:	f7ff ffba 	bl	9f9c <boot_initialize_area>
    if (rc != 0) {
    a028:	4605      	mov	r5, r0
    a02a:	b988      	cbnz	r0, a050 <boot_read_sectors+0x52>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    a02c:	2258      	movs	r2, #88	; 0x58
    a02e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    a032:	fb02 4303 	mla	r3, r2, r3, r4
    a036:	6a18      	ldr	r0, [r3, #32]
    a038:	f000 ff2e 	bl	ae98 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    a03c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
}
    a040:	4628      	mov	r0, r5
    a042:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    a044:	2104      	movs	r1, #4
    a046:	e7e3      	b.n	a010 <boot_read_sectors+0x12>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    a048:	2102      	movs	r1, #2
    a04a:	e7ea      	b.n	a022 <boot_read_sectors+0x24>
        return BOOT_EFLASH;
    a04c:	2501      	movs	r5, #1
    a04e:	e7f7      	b.n	a040 <boot_read_sectors+0x42>
        return BOOT_EFLASH_SEC;
    a050:	2509      	movs	r5, #9
    a052:	e7f5      	b.n	a040 <boot_read_sectors+0x42>

0000a054 <boot_read_image_headers>:
{
    a054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a058:	4604      	mov	r4, r0
    a05a:	460d      	mov	r5, r1
    a05c:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a05e:	f04f 0900 	mov.w	r9, #0
    a062:	f04f 082c 	mov.w	r8, #44	; 0x2c
    a066:	2758      	movs	r7, #88	; 0x58
        rc = BOOT_HOOK_CALL(boot_read_image_header_hook, BOOT_HOOK_REGULAR,
    a068:	fb08 fa09 	mul.w	sl, r8, r9
    a06c:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    a070:	4649      	mov	r1, r9
    a072:	fb17 a200 	smlabb	r2, r7, r0, sl
    a076:	4422      	add	r2, r4
    a078:	f7fb ffae 	bl	5fd8 <boot_read_image_header_hook>
        if (rc == BOOT_HOOK_REGULAR)
    a07c:	2801      	cmp	r0, #1
    a07e:	d109      	bne.n	a094 <boot_read_image_headers+0x40>
    a080:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    a084:	4633      	mov	r3, r6
    a086:	fb17 a202 	smlabb	r2, r7, r2, sl
    a08a:	4649      	mov	r1, r9
    a08c:	4620      	mov	r0, r4
    a08e:	4422      	add	r2, r4
    a090:	f000 f825 	bl	a0de <boot_read_image_header>
        if (rc != 0) {
    a094:	b138      	cbz	r0, a0a6 <boot_read_image_headers+0x52>
            if (i > 0 && !require_all) {
    a096:	f1b9 0f00 	cmp.w	r9, #0
    a09a:	d002      	beq.n	a0a2 <boot_read_image_headers+0x4e>
                return 0;
    a09c:	2d00      	cmp	r5, #0
    a09e:	bf08      	it	eq
    a0a0:	2000      	moveq	r0, #0
}
    a0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    a0a6:	f1b9 0f00 	cmp.w	r9, #0
    a0aa:	d1fa      	bne.n	a0a2 <boot_read_image_headers+0x4e>
    a0ac:	f04f 0901 	mov.w	r9, #1
    a0b0:	e7da      	b.n	a068 <boot_read_image_headers+0x14>

0000a0b2 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    a0b2:	2301      	movs	r3, #1
    a0b4:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    a0b6:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    a0ba:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    a0bc:	2300      	movs	r3, #0
    bs->source = 0;
    a0be:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    a0c2:	4770      	bx	lr

0000a0c4 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    a0c4:	7943      	ldrb	r3, [r0, #5]
    a0c6:	2b01      	cmp	r3, #1
    a0c8:	d107      	bne.n	a0da <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    a0ca:	6803      	ldr	r3, [r0, #0]
    a0cc:	2b01      	cmp	r3, #1
    a0ce:	d104      	bne.n	a0da <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    a0d0:	7900      	ldrb	r0, [r0, #4]
    a0d2:	1e43      	subs	r3, r0, #1
    a0d4:	4258      	negs	r0, r3
    a0d6:	4158      	adcs	r0, r3
    a0d8:	4770      	bx	lr
    a0da:	2000      	movs	r0, #0
}
    a0dc:	4770      	bx	lr

0000a0de <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    a0de:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a0e0:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
{
    a0e4:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    a0e6:	f7ff fe99 	bl	9e1c <flash_area_id_from_multi_image_slot>

    rc = flash_area_open(area_id, &fap);
    a0ea:	a901      	add	r1, sp, #4
    a0ec:	b2c0      	uxtb	r0, r0
    a0ee:	f7f8 fe43 	bl	2d78 <flash_area_open>
    if (rc == 0) {
    a0f2:	4601      	mov	r1, r0
    a0f4:	b968      	cbnz	r0, a112 <boot_read_image_header+0x34>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    a0f6:	4622      	mov	r2, r4
    a0f8:	2320      	movs	r3, #32
    a0fa:	9801      	ldr	r0, [sp, #4]
    a0fc:	f000 fe8e 	bl	ae1c <flash_area_read>
    a100:	4604      	mov	r4, r0
        flash_area_close(fap);
    a102:	9801      	ldr	r0, [sp, #4]
    a104:	f000 fe89 	bl	ae1a <flash_area_close>
    }

    if (rc != 0) {
    a108:	1e20      	subs	r0, r4, #0
    a10a:	bf18      	it	ne
    a10c:	2001      	movne	r0, #1
        rc = BOOT_EFLASH;
    }

    return rc;
}
    a10e:	b002      	add	sp, #8
    a110:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    a112:	2001      	movs	r0, #1
    return rc;
    a114:	e7fb      	b.n	a10e <boot_read_image_header+0x30>

0000a116 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    a116:	2258      	movs	r2, #88	; 0x58
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    a118:	b5f0      	push	{r4, r5, r6, r7, lr}
    a11a:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    a11e:	fb02 0303 	mla	r3, r2, r3, r0
    a122:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    a126:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
    a12a:	d836      	bhi.n	a19a <boot_slots_compatible+0x84>
    a12c:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    a12e:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    a132:	d832      	bhi.n	a19a <boot_slots_compatible+0x84>
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    a134:	2100      	movs	r1, #0
    j = sz1 = secondary_slot_sz = 0;
    a136:	4608      	mov	r0, r1
    i = sz0 = primary_slot_sz = 0;
    a138:	460a      	mov	r2, r1
    j = sz1 = secondary_slot_sz = 0;
    a13a:	460d      	mov	r5, r1
    i = sz0 = primary_slot_sz = 0;
    a13c:	460c      	mov	r4, r1
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    a13e:	4562      	cmp	r2, ip
    a140:	d307      	bcc.n	a152 <boot_slots_compatible+0x3c>
    a142:	42b0      	cmp	r0, r6
    a144:	d305      	bcc.n	a152 <boot_slots_compatible+0x3c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    a146:	4562      	cmp	r2, ip
    a148:	d127      	bne.n	a19a <boot_slots_compatible+0x84>
        (primary_slot_sz != secondary_slot_sz)) {
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
        return 0;
    }

    return 1;
    a14a:	1b83      	subs	r3, r0, r6
    a14c:	4258      	negs	r0, r3
    a14e:	4158      	adcs	r0, r3
#endif /* PM_S1_ADDRESS */
}
    a150:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (sz0 == sz1) {
    a152:	42ac      	cmp	r4, r5
    a154:	d10c      	bne.n	a170 <boot_slots_compatible+0x5a>
	return fs->fs_size;
    a156:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    a158:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a15c:	687f      	ldr	r7, [r7, #4]
            i++;
    a15e:	3201      	adds	r2, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a160:	443c      	add	r4, r7
    a162:	6d1f      	ldr	r7, [r3, #80]	; 0x50
    a164:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a168:	687f      	ldr	r7, [r7, #4]
            j++;
    a16a:	3001      	adds	r0, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a16c:	443d      	add	r5, r7
            j++;
    a16e:	e7e6      	b.n	a13e <boot_slots_compatible+0x28>
        } else if (sz0 < sz1) {
    a170:	d209      	bcs.n	a186 <boot_slots_compatible+0x70>
    a172:	6a5f      	ldr	r7, [r3, #36]	; 0x24
            if (smaller == 2) {
    a174:	2902      	cmp	r1, #2
    a176:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    a17a:	687f      	ldr	r7, [r7, #4]
    a17c:	443c      	add	r4, r7
            if (smaller == 2) {
    a17e:	d00c      	beq.n	a19a <boot_slots_compatible+0x84>
            smaller = 1;
    a180:	2101      	movs	r1, #1
            i++;
    a182:	3201      	adds	r2, #1
    a184:	e7db      	b.n	a13e <boot_slots_compatible+0x28>
    a186:	6d1f      	ldr	r7, [r3, #80]	; 0x50
            if (smaller == 1) {
    a188:	2901      	cmp	r1, #1
    a18a:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    a18e:	687f      	ldr	r7, [r7, #4]
    a190:	443d      	add	r5, r7
            if (smaller == 1) {
    a192:	d002      	beq.n	a19a <boot_slots_compatible+0x84>
            smaller = 2;
    a194:	2102      	movs	r1, #2
            j++;
    a196:	3001      	adds	r0, #1
    a198:	e7d1      	b.n	a13e <boot_slots_compatible+0x28>
        return 0;
    a19a:	2000      	movs	r0, #0
    a19c:	e7d8      	b.n	a150 <boot_slots_compatible+0x3a>

0000a19e <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    a19e:	440a      	add	r2, r1
    a1a0:	428a      	cmp	r2, r1
    a1a2:	d100      	bne.n	a1a6 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    a1a4:	4770      	bx	lr
		seed ^= *src++;
    a1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
    a1aa:	ba40      	rev16	r0, r0
    a1ac:	b280      	uxth	r0, r0
    a1ae:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    a1b0:	f3c0 1303 	ubfx	r3, r0, #4, #4
    a1b4:	4058      	eors	r0, r3
		seed ^= seed << 12U;
    a1b6:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
    a1ba:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    a1bc:	0158      	lsls	r0, r3, #5
    a1be:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    a1c2:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    a1c4:	e7ec      	b.n	a1a0 <crc16_itu_t+0x2>

0000a1c6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    a1c6:	4603      	mov	r3, r0
    a1c8:	b158      	cbz	r0, a1e2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a1ca:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a1cc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    a1d0:	2a01      	cmp	r2, #1
    a1d2:	d003      	beq.n	a1dc <sys_notify_validate+0x16>
    a1d4:	2a03      	cmp	r2, #3
    a1d6:	d104      	bne.n	a1e2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    a1d8:	6802      	ldr	r2, [r0, #0]
    a1da:	b112      	cbz	r2, a1e2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    a1dc:	2000      	movs	r0, #0
    a1de:	6098      	str	r0, [r3, #8]
    a1e0:	4770      	bx	lr
		return -EINVAL;
    a1e2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    a1e6:	4770      	bx	lr

0000a1e8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a1e8:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a1ea:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    a1ec:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a1f0:	2a03      	cmp	r2, #3
    a1f2:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    a1f6:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    a1f8:	bf14      	ite	ne
    a1fa:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a1fc:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a1fe:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a200:	4770      	bx	lr

0000a202 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a202:	2200      	movs	r2, #0
    a204:	b510      	push	{r4, lr}
    a206:	4603      	mov	r3, r0
	return list->head;
    a208:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a20a:	b158      	cbz	r0, a224 <sys_slist_find_and_remove+0x22>
    a20c:	4288      	cmp	r0, r1
    a20e:	d10f      	bne.n	a230 <sys_slist_find_and_remove+0x2e>
	return node->next;
    a210:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    a212:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a214:	b93a      	cbnz	r2, a226 <sys_slist_find_and_remove+0x24>
    a216:	42a1      	cmp	r1, r4
	list->head = node;
    a218:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    a21a:	d100      	bne.n	a21e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    a21c:	6058      	str	r0, [r3, #4]
	parent->next = child;
    a21e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a220:	2001      	movs	r0, #1
	parent->next = child;
    a222:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a224:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    a226:	42a1      	cmp	r1, r4
	parent->next = child;
    a228:	6010      	str	r0, [r2, #0]
	list->tail = node;
    a22a:	bf08      	it	eq
    a22c:	605a      	streq	r2, [r3, #4]
}
    a22e:	e7f6      	b.n	a21e <sys_slist_find_and_remove+0x1c>
	return node->next;
    a230:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a232:	6800      	ldr	r0, [r0, #0]
    a234:	e7e9      	b.n	a20a <sys_slist_find_and_remove+0x8>

0000a236 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a236:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    a238:	f013 0307 	ands.w	r3, r3, #7
    a23c:	d105      	bne.n	a24a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a23e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a240:	2b00      	cmp	r3, #0
    a242:	bf0c      	ite	eq
    a244:	2000      	moveq	r0, #0
    a246:	2003      	movne	r0, #3
    a248:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a24a:	2b02      	cmp	r3, #2
    a24c:	d105      	bne.n	a25a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a24e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    a250:	2b00      	cmp	r3, #0
    a252:	bf14      	ite	ne
    a254:	2000      	movne	r0, #0
    a256:	2004      	moveq	r0, #4
    a258:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a25a:	2b01      	cmp	r3, #1
    a25c:	d105      	bne.n	a26a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a25e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a260:	2b00      	cmp	r3, #0
    a262:	bf0c      	ite	eq
    a264:	2000      	moveq	r0, #0
    a266:	2005      	movne	r0, #5
    a268:	4770      	bx	lr
	int evt = EVT_NOP;
    a26a:	2000      	movs	r0, #0
}
    a26c:	4770      	bx	lr

0000a26e <notify_one>:
{
    a26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a272:	460d      	mov	r5, r1
    a274:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a276:	4619      	mov	r1, r3
    a278:	1d28      	adds	r0, r5, #4
{
    a27a:	4690      	mov	r8, r2
    a27c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a27e:	f7ff ffb3 	bl	a1e8 <sys_notify_finalize>
	if (cb) {
    a282:	4604      	mov	r4, r0
    a284:	b138      	cbz	r0, a296 <notify_one+0x28>
		cb(mgr, cli, state, res);
    a286:	4633      	mov	r3, r6
    a288:	4642      	mov	r2, r8
    a28a:	4629      	mov	r1, r5
    a28c:	4638      	mov	r0, r7
    a28e:	46a4      	mov	ip, r4
}
    a290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a294:	4760      	bx	ip
}
    a296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a29a <transition_complete>:
{
    a29a:	b410      	push	{r4}
	__asm__ volatile(
    a29c:	f04f 0420 	mov.w	r4, #32
    a2a0:	f3ef 8211 	mrs	r2, BASEPRI
    a2a4:	f384 8812 	msr	BASEPRI_MAX, r4
    a2a8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    a2ac:	6141      	str	r1, [r0, #20]
}
    a2ae:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    a2b0:	2101      	movs	r1, #1
    a2b2:	f7f7 b95d 	b.w	1570 <process_event>

0000a2b6 <validate_args>:
{
    a2b6:	b510      	push	{r4, lr}
    a2b8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a2ba:	b140      	cbz	r0, a2ce <validate_args+0x18>
    a2bc:	b139      	cbz	r1, a2ce <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    a2be:	1d08      	adds	r0, r1, #4
    a2c0:	f7ff ff81 	bl	a1c6 <sys_notify_validate>
	if ((rv == 0)
    a2c4:	b928      	cbnz	r0, a2d2 <validate_args+0x1c>
	    && ((cli->notify.flags
    a2c6:	68a3      	ldr	r3, [r4, #8]
    a2c8:	f033 0303 	bics.w	r3, r3, #3
    a2cc:	d001      	beq.n	a2d2 <validate_args+0x1c>
		rv = -EINVAL;
    a2ce:	f06f 0015 	mvn.w	r0, #21
}
    a2d2:	bd10      	pop	{r4, pc}

0000a2d4 <onoff_manager_init>:
{
    a2d4:	b538      	push	{r3, r4, r5, lr}
    a2d6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    a2d8:	4605      	mov	r5, r0
    a2da:	b158      	cbz	r0, a2f4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    a2dc:	b151      	cbz	r1, a2f4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    a2de:	680b      	ldr	r3, [r1, #0]
    a2e0:	b143      	cbz	r3, a2f4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    a2e2:	684b      	ldr	r3, [r1, #4]
    a2e4:	b133      	cbz	r3, a2f4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a2e6:	221c      	movs	r2, #28
    a2e8:	2100      	movs	r1, #0
    a2ea:	f001 f919 	bl	b520 <memset>
	return 0;
    a2ee:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a2f0:	612c      	str	r4, [r5, #16]
}
    a2f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a2f4:	f06f 0015 	mvn.w	r0, #21
    a2f8:	e7fb      	b.n	a2f2 <onoff_manager_init+0x1e>

0000a2fa <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a2fa:	b570      	push	{r4, r5, r6, lr}
    a2fc:	4604      	mov	r4, r0
    a2fe:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a300:	f7ff ffd9 	bl	a2b6 <validate_args>

	if (rv < 0) {
    a304:	1e05      	subs	r5, r0, #0
    a306:	db31      	blt.n	a36c <onoff_request+0x72>
    a308:	f04f 0320 	mov.w	r3, #32
    a30c:	f3ef 8111 	mrs	r1, BASEPRI
    a310:	f383 8812 	msr	BASEPRI_MAX, r3
    a314:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a318:	f64f 75ff 	movw	r5, #65535	; 0xffff
    a31c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a31e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a320:	42ab      	cmp	r3, r5
    a322:	f000 0207 	and.w	r2, r0, #7
    a326:	d02e      	beq.n	a386 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a328:	2a02      	cmp	r2, #2
    a32a:	d10e      	bne.n	a34a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    a32c:	3301      	adds	r3, #1
    a32e:	8363      	strh	r3, [r4, #26]
	rv = state;
    a330:	4615      	mov	r5, r2
		notify = true;
    a332:	2301      	movs	r3, #1
	__asm__ volatile(
    a334:	f381 8811 	msr	BASEPRI, r1
    a338:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a33c:	b1b3      	cbz	r3, a36c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    a33e:	2300      	movs	r3, #0
    a340:	4631      	mov	r1, r6
    a342:	4620      	mov	r0, r4
    a344:	f7ff ff93 	bl	a26e <notify_one>
    a348:	e010      	b.n	a36c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    a34a:	0783      	lsls	r3, r0, #30
    a34c:	d001      	beq.n	a352 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    a34e:	2a06      	cmp	r2, #6
    a350:	d10e      	bne.n	a370 <onoff_request+0x76>
	parent->next = child;
    a352:	2300      	movs	r3, #0
    a354:	6033      	str	r3, [r6, #0]
	return list->tail;
    a356:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    a358:	b993      	cbnz	r3, a380 <onoff_request+0x86>
	list->head = node;
    a35a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    a35e:	4615      	mov	r5, r2
    a360:	b962      	cbnz	r2, a37c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    a362:	460a      	mov	r2, r1
    a364:	4620      	mov	r0, r4
    a366:	2102      	movs	r1, #2
    a368:	f7f7 f902 	bl	1570 <process_event>
		}
	}

	return rv;
}
    a36c:	4628      	mov	r0, r5
    a36e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    a370:	2a05      	cmp	r2, #5
    a372:	bf0c      	ite	eq
    a374:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    a378:	f06f 0504 	mvnne.w	r5, #4
    a37c:	2300      	movs	r3, #0
    a37e:	e7d9      	b.n	a334 <onoff_request+0x3a>
	parent->next = child;
    a380:	601e      	str	r6, [r3, #0]
	list->tail = node;
    a382:	6066      	str	r6, [r4, #4]
}
    a384:	e7eb      	b.n	a35e <onoff_request+0x64>
		rv = -EAGAIN;
    a386:	f06f 050a 	mvn.w	r5, #10
    a38a:	e7f7      	b.n	a37c <onoff_request+0x82>

0000a38c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    a38c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a38e:	f04f 0320 	mov.w	r3, #32
    a392:	f3ef 8211 	mrs	r2, BASEPRI
    a396:	f383 8812 	msr	BASEPRI_MAX, r3
    a39a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a39e:	8b04      	ldrh	r4, [r0, #24]
    a3a0:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    a3a4:	2c02      	cmp	r4, #2
    a3a6:	d00a      	beq.n	a3be <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    a3a8:	2c01      	cmp	r4, #1
    a3aa:	bf0c      	ite	eq
    a3ac:	f06f 0004 	mvneq.w	r0, #4
    a3b0:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    a3b4:	f382 8811 	msr	BASEPRI, r2
    a3b8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    a3bc:	e008      	b.n	a3d0 <onoff_release+0x44>
	mgr->refs -= 1U;
    a3be:	8b43      	ldrh	r3, [r0, #26]
    a3c0:	3b01      	subs	r3, #1
    a3c2:	b29b      	uxth	r3, r3
    a3c4:	8343      	strh	r3, [r0, #26]
	if (stop) {
    a3c6:	b923      	cbnz	r3, a3d2 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    a3c8:	4621      	mov	r1, r4
    a3ca:	f7f7 f8d1 	bl	1570 <process_event>
	int rv = state;
    a3ce:	4620      	mov	r0, r4
}
    a3d0:	bd10      	pop	{r4, pc}
	int rv = state;
    a3d2:	4620      	mov	r0, r4
    a3d4:	e7ee      	b.n	a3b4 <onoff_release+0x28>

0000a3d6 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    a3d6:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    a3d8:	b1b0      	cbz	r0, a408 <onoff_cancel+0x32>
    a3da:	b1a9      	cbz	r1, a408 <onoff_cancel+0x32>
	__asm__ volatile(
    a3dc:	f04f 0220 	mov.w	r2, #32
    a3e0:	f3ef 8511 	mrs	r5, BASEPRI
    a3e4:	f382 8812 	msr	BASEPRI_MAX, r2
    a3e8:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a3ec:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    a3ee:	f7ff ff08 	bl	a202 <sys_slist_find_and_remove>
    a3f2:	b130      	cbz	r0, a402 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    a3f4:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    a3f8:	f385 8811 	msr	BASEPRI, r5
    a3fc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    a400:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    a402:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a406:	e7f7      	b.n	a3f8 <onoff_cancel+0x22>
		return -EINVAL;
    a408:	f06f 0015 	mvn.w	r0, #21
    a40c:	e7f8      	b.n	a400 <onoff_cancel+0x2a>

0000a40e <onoff_sync_lock>:
	__asm__ volatile(
    a40e:	f04f 0220 	mov.w	r2, #32
    a412:	f3ef 8311 	mrs	r3, BASEPRI
    a416:	f382 8812 	msr	BASEPRI_MAX, r2
    a41a:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    a41e:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    a420:	600b      	str	r3, [r1, #0]
}
    a422:	4770      	bx	lr

0000a424 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    a424:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    a426:	6804      	ldr	r4, [r0, #0]
{
    a428:	460d      	mov	r5, r1
	if (srv->count < 0) {
    a42a:	2c00      	cmp	r4, #0
		srv->count = 0;
    a42c:	bfbc      	itt	lt
    a42e:	2400      	movlt	r4, #0
    a430:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    a432:	2b00      	cmp	r3, #0
{
    a434:	4611      	mov	r1, r2
    a436:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    a43a:	da0c      	bge.n	a456 <onoff_sync_finalize+0x32>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
    a43c:	2201      	movs	r2, #1
		srv->count = res;
    a43e:	6003      	str	r3, [r0, #0]
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    a440:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    a442:	f385 8811 	msr	BASEPRI, r5
    a446:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    a44a:	b111      	cbz	r1, a452 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    a44c:	2000      	movs	r0, #0
    a44e:	f7ff ff0e 	bl	a26e <notify_one>
	}

	return rv;
}
    a452:	4620      	mov	r0, r4
    a454:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    a456:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    a458:	b11a      	cbz	r2, a462 <onoff_sync_finalize+0x3e>
		srv->count += 1;
    a45a:	3401      	adds	r4, #1
	uint32_t state = ONOFF_STATE_ON;
    a45c:	2202      	movs	r2, #2
		srv->count -= 1;
    a45e:	6004      	str	r4, [r0, #0]
    a460:	e7ee      	b.n	a440 <onoff_sync_finalize+0x1c>
    a462:	3c01      	subs	r4, #1
    a464:	e7fa      	b.n	a45c <onoff_sync_finalize+0x38>

0000a466 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a466:	4604      	mov	r4, r0
    a468:	b508      	push	{r3, lr}
    a46a:	4608      	mov	r0, r1
    a46c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a46e:	461a      	mov	r2, r3
    a470:	47a0      	blx	r4
	return z_impl_z_current_get();
    a472:	f7ff f887 	bl	9584 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a476:	f7f9 fdad 	bl	3fd4 <z_impl_k_thread_abort>

0000a47a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a47a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a47c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    a484:	bf2c      	ite	cs
    a486:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    a48a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    a48e:	4770      	bx	lr

0000a490 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    a490:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    a494:	6880      	ldr	r0, [r0, #8]
    a496:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    a49a:	bf2c      	ite	cs
    a49c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    a4a0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    a4a4:	4770      	bx	lr

0000a4a6 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a4a6:	2201      	movs	r2, #1
{
    a4a8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a4aa:	f7ff ffe6 	bl	a47a <chunk_field>
}
    a4ae:	40d0      	lsrs	r0, r2
    a4b0:	bd08      	pop	{r3, pc}

0000a4b2 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    a4b2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    a4b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    a4b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a4bc:	d308      	bcc.n	a4d0 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a4be:	684b      	ldr	r3, [r1, #4]
		if (used) {
    a4c0:	b11a      	cbz	r2, a4ca <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    a4c2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a4c6:	604b      	str	r3, [r1, #4]
    a4c8:	4770      	bx	lr
    a4ca:	f023 0301 	bic.w	r3, r3, #1
    a4ce:	e7fa      	b.n	a4c6 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a4d0:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    a4d2:	b11a      	cbz	r2, a4dc <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a4d4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a4d8:	804b      	strh	r3, [r1, #2]
		}
	}
}
    a4da:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a4dc:	f023 0301 	bic.w	r3, r3, #1
    a4e0:	e7fa      	b.n	a4d8 <set_chunk_used+0x26>

0000a4e2 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a4e2:	0053      	lsls	r3, r2, #1
    a4e4:	2201      	movs	r2, #1
    a4e6:	f7ff bfd3 	b.w	a490 <chunk_set>

0000a4ea <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a4ea:	6883      	ldr	r3, [r0, #8]
    a4ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a4f0:	bf2c      	ite	cs
    a4f2:	2308      	movcs	r3, #8
    a4f4:	2304      	movcc	r3, #4
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a4f6:	1ac9      	subs	r1, r1, r3
    a4f8:	1a08      	subs	r0, r1, r0
}
    a4fa:	08c0      	lsrs	r0, r0, #3
    a4fc:	4770      	bx	lr

0000a4fe <bucket_idx.isra.0>:
    a4fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a502:	bf2c      	ite	cs
    a504:	2008      	movcs	r0, #8
    a506:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a508:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a50a:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    a50c:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
    a510:	fab0 f080 	clz	r0, r0
}
    a514:	f1c0 001f 	rsb	r0, r0, #31
    a518:	4770      	bx	lr

0000a51a <free_list_remove_bidx>:
{
    a51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a51e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    a520:	2203      	movs	r2, #3
    a522:	460e      	mov	r6, r1
    a524:	4604      	mov	r4, r0
    a526:	f7ff ffa8 	bl	a47a <chunk_field>
	if (next_free_chunk(h, c) == c) {
    a52a:	4286      	cmp	r6, r0
    a52c:	4605      	mov	r5, r0
    a52e:	f107 0804 	add.w	r8, r7, #4
    a532:	d10b      	bne.n	a54c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~BIT(bidx);
    a534:	2301      	movs	r3, #1
    a536:	fa03 f707 	lsl.w	r7, r3, r7
    a53a:	68e3      	ldr	r3, [r4, #12]
    a53c:	ea23 0307 	bic.w	r3, r3, r7
    a540:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    a542:	2300      	movs	r3, #0
    a544:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    a54c:	4631      	mov	r1, r6
    a54e:	2202      	movs	r2, #2
    a550:	4620      	mov	r0, r4
    a552:	f7ff ff92 	bl	a47a <chunk_field>
    a556:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    a558:	462b      	mov	r3, r5
    a55a:	4601      	mov	r1, r0
    a55c:	2203      	movs	r2, #3
    a55e:	4620      	mov	r0, r4
		b->next = second;
    a560:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    a564:	f7ff ff94 	bl	a490 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    a568:	4633      	mov	r3, r6
    a56a:	4629      	mov	r1, r5
    a56c:	4620      	mov	r0, r4
}
    a56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a572:	2202      	movs	r2, #2
    a574:	f7ff bf8c 	b.w	a490 <chunk_set>

0000a578 <free_list_remove>:
{
    a578:	b570      	push	{r4, r5, r6, lr}
    a57a:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    a57c:	6886      	ldr	r6, [r0, #8]
    a57e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    a580:	f7ff ff91 	bl	a4a6 <chunk_size>
    a584:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    a588:	4601      	mov	r1, r0
    a58a:	d301      	bcc.n	a590 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
    a58c:	2801      	cmp	r0, #1
    a58e:	d009      	beq.n	a5a4 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    a590:	4630      	mov	r0, r6
    a592:	f7ff ffb4 	bl	a4fe <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
    a596:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    a598:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    a59a:	4620      	mov	r0, r4
}
    a59c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
    a5a0:	f7ff bfbb 	b.w	a51a <free_list_remove_bidx>
}
    a5a4:	bd70      	pop	{r4, r5, r6, pc}

0000a5a6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    a5a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5aa:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
    a5ac:	6880      	ldr	r0, [r0, #8]
{
    a5ae:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    a5b0:	f7ff ffa5 	bl	a4fe <bucket_idx.isra.0>
    a5b4:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    a5b8:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
    a5bc:	4606      	mov	r6, r0
	if (b->next) {
    a5be:	f1b9 0f00 	cmp.w	r9, #0
    a5c2:	d01b      	beq.n	a5fc <alloc_chunk+0x56>
    a5c4:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    a5c6:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    a5ca:	4628      	mov	r0, r5
    a5cc:	4621      	mov	r1, r4
    a5ce:	f7ff ff6a 	bl	a4a6 <chunk_size>
    a5d2:	4540      	cmp	r0, r8
    a5d4:	d307      	bcc.n	a5e6 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
    a5d6:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    a5d8:	4621      	mov	r1, r4
    a5da:	4628      	mov	r0, r5
    a5dc:	f7ff ff9d 	bl	a51a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    a5e0:	4620      	mov	r0, r4
    a5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
    a5e6:	2203      	movs	r2, #3
    a5e8:	4621      	mov	r1, r4
    a5ea:	4628      	mov	r0, r5
    a5ec:	f7ff ff45 	bl	a47a <chunk_field>
		} while (--i && b->next != first);
    a5f0:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    a5f2:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    a5f6:	d001      	beq.n	a5fc <alloc_chunk+0x56>
    a5f8:	4581      	cmp	r9, r0
    a5fa:	d1e4      	bne.n	a5c6 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a5fc:	f04f 34ff 	mov.w	r4, #4294967295
    a600:	68e9      	ldr	r1, [r5, #12]
    a602:	3601      	adds	r6, #1
    a604:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
    a606:	400c      	ands	r4, r1
    a608:	d0ea      	beq.n	a5e0 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
    a60a:	fa94 f2a4 	rbit	r2, r4
    a60e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a612:	1d13      	adds	r3, r2, #4
    a614:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    a618:	e7de      	b.n	a5d8 <alloc_chunk+0x32>

0000a61a <split_chunks>:
{
    a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a61e:	4614      	mov	r4, r2
    a620:	460e      	mov	r6, r1
    a622:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a624:	f7ff ff3f 	bl	a4a6 <chunk_size>
	chunksz_t lsz = rc - lc;
    a628:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
    a62c:	1b37      	subs	r7, r6, r4
    a62e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    a630:	4642      	mov	r2, r8
    a632:	4631      	mov	r1, r6
    a634:	4628      	mov	r0, r5
    a636:	f7ff ff54 	bl	a4e2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    a63a:	463a      	mov	r2, r7
    a63c:	4621      	mov	r1, r4
    a63e:	4628      	mov	r0, r5
    a640:	f7ff ff4f 	bl	a4e2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a644:	4643      	mov	r3, r8
    a646:	2200      	movs	r2, #0
    a648:	4621      	mov	r1, r4
    a64a:	4628      	mov	r0, r5
    a64c:	f7ff ff20 	bl	a490 <chunk_set>
	return c + chunk_size(h, c);
    a650:	4621      	mov	r1, r4
    a652:	4628      	mov	r0, r5
    a654:	f7ff ff27 	bl	a4a6 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a658:	463b      	mov	r3, r7
    a65a:	1821      	adds	r1, r4, r0
    a65c:	2200      	movs	r2, #0
    a65e:	4628      	mov	r0, r5
}
    a660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a664:	f7ff bf14 	b.w	a490 <chunk_set>

0000a668 <merge_chunks>:
{
    a668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a66c:	4616      	mov	r6, r2
    a66e:	4604      	mov	r4, r0
    a670:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    a672:	f7ff ff18 	bl	a4a6 <chunk_size>
    a676:	4631      	mov	r1, r6
    a678:	4605      	mov	r5, r0
    a67a:	4620      	mov	r0, r4
    a67c:	f7ff ff13 	bl	a4a6 <chunk_size>
    a680:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
    a682:	462a      	mov	r2, r5
    a684:	4639      	mov	r1, r7
    a686:	4620      	mov	r0, r4
    a688:	f7ff ff2b 	bl	a4e2 <set_chunk_size>
	return c + chunk_size(h, c);
    a68c:	4631      	mov	r1, r6
    a68e:	4620      	mov	r0, r4
    a690:	f7ff ff09 	bl	a4a6 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a694:	462b      	mov	r3, r5
    a696:	1831      	adds	r1, r6, r0
    a698:	2200      	movs	r2, #0
    a69a:	4620      	mov	r0, r4
}
    a69c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a6a0:	f7ff bef6 	b.w	a490 <chunk_set>

0000a6a4 <free_list_add>:
{
    a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6a8:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    a6aa:	6886      	ldr	r6, [r0, #8]
    a6ac:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    a6ae:	f7ff fefa 	bl	a4a6 <chunk_size>
    a6b2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    a6b6:	4601      	mov	r1, r0
    a6b8:	d301      	bcc.n	a6be <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    a6ba:	2801      	cmp	r0, #1
    a6bc:	d033      	beq.n	a726 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
    a6be:	4630      	mov	r0, r6
    a6c0:	f7ff ff1d 	bl	a4fe <bucket_idx.isra.0>
	if (b->next == 0U) {
    a6c4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    a6c8:	6916      	ldr	r6, [r2, #16]
    a6ca:	b99e      	cbnz	r6, a6f4 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
    a6cc:	2301      	movs	r3, #1
    a6ce:	fa03 f000 	lsl.w	r0, r3, r0
    a6d2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    a6d4:	4629      	mov	r1, r5
    a6d6:	4303      	orrs	r3, r0
    a6d8:	60e3      	str	r3, [r4, #12]
    a6da:	4620      	mov	r0, r4
		b->next = c;
    a6dc:	6115      	str	r5, [r2, #16]
    a6de:	462b      	mov	r3, r5
    a6e0:	2202      	movs	r2, #2
    a6e2:	f7ff fed5 	bl	a490 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    a6e6:	2203      	movs	r2, #3
    a6e8:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    a6ea:	4620      	mov	r0, r4
}
    a6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a6f0:	f7ff bece 	b.w	a490 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    a6f4:	2202      	movs	r2, #2
    a6f6:	4631      	mov	r1, r6
    a6f8:	4620      	mov	r0, r4
    a6fa:	f7ff febe 	bl	a47a <chunk_field>
    a6fe:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    a700:	4603      	mov	r3, r0
    a702:	4629      	mov	r1, r5
    a704:	4620      	mov	r0, r4
    a706:	f7ff fec3 	bl	a490 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    a70a:	2203      	movs	r2, #3
    a70c:	4633      	mov	r3, r6
    a70e:	4629      	mov	r1, r5
    a710:	4620      	mov	r0, r4
    a712:	f7ff febd 	bl	a490 <chunk_set>
    a716:	4639      	mov	r1, r7
    a718:	462b      	mov	r3, r5
    a71a:	4620      	mov	r0, r4
    a71c:	f7ff feb8 	bl	a490 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    a720:	2202      	movs	r2, #2
    a722:	4631      	mov	r1, r6
    a724:	e7e1      	b.n	a6ea <free_list_add+0x46>
    a726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a72a <free_chunk>:
{
    a72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a72c:	460c      	mov	r4, r1
    a72e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    a730:	f7ff feb9 	bl	a4a6 <chunk_size>
    a734:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a736:	2201      	movs	r2, #1
    a738:	4631      	mov	r1, r6
    a73a:	4628      	mov	r0, r5
    a73c:	f7ff fe9d 	bl	a47a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    a740:	07c3      	lsls	r3, r0, #31
    a742:	d40c      	bmi.n	a75e <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    a744:	4631      	mov	r1, r6
    a746:	4628      	mov	r0, r5
    a748:	f7ff ff16 	bl	a578 <free_list_remove>
	return c + chunk_size(h, c);
    a74c:	4621      	mov	r1, r4
    a74e:	4628      	mov	r0, r5
    a750:	f7ff fea9 	bl	a4a6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    a754:	4621      	mov	r1, r4
    a756:	1822      	adds	r2, r4, r0
    a758:	4628      	mov	r0, r5
    a75a:	f7ff ff85 	bl	a668 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    a75e:	2200      	movs	r2, #0
    a760:	4621      	mov	r1, r4
    a762:	4628      	mov	r0, r5
    a764:	f7ff fe89 	bl	a47a <chunk_field>
    a768:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a76a:	2201      	movs	r2, #1
    a76c:	4639      	mov	r1, r7
    a76e:	4628      	mov	r0, r5
    a770:	f7ff fe83 	bl	a47a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    a774:	ea10 0602 	ands.w	r6, r0, r2
    a778:	d113      	bne.n	a7a2 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    a77a:	4639      	mov	r1, r7
    a77c:	4628      	mov	r0, r5
    a77e:	f7ff fefb 	bl	a578 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    a782:	4621      	mov	r1, r4
    a784:	4632      	mov	r2, r6
    a786:	4628      	mov	r0, r5
    a788:	f7ff fe77 	bl	a47a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    a78c:	4622      	mov	r2, r4
    a78e:	1a21      	subs	r1, r4, r0
    a790:	4628      	mov	r0, r5
    a792:	f7ff ff69 	bl	a668 <merge_chunks>
    a796:	4621      	mov	r1, r4
    a798:	4632      	mov	r2, r6
    a79a:	4628      	mov	r0, r5
    a79c:	f7ff fe6d 	bl	a47a <chunk_field>
    a7a0:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    a7a2:	4621      	mov	r1, r4
    a7a4:	4628      	mov	r0, r5
}
    a7a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    a7aa:	f7ff bf7b 	b.w	a6a4 <free_list_add>

0000a7ae <sys_heap_free>:
{
    a7ae:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
    a7b0:	b171      	cbz	r1, a7d0 <sys_heap_free+0x22>
    a7b2:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
    a7b4:	2200      	movs	r2, #0
	chunkid_t c = mem_to_chunkid(h, mem);
    a7b6:	4628      	mov	r0, r5
    a7b8:	f7ff fe97 	bl	a4ea <mem_to_chunkid>
    a7bc:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
    a7be:	4601      	mov	r1, r0
    a7c0:	4628      	mov	r0, r5
    a7c2:	f7ff fe76 	bl	a4b2 <set_chunk_used>
	free_chunk(h, c);
    a7c6:	4621      	mov	r1, r4
}
    a7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
    a7cc:	f7ff bfad 	b.w	a72a <free_chunk>
}
    a7d0:	bd38      	pop	{r3, r4, r5, pc}

0000a7d2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    a7d2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a7d4:	6806      	ldr	r6, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    a7d6:	b909      	cbnz	r1, a7dc <sys_heap_alloc+0xa>
		return NULL;
    a7d8:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    a7da:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    a7dc:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
    a7de:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a7e2:	d9f9      	bls.n	a7d8 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
    a7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a7e8:	bf2c      	ite	cs
    a7ea:	2208      	movcs	r2, #8
    a7ec:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a7ee:	1dcc      	adds	r4, r1, #7
    a7f0:	4414      	add	r4, r2
    a7f2:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a7f4:	4621      	mov	r1, r4
    a7f6:	4630      	mov	r0, r6
    a7f8:	f7ff fed5 	bl	a5a6 <alloc_chunk>
	if (c == 0U) {
    a7fc:	4605      	mov	r5, r0
    a7fe:	2800      	cmp	r0, #0
    a800:	d0ea      	beq.n	a7d8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a802:	4601      	mov	r1, r0
    a804:	4630      	mov	r0, r6
    a806:	f7ff fe4e 	bl	a4a6 <chunk_size>
    a80a:	42a0      	cmp	r0, r4
    a80c:	d909      	bls.n	a822 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
    a80e:	442c      	add	r4, r5
    a810:	4629      	mov	r1, r5
    a812:	4630      	mov	r0, r6
    a814:	4622      	mov	r2, r4
    a816:	f7ff ff00 	bl	a61a <split_chunks>
		free_list_add(h, c + chunk_sz);
    a81a:	4621      	mov	r1, r4
    a81c:	4630      	mov	r0, r6
    a81e:	f7ff ff41 	bl	a6a4 <free_list_add>
	set_chunk_used(h, c, true);
    a822:	4629      	mov	r1, r5
    a824:	4630      	mov	r0, r6
    a826:	2201      	movs	r2, #1
    a828:	f7ff fe43 	bl	a4b2 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    a82c:	68b3      	ldr	r3, [r6, #8]
    a82e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a832:	bf2c      	ite	cs
    a834:	2308      	movcs	r3, #8
    a836:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a838:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    a83c:	4428      	add	r0, r5
	return mem;
    a83e:	e7cc      	b.n	a7da <sys_heap_alloc+0x8>

0000a840 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a844:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a846:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    a848:	424a      	negs	r2, r1
    a84a:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    a84e:	ea31 0202 	bics.w	r2, r1, r2
{
    a852:	460b      	mov	r3, r1
	return big_heap_chunks(h->end_chunk);
    a854:	68b5      	ldr	r5, [r6, #8]
	if (align != rew) {
    a856:	d00f      	beq.n	a878 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
    a858:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    a85c:	bf34      	ite	cc
    a85e:	2104      	movcc	r1, #4
    a860:	2108      	movcs	r1, #8
    a862:	42b9      	cmp	r1, r7
    a864:	460a      	mov	r2, r1
    a866:	46b9      	mov	r9, r7
    a868:	bf28      	it	cs
    a86a:	463a      	movcs	r2, r7
		align -= rew;
    a86c:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    a86e:	b994      	cbnz	r4, a896 <sys_heap_aligned_alloc+0x56>
		return NULL;
    a870:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    a872:	4628      	mov	r0, r5
    a874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a878:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    a87c:	bf34      	ite	cc
    a87e:	2204      	movcc	r2, #4
    a880:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
    a882:	4291      	cmp	r1, r2
    a884:	d804      	bhi.n	a890 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
    a886:	4621      	mov	r1, r4
}
    a888:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    a88c:	f7ff bfa1 	b.w	a7d2 <sys_heap_alloc>
		rew = 0;
    a890:	f04f 0900 	mov.w	r9, #0
    a894:	e7eb      	b.n	a86e <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a896:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
    a89a:	d9e9      	bls.n	a870 <sys_heap_aligned_alloc+0x30>
    a89c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    a8a0:	bf2c      	ite	cs
    a8a2:	2308      	movcs	r3, #8
    a8a4:	2304      	movcc	r3, #4
    a8a6:	1de1      	adds	r1, r4, #7
    a8a8:	4439      	add	r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a8aa:	1a89      	subs	r1, r1, r2
    a8ac:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a8ae:	4630      	mov	r0, r6
    a8b0:	08c9      	lsrs	r1, r1, #3
    a8b2:	f7ff fe78 	bl	a5a6 <alloc_chunk>
	if (c0 == 0) {
    a8b6:	4680      	mov	r8, r0
    a8b8:	2800      	cmp	r0, #0
    a8ba:	d0d9      	beq.n	a870 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
    a8bc:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    a8be:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    a8c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a8c6:	bf2c      	ite	cs
    a8c8:	2308      	movcs	r3, #8
    a8ca:	2304      	movcc	r3, #4
    a8cc:	441d      	add	r5, r3
    a8ce:	4435      	add	r5, r6
    a8d0:	1e7b      	subs	r3, r7, #1
    a8d2:	441d      	add	r5, r3
    a8d4:	427f      	negs	r7, r7
    a8d6:	403d      	ands	r5, r7
    a8d8:	eba5 0509 	sub.w	r5, r5, r9
	chunkid_t c = mem_to_chunkid(h, mem);
    a8dc:	4629      	mov	r1, r5
    a8de:	4630      	mov	r0, r6
    a8e0:	f7ff fe03 	bl	a4ea <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a8e4:	442c      	add	r4, r5
    a8e6:	3407      	adds	r4, #7
    a8e8:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a8ec:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    a8ee:	4580      	cmp	r8, r0
	chunkid_t c = mem_to_chunkid(h, mem);
    a8f0:	4607      	mov	r7, r0
	chunkid_t c_end = end - chunk_buf(h);
    a8f2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a8f6:	d208      	bcs.n	a90a <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
    a8f8:	4602      	mov	r2, r0
    a8fa:	4641      	mov	r1, r8
    a8fc:	4630      	mov	r0, r6
    a8fe:	f7ff fe8c 	bl	a61a <split_chunks>
		free_list_add(h, c0);
    a902:	4641      	mov	r1, r8
    a904:	4630      	mov	r0, r6
    a906:	f7ff fecd 	bl	a6a4 <free_list_add>
	return c + chunk_size(h, c);
    a90a:	4639      	mov	r1, r7
    a90c:	4630      	mov	r0, r6
    a90e:	f7ff fdca 	bl	a4a6 <chunk_size>
    a912:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a914:	4284      	cmp	r4, r0
    a916:	d208      	bcs.n	a92a <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    a918:	4639      	mov	r1, r7
    a91a:	4630      	mov	r0, r6
    a91c:	4622      	mov	r2, r4
    a91e:	f7ff fe7c 	bl	a61a <split_chunks>
		free_list_add(h, c_end);
    a922:	4621      	mov	r1, r4
    a924:	4630      	mov	r0, r6
    a926:	f7ff febd 	bl	a6a4 <free_list_add>
	set_chunk_used(h, c, true);
    a92a:	2201      	movs	r2, #1
    a92c:	4639      	mov	r1, r7
    a92e:	4630      	mov	r0, r6
    a930:	f7ff fdbf 	bl	a4b2 <set_chunk_used>
	return mem;
    a934:	e79d      	b.n	a872 <sys_heap_aligned_alloc+0x32>

0000a936 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    a936:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a93a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a93c:	bf2c      	ite	cs
    a93e:	2408      	movcs	r4, #8
    a940:	2404      	movcc	r4, #4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    a942:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    a944:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a946:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a948:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a94a:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a94e:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a952:	1ba4      	subs	r4, r4, r6
    a954:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
    a956:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a958:	4621      	mov	r1, r4
    a95a:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
    a95c:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
    a95e:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a960:	f7ff fdcd 	bl	a4fe <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a964:	4619      	mov	r1, r3
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a966:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a968:	351b      	adds	r5, #27
    a96a:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    a96c:	f106 0210 	add.w	r2, r6, #16
    a970:	4298      	cmp	r0, r3
    a972:	da2e      	bge.n	a9d2 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a974:	462a      	mov	r2, r5
    a976:	4630      	mov	r0, r6
    a978:	2100      	movs	r1, #0
    a97a:	f7ff fdb2 	bl	a4e2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a97e:	2300      	movs	r3, #0
    a980:	4630      	mov	r0, r6
    a982:	461a      	mov	r2, r3
    a984:	4619      	mov	r1, r3
    a986:	f7ff fd83 	bl	a490 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a98a:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    a98c:	4619      	mov	r1, r3
    a98e:	4630      	mov	r0, r6
    a990:	2201      	movs	r2, #1
    a992:	f7ff fd8e 	bl	a4b2 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a996:	463a      	mov	r2, r7
    a998:	4629      	mov	r1, r5
    a99a:	f7ff fda2 	bl	a4e2 <set_chunk_size>
    a99e:	462b      	mov	r3, r5
    a9a0:	2200      	movs	r2, #0
    a9a2:	4629      	mov	r1, r5
    a9a4:	4630      	mov	r0, r6
    a9a6:	f7ff fd73 	bl	a490 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    a9aa:	4621      	mov	r1, r4
    a9ac:	4630      	mov	r0, r6
    a9ae:	f7ff fd98 	bl	a4e2 <set_chunk_size>
    a9b2:	463b      	mov	r3, r7
    a9b4:	4621      	mov	r1, r4
    a9b6:	4630      	mov	r0, r6
    a9b8:	2200      	movs	r2, #0
    a9ba:	f7ff fd69 	bl	a490 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    a9be:	4621      	mov	r1, r4
    a9c0:	4630      	mov	r0, r6
    a9c2:	2201      	movs	r2, #1
    a9c4:	f7ff fd75 	bl	a4b2 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a9c8:	4629      	mov	r1, r5
}
    a9ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a9ce:	f7ff be69 	b.w	a6a4 <free_list_add>
		h->buckets[i].next = 0;
    a9d2:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a9d6:	3301      	adds	r3, #1
    a9d8:	e7ca      	b.n	a970 <sys_heap_init+0x3a>

0000a9da <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a9da:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
	wrap_size = buf->put_head - base;
    a9dc:	6846      	ldr	r6, [r0, #4]
	base = buf->put_base;
    a9de:	68c7      	ldr	r7, [r0, #12]
    a9e0:	6945      	ldr	r5, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    a9e2:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    a9e4:	eba6 0c07 	sub.w	ip, r6, r7
    a9e8:	1b75      	subs	r5, r6, r5
	if (unlikely(wrap_size >= buf->size)) {
    a9ea:	4563      	cmp	r3, ip
{
    a9ec:	4604      	mov	r4, r0
    a9ee:	eba3 0005 	sub.w	r0, r3, r5
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    a9f2:	bf9c      	itt	ls
    a9f4:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
    a9f8:	18ff      	addls	r7, r7, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
    a9fa:	4282      	cmp	r2, r0
    a9fc:	bf28      	it	cs
    a9fe:	4602      	movcs	r2, r0
	wrap_size = buf->size - wrap_size;
    aa00:	eba3 000c 	sub.w	r0, r3, ip
	size = MIN(size, wrap_size);
    aa04:	4290      	cmp	r0, r2
    aa06:	bf28      	it	cs
    aa08:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
    aa0a:	6823      	ldr	r3, [r4, #0]
    aa0c:	1bf7      	subs	r7, r6, r7
    aa0e:	441f      	add	r7, r3
	buf->put_head += size;
    aa10:	4406      	add	r6, r0
	*data = &buf->buffer[buf->put_head - base];
    aa12:	600f      	str	r7, [r1, #0]
	buf->put_head += size;
    aa14:	6066      	str	r6, [r4, #4]

	return size;
}
    aa16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000aa18 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    aa18:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    aa1c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    aa1e:	428a      	cmp	r2, r1
    aa20:	d30b      	bcc.n	aa3a <ring_buf_put_finish+0x22>
		return -EINVAL;
	}

	buf->put_tail += size;
    aa22:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    aa24:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    aa26:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    aa28:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    aa2c:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    aa2e:	428a      	cmp	r2, r1
    aa30:	d801      	bhi.n	aa36 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
    aa32:	4413      	add	r3, r2
    aa34:	60c3      	str	r3, [r0, #12]
	}

	return 0;
    aa36:	2000      	movs	r0, #0
}
    aa38:	4770      	bx	lr
		return -EINVAL;
    aa3a:	f06f 0015 	mvn.w	r0, #21
    aa3e:	4770      	bx	lr

0000aa40 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    aa40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aa44:	4680      	mov	r8, r0
    aa46:	460e      	mov	r6, r1
    aa48:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    aa4a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    aa4c:	462a      	mov	r2, r5
    aa4e:	a901      	add	r1, sp, #4
    aa50:	4640      	mov	r0, r8
    aa52:	f7ff ffc2 	bl	a9da <ring_buf_put_claim>
    aa56:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    aa58:	4602      	mov	r2, r0
    aa5a:	4631      	mov	r1, r6
    aa5c:	9801      	ldr	r0, [sp, #4]
    aa5e:	f000 fd54 	bl	b50a <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    aa62:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    aa64:	4427      	add	r7, r4
		data += partial_size;
    aa66:	4426      	add	r6, r4
	} while (size && partial_size);
    aa68:	d001      	beq.n	aa6e <ring_buf_put+0x2e>
    aa6a:	2c00      	cmp	r4, #0
    aa6c:	d1ee      	bne.n	aa4c <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    aa6e:	4639      	mov	r1, r7
    aa70:	4640      	mov	r0, r8
    aa72:	f7ff ffd1 	bl	aa18 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    aa76:	4638      	mov	r0, r7
    aa78:	b002      	add	sp, #8
    aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aa7e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    aa7e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    aa80:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    aa82:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    aa84:	69c3      	ldr	r3, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    aa86:	6887      	ldr	r7, [r0, #8]
	wrap_size = buf->get_head - base;
    aa88:	eba5 0c06 	sub.w	ip, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    aa8c:	4563      	cmp	r3, ip
{
    aa8e:	4604      	mov	r4, r0
    aa90:	eba7 0005 	sub.w	r0, r7, r5
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
    aa94:	bf9c      	itt	ls
    aa96:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
    aa9a:	18f6      	addls	r6, r6, r3
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
    aa9c:	4290      	cmp	r0, r2
    aa9e:	bf28      	it	cs
    aaa0:	4610      	movcs	r0, r2
    aaa2:	4607      	mov	r7, r0
	wrap_size = buf->size - wrap_size;
    aaa4:	eba3 000c 	sub.w	r0, r3, ip
	size = MIN(size, wrap_size);
    aaa8:	42b8      	cmp	r0, r7
    aaaa:	bf28      	it	cs
    aaac:	4638      	movcs	r0, r7

	*data = &buf->buffer[buf->get_head - base];
    aaae:	6823      	ldr	r3, [r4, #0]
    aab0:	1bae      	subs	r6, r5, r6
    aab2:	441e      	add	r6, r3
	buf->get_head += size;
    aab4:	4405      	add	r5, r0
	*data = &buf->buffer[buf->get_head - base];
    aab6:	600e      	str	r6, [r1, #0]
	buf->get_head += size;
    aab8:	6125      	str	r5, [r4, #16]

	return size;
}
    aaba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000aabc <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    aabc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    aac0:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    aac2:	428a      	cmp	r2, r1
    aac4:	d30b      	bcc.n	aade <ring_buf_get_finish+0x22>
		return -EINVAL;
	}

	buf->get_tail += size;
    aac6:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;
    aac8:	e9c0 1104 	strd	r1, r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    aacc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	wrap_size = buf->get_tail - buf->get_base;
    aad0:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    aad2:	428a      	cmp	r2, r1
    aad4:	d801      	bhi.n	aada <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
    aad6:	4413      	add	r3, r2
    aad8:	6183      	str	r3, [r0, #24]
	}

	return 0;
    aada:	2000      	movs	r0, #0
}
    aadc:	4770      	bx	lr
		return -EINVAL;
    aade:	f06f 0015 	mvn.w	r0, #21
    aae2:	4770      	bx	lr

0000aae4 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    aae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aae8:	4680      	mov	r8, r0
    aaea:	460d      	mov	r5, r1
    aaec:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    aaee:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    aaf0:	4632      	mov	r2, r6
    aaf2:	4640      	mov	r0, r8
    aaf4:	a901      	add	r1, sp, #4
    aaf6:	f7ff ffc2 	bl	aa7e <ring_buf_get_claim>
    aafa:	4604      	mov	r4, r0
		if (data) {
    aafc:	b12d      	cbz	r5, ab0a <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    aafe:	4602      	mov	r2, r0
    ab00:	9901      	ldr	r1, [sp, #4]
    ab02:	4628      	mov	r0, r5
    ab04:	f000 fd01 	bl	b50a <memcpy>
			data += partial_size;
    ab08:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    ab0a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    ab0c:	4427      	add	r7, r4
	} while (size && partial_size);
    ab0e:	d001      	beq.n	ab14 <ring_buf_get+0x30>
    ab10:	2c00      	cmp	r4, #0
    ab12:	d1ed      	bne.n	aaf0 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    ab14:	4639      	mov	r1, r7
    ab16:	4640      	mov	r0, r8
    ab18:	f7ff ffd0 	bl	aabc <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    ab1c:	4638      	mov	r0, r7
    ab1e:	b002      	add	sp, #8
    ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ab24 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    ab24:	b508      	push	{r3, lr}
	__asm__ volatile(
    ab26:	f04f 0220 	mov.w	r2, #32
    ab2a:	f3ef 8311 	mrs	r3, BASEPRI
    ab2e:	f382 8812 	msr	BASEPRI_MAX, r2
    ab32:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    ab36:	f7f9 fa05 	bl	3f44 <sys_arch_reboot>
	arch_cpu_idle();
    ab3a:	f7f8 ffaf 	bl	3a9c <arch_cpu_idle>
    ab3e:	e7fc      	b.n	ab3a <sys_reboot+0x16>

0000ab40 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    ab40:	4770      	bx	lr

0000ab42 <usb_write>:
{
    ab42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab46:	4606      	mov	r6, r0
    ab48:	460f      	mov	r7, r1
    ab4a:	4690      	mov	r8, r2
    ab4c:	4699      	mov	r9, r3
    ab4e:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    ab50:	464b      	mov	r3, r9
    ab52:	4642      	mov	r2, r8
    ab54:	4639      	mov	r1, r7
    ab56:	4630      	mov	r0, r6
    ab58:	f7f9 ff50 	bl	49fc <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    ab5c:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    ab60:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    ab62:	d103      	bne.n	ab6c <usb_write+0x2a>
	z_impl_k_yield();
    ab64:	f7fe fc70 	bl	9448 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    ab68:	3d01      	subs	r5, #1
    ab6a:	d1f1      	bne.n	ab50 <usb_write+0xe>
}
    ab6c:	4620      	mov	r0, r4
    ab6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ab72 <usb_get_dev_data_by_cfg>:
	return list->head;
    ab72:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ab74:	b138      	cbz	r0, ab86 <usb_get_dev_data_by_cfg+0x14>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    ab76:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ab7a:	3804      	subs	r0, #4

		if (cfg_cur == cfg) {
    ab7c:	685b      	ldr	r3, [r3, #4]
    ab7e:	428b      	cmp	r3, r1
    ab80:	d001      	beq.n	ab86 <usb_get_dev_data_by_cfg+0x14>
	return node->next;
    ab82:	6840      	ldr	r0, [r0, #4]
    ab84:	e7f6      	b.n	ab74 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    ab86:	4770      	bx	lr

0000ab88 <usb_get_dev_data_by_iface>:
	return list->head;
    ab88:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ab8a:	b148      	cbz	r0, aba0 <usb_get_dev_data_by_iface+0x18>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    ab8c:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ab90:	3804      	subs	r0, #4
		const struct usb_if_descriptor *if_desc =
    ab92:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    ab94:	685b      	ldr	r3, [r3, #4]
    ab96:	789b      	ldrb	r3, [r3, #2]
    ab98:	428b      	cmp	r3, r1
    ab9a:	d001      	beq.n	aba0 <usb_get_dev_data_by_iface+0x18>
	return node->next;
    ab9c:	6840      	ldr	r0, [r0, #4]
    ab9e:	e7f4      	b.n	ab8a <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    aba0:	4770      	bx	lr

0000aba2 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    aba2:	b530      	push	{r4, r5, lr}
	return list->head;
    aba4:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aba6:	b188      	cbz	r0, abcc <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    aba8:	f850 3c04 	ldr.w	r3, [r0, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    abac:	3804      	subs	r0, #4
		const struct usb_cfg_data *cfg = dev->config;
    abae:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    abb0:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    abb2:	7f1d      	ldrb	r5, [r3, #28]
    abb4:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    abb6:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    abb8:	b2dc      	uxtb	r4, r3
    abba:	42a5      	cmp	r5, r4
    abbc:	d801      	bhi.n	abc2 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    abbe:	6840      	ldr	r0, [r0, #4]
    abc0:	e7f1      	b.n	aba6 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    abc2:	3301      	adds	r3, #1
    abc4:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    abc8:	428c      	cmp	r4, r1
    abca:	d1f5      	bne.n	abb8 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    abcc:	bd30      	pop	{r4, r5, pc}

0000abce <usb_transfer_is_busy>:
{
    abce:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    abd0:	f7f7 fd44 	bl	265c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    abd4:	b128      	cbz	r0, abe2 <usb_transfer_is_busy+0x14>
    abd6:	6840      	ldr	r0, [r0, #4]
    abd8:	f110 0f10 	cmn.w	r0, #16
    abdc:	bf14      	ite	ne
    abde:	2000      	movne	r0, #0
    abe0:	2001      	moveq	r0, #1
}
    abe2:	bd08      	pop	{r3, pc}

0000abe4 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    abe4:	1c4b      	adds	r3, r1, #1
    abe6:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    abe8:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    abea:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    abec:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    abf0:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    abf2:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    abf6:	4770      	bx	lr

0000abf8 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    abf8:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    abfc:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    abfe:	4718      	bx	r3

0000ac00 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    ac00:	2200      	movs	r2, #0
    ac02:	6903      	ldr	r3, [r0, #16]
    ac04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    ac08:	4770      	bx	lr

0000ac0a <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ac0a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    ac0c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    ac10:	b108      	cbz	r0, ac16 <cdc_acm_irq_tx_ready+0xc>
		return 1;
    ac12:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    ac16:	4770      	bx	lr

0000ac18 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    ac18:	2200      	movs	r2, #0
    ac1a:	6903      	ldr	r3, [r0, #16]
    ac1c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    ac20:	4770      	bx	lr

0000ac22 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    ac22:	6903      	ldr	r3, [r0, #16]
}
    ac24:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    ac28:	4770      	bx	lr

0000ac2a <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ac2a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    ac2c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    ac30:	b112      	cbz	r2, ac38 <cdc_acm_irq_is_pending+0xe>
    ac32:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    ac36:	b92a      	cbnz	r2, ac44 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    ac38:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    ac3c:	b118      	cbz	r0, ac46 <cdc_acm_irq_is_pending+0x1c>
		return 0;
    ac3e:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    ac42:	4770      	bx	lr
		return 1;
    ac44:	2001      	movs	r0, #1
}
    ac46:	4770      	bx	lr

0000ac48 <cdc_acm_irq_update>:
}
    ac48:	2001      	movs	r0, #1
    ac4a:	4770      	bx	lr

0000ac4c <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ac4c:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    ac4e:	e9c3 1200 	strd	r1, r2, [r3]
}
    ac52:	4770      	bx	lr

0000ac54 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    ac54:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ac56:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    ac58:	d007      	beq.n	ac6a <cdc_acm_line_ctrl_get+0x16>
    ac5a:	2904      	cmp	r1, #4
    ac5c:	d00a      	beq.n	ac74 <cdc_acm_line_ctrl_get+0x20>
    ac5e:	2901      	cmp	r1, #1
    ac60:	d10d      	bne.n	ac7e <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    ac62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		return 0;
    ac64:	2000      	movs	r0, #0
		*val = (dev_data->line_state &
    ac66:	6013      	str	r3, [r2, #0]
		return 0;
    ac68:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    ac6a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    ac6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ac72:	e7f7      	b.n	ac64 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    ac74:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    ac78:	f003 0301 	and.w	r3, r3, #1
    ac7c:	e7f2      	b.n	ac64 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    ac7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ac82:	4770      	bx	lr

0000ac84 <cdc_acm_configure>:
}
    ac84:	2000      	movs	r0, #0
    ac86:	4770      	bx	lr

0000ac88 <cdc_acm_config_get>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    ac88:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    ac8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    ac8c:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    ac8e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
    ac92:	b11a      	cbz	r2, ac9c <cdc_acm_config_get+0x14>
    ac94:	2a01      	cmp	r2, #1
    ac96:	d00c      	beq.n	acb2 <cdc_acm_config_get+0x2a>
		cfg->stop_bits = UART_CFG_STOP_BITS_2;
    ac98:	2203      	movs	r2, #3
    ac9a:	e000      	b.n	ac9e <cdc_acm_config_get+0x16>
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    ac9c:	2201      	movs	r2, #1
		cfg->stop_bits = UART_CFG_STOP_BITS_2;
    ac9e:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    aca0:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
    aca4:	3a01      	subs	r2, #1
    aca6:	2a03      	cmp	r2, #3
    aca8:	d805      	bhi.n	acb6 <cdc_acm_config_get+0x2e>
    acaa:	e8df f002 	tbb	[pc, r2]
    acae:	1513      	.short	0x1513
    acb0:	1917      	.short	0x1917
		cfg->stop_bits = UART_CFG_STOP_BITS_1_5;
    acb2:	2202      	movs	r2, #2
    acb4:	e7f3      	b.n	ac9e <cdc_acm_config_get+0x16>
		cfg->parity = UART_CFG_PARITY_NONE;
    acb6:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_SPACE;
    acb8:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    acba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    acbe:	2b06      	cmp	r3, #6
    acc0:	d010      	beq.n	ace4 <cdc_acm_config_get+0x5c>
    acc2:	2b07      	cmp	r3, #7
    acc4:	d010      	beq.n	ace8 <cdc_acm_config_get+0x60>
    acc6:	2b05      	cmp	r3, #5
    acc8:	d110      	bne.n	acec <cdc_acm_config_get+0x64>
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    acca:	2300      	movs	r3, #0
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    accc:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_8;
    acce:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    acd0:	71c8      	strb	r0, [r1, #7]
}
    acd2:	4770      	bx	lr
		cfg->parity = UART_CFG_PARITY_ODD;
    acd4:	2201      	movs	r2, #1
    acd6:	e7ef      	b.n	acb8 <cdc_acm_config_get+0x30>
		cfg->parity = UART_CFG_PARITY_EVEN;
    acd8:	2202      	movs	r2, #2
    acda:	e7ed      	b.n	acb8 <cdc_acm_config_get+0x30>
		cfg->parity = UART_CFG_PARITY_MARK;
    acdc:	2203      	movs	r2, #3
    acde:	e7eb      	b.n	acb8 <cdc_acm_config_get+0x30>
		cfg->parity = UART_CFG_PARITY_SPACE;
    ace0:	2204      	movs	r2, #4
    ace2:	e7e9      	b.n	acb8 <cdc_acm_config_get+0x30>
		cfg->data_bits = UART_CFG_DATA_BITS_6;
    ace4:	2301      	movs	r3, #1
    ace6:	e7f1      	b.n	accc <cdc_acm_config_get+0x44>
		cfg->data_bits = UART_CFG_DATA_BITS_7;
    ace8:	2302      	movs	r3, #2
    acea:	e7ef      	b.n	accc <cdc_acm_config_get+0x44>
		cfg->data_bits = UART_CFG_DATA_BITS_8;
    acec:	2303      	movs	r3, #3
    acee:	e7ed      	b.n	accc <cdc_acm_config_get+0x44>

0000acf0 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    acf0:	2940      	cmp	r1, #64	; 0x40
{
    acf2:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    acf4:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    acf6:	d042      	beq.n	ad7e <cdc_acm_line_ctrl_set+0x8e>
    acf8:	d813      	bhi.n	ad22 <cdc_acm_line_ctrl_set+0x32>
    acfa:	2910      	cmp	r1, #16
    acfc:	d032      	beq.n	ad64 <cdc_acm_line_ctrl_set+0x74>
    acfe:	d806      	bhi.n	ad0e <cdc_acm_line_ctrl_set+0x1e>
    ad00:	2901      	cmp	r1, #1
    ad02:	d01e      	beq.n	ad42 <cdc_acm_line_ctrl_set+0x52>
    ad04:	2908      	cmp	r1, #8
    ad06:	d01f      	beq.n	ad48 <cdc_acm_line_ctrl_set+0x58>
    ad08:	f06f 0012 	mvn.w	r0, #18
}
    ad0c:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    ad0e:	2920      	cmp	r1, #32
    ad10:	d1fa      	bne.n	ad08 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    ad12:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad16:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    ad1a:	b342      	cbz	r2, ad6e <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    ad1c:	f041 0104 	orr.w	r1, r1, #4
    ad20:	e025      	b.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
    ad22:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    ad26:	d033      	beq.n	ad90 <cdc_acm_line_ctrl_set+0xa0>
    ad28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ad2c:	d039      	beq.n	ada2 <cdc_acm_line_ctrl_set+0xb2>
    ad2e:	2980      	cmp	r1, #128	; 0x80
    ad30:	d1ea      	bne.n	ad08 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    ad32:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad36:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    ad3a:	b1c2      	cbz	r2, ad6e <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    ad3c:	f041 0110 	orr.w	r1, r1, #16
    ad40:	e015      	b.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    ad42:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    ad44:	2000      	movs	r0, #0
    ad46:	e7e1      	b.n	ad0c <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    ad48:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad4c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    ad50:	b92a      	cbnz	r2, ad5e <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    ad52:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    ad56:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ad58:	f7f7 ff46 	bl	2be8 <cdc_acm_send_notification.isra.0>
    ad5c:	e7f2      	b.n	ad44 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    ad5e:	f041 0101 	orr.w	r1, r1, #1
    ad62:	e7f6      	b.n	ad52 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    ad64:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad68:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    ad6c:	b922      	cbnz	r2, ad78 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    ad6e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ad72:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad76:	e7ef      	b.n	ad58 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    ad78:	f041 0102 	orr.w	r1, r1, #2
    ad7c:	e7f7      	b.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    ad7e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad82:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    ad86:	2a00      	cmp	r2, #0
    ad88:	d0f1      	beq.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    ad8a:	f041 0108 	orr.w	r1, r1, #8
    ad8e:	e7ee      	b.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    ad90:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ad94:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    ad98:	2a00      	cmp	r2, #0
    ad9a:	d0e8      	beq.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    ad9c:	f041 0120 	orr.w	r1, r1, #32
    ada0:	e7e5      	b.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    ada2:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    ada6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    adaa:	2a00      	cmp	r2, #0
    adac:	d0df      	beq.n	ad6e <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    adae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    adb2:	e7dc      	b.n	ad6e <cdc_acm_line_ctrl_set+0x7e>

0000adb4 <cdc_acm_fifo_read>:
{
    adb4:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    adb6:	6904      	ldr	r4, [r0, #16]
{
    adb8:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    adba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    adbc:	f7ff fe92 	bl	aae4 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    adc0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    adc2:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    adc4:	689a      	ldr	r2, [r3, #8]
    adc6:	6919      	ldr	r1, [r3, #16]
    adc8:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    adca:	bf04      	itt	eq
    adcc:	2200      	moveq	r2, #0
    adce:	f884 2029 	strbeq.w	r2, [r4, #41]	; 0x29
	if (dev_data->rx_paused == true) {
    add2:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
    add6:	b1aa      	cbz	r2, ae04 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    add8:	685a      	ldr	r2, [r3, #4]
    adda:	6959      	ldr	r1, [r3, #20]
    addc:	69db      	ldr	r3, [r3, #28]
    adde:	1a52      	subs	r2, r2, r1
    ade0:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    ade2:	2b3f      	cmp	r3, #63	; 0x3f
    ade4:	d90e      	bls.n	ae04 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured && !dev_data->suspended) {
    ade6:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    adea:	b143      	cbz	r3, adfe <cdc_acm_fifo_read+0x4a>
    adec:	f894 107f 	ldrb.w	r1, [r4, #127]	; 0x7f
    adf0:	b929      	cbnz	r1, adfe <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    adf2:	686b      	ldr	r3, [r5, #4]
    adf4:	4622      	mov	r2, r4
    adf6:	6a1b      	ldr	r3, [r3, #32]
    adf8:	7b18      	ldrb	r0, [r3, #12]
    adfa:	f7f7 ff1f 	bl	2c3c <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    adfe:	2300      	movs	r3, #0
    ae00:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    ae04:	4630      	mov	r0, r6
    ae06:	bd70      	pop	{r4, r5, r6, pc}

0000ae08 <cdc_acm_poll_in>:
	int ret = cdc_acm_fifo_read(dev, c, 1);
    ae08:	2201      	movs	r2, #1
{
    ae0a:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    ae0c:	f7ff ffd2 	bl	adb4 <cdc_acm_fifo_read>
}
    ae10:	3801      	subs	r0, #1
    ae12:	bf18      	it	ne
    ae14:	f04f 30ff 	movne.w	r0, #4294967295
    ae18:	bd08      	pop	{r3, pc}

0000ae1a <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    ae1a:	4770      	bx	lr

0000ae1c <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    ae1c:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    ae1e:	b430      	push	{r4, r5}
    ae20:	4604      	mov	r4, r0
    ae22:	4618      	mov	r0, r3
    ae24:	db0b      	blt.n	ae3e <flash_area_read+0x22>
    ae26:	68a5      	ldr	r5, [r4, #8]
    ae28:	4408      	add	r0, r1
    ae2a:	42a8      	cmp	r0, r5
    ae2c:	d807      	bhi.n	ae3e <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    ae2e:	68e0      	ldr	r0, [r4, #12]
    ae30:	6864      	ldr	r4, [r4, #4]
    ae32:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    ae34:	6884      	ldr	r4, [r0, #8]
    ae36:	6824      	ldr	r4, [r4, #0]
    ae38:	46a4      	mov	ip, r4
}
    ae3a:	bc30      	pop	{r4, r5}
    ae3c:	4760      	bx	ip
    ae3e:	f06f 0015 	mvn.w	r0, #21
    ae42:	bc30      	pop	{r4, r5}
    ae44:	4770      	bx	lr

0000ae46 <flash_area_write>:
    ae46:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    ae48:	b430      	push	{r4, r5}
    ae4a:	4604      	mov	r4, r0
    ae4c:	4618      	mov	r0, r3
    ae4e:	db0b      	blt.n	ae68 <flash_area_write+0x22>
    ae50:	68a5      	ldr	r5, [r4, #8]
    ae52:	4408      	add	r0, r1
    ae54:	42a8      	cmp	r0, r5
    ae56:	d807      	bhi.n	ae68 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    ae58:	68e0      	ldr	r0, [r4, #12]
    ae5a:	6864      	ldr	r4, [r4, #4]
    ae5c:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    ae5e:	6884      	ldr	r4, [r0, #8]
    ae60:	6864      	ldr	r4, [r4, #4]
    ae62:	46a4      	mov	ip, r4
}
    ae64:	bc30      	pop	{r4, r5}
    ae66:	4760      	bx	ip
    ae68:	f06f 0015 	mvn.w	r0, #21
    ae6c:	bc30      	pop	{r4, r5}
    ae6e:	4770      	bx	lr

0000ae70 <flash_area_erase>:
    ae70:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    ae72:	4603      	mov	r3, r0
    ae74:	b410      	push	{r4}
    ae76:	4610      	mov	r0, r2
    ae78:	db0a      	blt.n	ae90 <flash_area_erase+0x20>
    ae7a:	689c      	ldr	r4, [r3, #8]
    ae7c:	4408      	add	r0, r1
    ae7e:	42a0      	cmp	r0, r4
    ae80:	d806      	bhi.n	ae90 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    ae82:	68d8      	ldr	r0, [r3, #12]
    ae84:	685b      	ldr	r3, [r3, #4]
    ae86:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    ae88:	6883      	ldr	r3, [r0, #8]
}
    ae8a:	bc10      	pop	{r4}
    ae8c:	689b      	ldr	r3, [r3, #8]
    ae8e:	4718      	bx	r3
    ae90:	f06f 0015 	mvn.w	r0, #21
    ae94:	bc10      	pop	{r4}
    ae96:	4770      	bx	lr

0000ae98 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    ae98:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    ae9a:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    ae9c:	6883      	ldr	r3, [r0, #8]
    ae9e:	68db      	ldr	r3, [r3, #12]
    aea0:	4798      	blx	r3
}
    aea2:	6800      	ldr	r0, [r0, #0]
    aea4:	bd08      	pop	{r3, pc}

0000aea6 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    aea6:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    aea8:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    aeaa:	6883      	ldr	r3, [r0, #8]
    aeac:	68db      	ldr	r3, [r3, #12]
    aeae:	4798      	blx	r3

	return param->erase_value;
}
    aeb0:	7900      	ldrb	r0, [r0, #4]
    aeb2:	bd08      	pop	{r3, pc}

0000aeb4 <get_sectors_cb>:
{
    aeb4:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    aeb6:	6802      	ldr	r2, [r0, #0]
    aeb8:	684c      	ldr	r4, [r1, #4]
    aeba:	42a2      	cmp	r2, r4
    aebc:	d316      	bcc.n	aeec <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    aebe:	688b      	ldr	r3, [r1, #8]
    aec0:	4423      	add	r3, r4
    aec2:	429a      	cmp	r2, r3
    aec4:	d206      	bcs.n	aed4 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    aec6:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    aeca:	42ab      	cmp	r3, r5
    aecc:	d304      	bcc.n	aed8 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    aece:	f06f 030b 	mvn.w	r3, #11
    aed2:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    aed4:	2000      	movs	r0, #0
    aed6:	e00a      	b.n	aeee <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    aed8:	68cd      	ldr	r5, [r1, #12]
    aeda:	1b12      	subs	r2, r2, r4
    aedc:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    aee0:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    aee2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    aee6:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    aee8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    aeea:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    aeec:	2001      	movs	r0, #1
}
    aeee:	bd70      	pop	{r4, r5, r6, pc}

0000aef0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    aef0:	2000      	movs	r0, #0
{
    aef2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    aef4:	f7ff fe16 	bl	ab24 <sys_reboot>

0000aef8 <console_write>:
{
    aef8:	b570      	push	{r4, r5, r6, lr}
    aefa:	4606      	mov	r6, r0
    aefc:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    aefe:	2400      	movs	r4, #0
    af00:	42ac      	cmp	r4, r5
    af02:	db00      	blt.n	af06 <console_write+0xe>
}
    af04:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    af06:	5d30      	ldrb	r0, [r6, r4]
    af08:	f7f8 f8bc 	bl	3084 <console_out>
    af0c:	3001      	adds	r0, #1
    af0e:	d0f9      	beq.n	af04 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    af10:	3401      	adds	r4, #1
    af12:	e7f5      	b.n	af00 <console_write+0x8>

0000af14 <erase_range>:
{
    af14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    af16:	4606      	mov	r6, r0
    if (end >= flash_area_get_size(fap)) {
    af18:	68b3      	ldr	r3, [r6, #8]
{
    af1a:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    af1c:	429a      	cmp	r2, r3
{
    af1e:	4610      	mov	r0, r2
    if (end >= flash_area_get_size(fap)) {
    af20:	d205      	bcs.n	af2e <erase_range+0x1a>
    if (end < start) {
    af22:	428a      	cmp	r2, r1
    af24:	db11      	blt.n	af4a <erase_range+0x36>
    if (flash_area_sector_from_off(end, &sect)) {
    af26:	4669      	mov	r1, sp
    af28:	f7f5 fb1a 	bl	560 <flash_area_sector_from_off>
    af2c:	b110      	cbz	r0, af34 <erase_range+0x20>
        return -EINVAL;
    af2e:	f06f 0415 	mvn.w	r4, #21
    af32:	e00a      	b.n	af4a <erase_range+0x36>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    af34:	e9dd 5300 	ldrd	r5, r3, [sp]
    af38:	441d      	add	r5, r3
    rc = flash_area_erase(fap, start, size);
    af3a:	4621      	mov	r1, r4
    af3c:	4630      	mov	r0, r6
    af3e:	1b2a      	subs	r2, r5, r4
    af40:	f7ff ff96 	bl	ae70 <flash_area_erase>
    if (rc != 0) {
    af44:	2800      	cmp	r0, #0
    af46:	d1f2      	bne.n	af2e <erase_range+0x1a>
    return start + size;
    af48:	462c      	mov	r4, r5
}
    af4a:	4620      	mov	r0, r4
    af4c:	b002      	add	sp, #8
    af4e:	bd70      	pop	{r4, r5, r6, pc}

0000af50 <initial_checks>:
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    af50:	6802      	ldr	r2, [r0, #0]
    af52:	68c3      	ldr	r3, [r0, #12]
    af54:	429a      	cmp	r2, r3
    af56:	bf21      	itttt	cs
    af58:	2208      	movcs	r2, #8
    af5a:	6943      	ldrcs	r3, [r0, #20]
    af5c:	2000      	movcs	r0, #0
    af5e:	60da      	strcs	r2, [r3, #12]
	return true;
    af60:	bf38      	it	cc
    af62:	2001      	movcc	r0, #1
}
    af64:	4770      	bx	lr

0000af66 <list_map_end_decode>:

static bool list_map_end_decode(zcbor_state_t *state)
{
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    af66:	7c02      	ldrb	r2, [r0, #16]
{
    af68:	b510      	push	{r4, lr}
    af6a:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    af6c:	b18a      	cbz	r2, af92 <list_map_end_decode+0x2c>
	INITIAL_CHECKS();
    af6e:	f7ff ffef 	bl	af50 <initial_checks>
    af72:	b130      	cbz	r0, af82 <list_map_end_decode+0x1c>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    af74:	6823      	ldr	r3, [r4, #0]
    af76:	781a      	ldrb	r2, [r3, #0]
    af78:	2aff      	cmp	r2, #255	; 0xff
    af7a:	d004      	beq.n	af86 <list_map_end_decode+0x20>
    af7c:	220a      	movs	r2, #10
    af7e:	6963      	ldr	r3, [r4, #20]
    af80:	60da      	str	r2, [r3, #12]
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    af82:	2000      	movs	r0, #0
    af84:	bd10      	pop	{r4, pc}
	state->payload++;
    af86:	3301      	adds	r3, #1
    af88:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    af8a:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    af8c:	f04f 32ff 	mov.w	r2, #4294967295
		state->indefinite_length_array = false;
    af90:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    af92:	4620      	mov	r0, r4
}
    af94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    af98:	2107      	movs	r1, #7
    af9a:	f000 ba12 	b.w	b3c2 <zcbor_process_backup>

0000af9e <type_check>:
{
    af9e:	b510      	push	{r4, lr}
    afa0:	4604      	mov	r4, r0
	if (!initial_checks(state)) {
    afa2:	f7ff ffd5 	bl	af50 <initial_checks>
    afa6:	b140      	cbz	r0, afba <type_check+0x1c>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    afa8:	6823      	ldr	r3, [r4, #0]
    afaa:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
    afac:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    afb0:	bf1f      	itttt	ne
    afb2:	220a      	movne	r2, #10
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    afb4:	2000      	movne	r0, #0
    afb6:	6963      	ldrne	r3, [r4, #20]
    afb8:	60da      	strne	r2, [r3, #12]
}
    afba:	bd10      	pop	{r4, pc}

0000afbc <value_extract>:
{
    afbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afc0:	4604      	mov	r4, r0
    afc2:	4690      	mov	r8, r2
	INITIAL_CHECKS();
    afc4:	f7ff ffc4 	bl	af50 <initial_checks>
{
    afc8:	460e      	mov	r6, r1
	INITIAL_CHECKS();
    afca:	4605      	mov	r5, r0
    afcc:	b128      	cbz	r0, afda <value_extract+0x1e>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    afce:	68a3      	ldr	r3, [r4, #8]
    afd0:	b933      	cbnz	r3, afe0 <value_extract+0x24>
    afd2:	2103      	movs	r1, #3
    afd4:	6962      	ldr	r2, [r4, #20]
    afd6:	60d1      	str	r1, [r2, #12]
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    afd8:	2500      	movs	r5, #0
}
    afda:	4628      	mov	r0, r5
    afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    afe0:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    afe2:	4642      	mov	r2, r8
	uint8_t additional = ADDITIONAL(*state->payload);
    afe4:	781f      	ldrb	r7, [r3, #0]
	state->payload_bak = state->payload;
    afe6:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    afe8:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    afea:	2100      	movs	r1, #0
    afec:	4630      	mov	r0, r6
	uint8_t additional = ADDITIONAL(*state->payload);
    afee:	f007 071f 	and.w	r7, r7, #31
	(state->payload)++;
    aff2:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    aff4:	f000 fa94 	bl	b520 <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    aff8:	2f17      	cmp	r7, #23
    affa:	d804      	bhi.n	b006 <value_extract+0x4a>
		u8_result[0] = additional;
    affc:	7037      	strb	r7, [r6, #0]
	(state->elem_count)--;
    affe:	68a3      	ldr	r3, [r4, #8]
    b000:	3b01      	subs	r3, #1
    b002:	60a3      	str	r3, [r4, #8]
	return true;
    b004:	e7e9      	b.n	afda <value_extract+0x1e>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    b006:	3f18      	subs	r7, #24
    b008:	b2fa      	uxtb	r2, r7
    b00a:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    b00c:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    b00e:	d80a      	bhi.n	b026 <value_extract+0x6a>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    b010:	2201      	movs	r2, #1
    b012:	fa02 f707 	lsl.w	r7, r2, r7
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    b016:	45b8      	cmp	r8, r7
    b018:	d20a      	bcs.n	b030 <value_extract+0x74>
    b01a:	2205      	movs	r2, #5
    b01c:	3b01      	subs	r3, #1
    b01e:	6023      	str	r3, [r4, #0]
    b020:	6963      	ldr	r3, [r4, #20]
    b022:	60da      	str	r2, [r3, #12]
    b024:	e7d8      	b.n	afd8 <value_extract+0x1c>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    b026:	3b01      	subs	r3, #1
    b028:	6023      	str	r3, [r4, #0]
    b02a:	2207      	movs	r2, #7
    b02c:	6963      	ldr	r3, [r4, #20]
    b02e:	e7f8      	b.n	b022 <value_extract+0x66>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    b030:	68e1      	ldr	r1, [r4, #12]
    b032:	19da      	adds	r2, r3, r7
    b034:	4291      	cmp	r1, r2
    b036:	d204      	bcs.n	b042 <value_extract+0x86>
    b038:	3b01      	subs	r3, #1
    b03a:	6023      	str	r3, [r4, #0]
    b03c:	2208      	movs	r2, #8
    b03e:	6963      	ldr	r3, [r4, #20]
    b040:	e7ef      	b.n	b022 <value_extract+0x66>
    b042:	1e7b      	subs	r3, r7, #1
    b044:	3e01      	subs	r6, #1
			u8_result[i] = (state->payload)[len - i - 1];
    b046:	6822      	ldr	r2, [r4, #0]
    b048:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    b04a:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    b04c:	f806 2f01 	strb.w	r2, [r6, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    b050:	d2f9      	bcs.n	b046 <value_extract+0x8a>
		(state->payload) += len;
    b052:	6823      	ldr	r3, [r4, #0]
    b054:	441f      	add	r7, r3
    b056:	6027      	str	r7, [r4, #0]
    b058:	e7d1      	b.n	affe <value_extract+0x42>

0000b05a <str_start_decode>:
{
    b05a:	b538      	push	{r3, r4, r5, lr}
    b05c:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b05e:	4611      	mov	r1, r2
{
    b060:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b062:	f7ff ff9c 	bl	af9e <type_check>
    b066:	b908      	cbnz	r0, b06c <str_start_decode+0x12>
    b068:	2000      	movs	r0, #0
}
    b06a:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    b06c:	2204      	movs	r2, #4
    b06e:	4628      	mov	r0, r5
    b070:	18a1      	adds	r1, r4, r2
    b072:	f7ff ffa3 	bl	afbc <value_extract>
    b076:	2800      	cmp	r0, #0
    b078:	d0f6      	beq.n	b068 <str_start_decode+0xe>
	result->value = state->payload;
    b07a:	682b      	ldr	r3, [r5, #0]
    b07c:	6023      	str	r3, [r4, #0]
	return true;
    b07e:	e7f4      	b.n	b06a <str_start_decode+0x10>

0000b080 <list_map_start_decode>:
{
    b080:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b082:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    b084:	f7ff ff8b 	bl	af9e <type_check>
    b088:	4605      	mov	r5, r0
    b08a:	b170      	cbz	r0, b0aa <list_map_start_decode+0x2a>
	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    b08c:	6823      	ldr	r3, [r4, #0]
    b08e:	781a      	ldrb	r2, [r3, #0]
    b090:	f002 021f 	and.w	r2, r2, #31
    b094:	2a1f      	cmp	r2, #31
    b096:	d11a      	bne.n	b0ce <list_map_start_decode+0x4e>
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    b098:	f06f 0210 	mvn.w	r2, #16
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    b09c:	68a0      	ldr	r0, [r4, #8]
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    b09e:	9201      	str	r2, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    b0a0:	b930      	cbnz	r0, b0b0 <list_map_start_decode+0x30>
    b0a2:	2203      	movs	r2, #3
    b0a4:	6963      	ldr	r3, [r4, #20]
    b0a6:	60da      	str	r2, [r3, #12]
    b0a8:	4605      	mov	r5, r0
}
    b0aa:	4628      	mov	r0, r5
    b0ac:	b003      	add	sp, #12
    b0ae:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    b0b0:	3301      	adds	r3, #1
		state->elem_count--;
    b0b2:	3801      	subs	r0, #1
		state->payload++;
    b0b4:	6023      	str	r3, [r4, #0]
		state->elem_count--;
    b0b6:	60a0      	str	r0, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    b0b8:	4620      	mov	r0, r4
    b0ba:	9901      	ldr	r1, [sp, #4]
    b0bc:	f000 f967 	bl	b38e <zcbor_new_backup>
    b0c0:	b978      	cbnz	r0, b0e2 <list_map_start_decode+0x62>
		FAIL_RESTORE();
    b0c2:	6863      	ldr	r3, [r4, #4]
    b0c4:	6023      	str	r3, [r4, #0]
    b0c6:	68a3      	ldr	r3, [r4, #8]
    b0c8:	3301      	adds	r3, #1
    b0ca:	60a3      	str	r3, [r4, #8]
    b0cc:	e7ec      	b.n	b0a8 <list_map_start_decode+0x28>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    b0ce:	2204      	movs	r2, #4
    b0d0:	4620      	mov	r0, r4
    b0d2:	eb0d 0102 	add.w	r1, sp, r2
    b0d6:	f7ff ff71 	bl	afbc <value_extract>
    b0da:	2800      	cmp	r0, #0
    b0dc:	d0e4      	beq.n	b0a8 <list_map_start_decode+0x28>
	bool indefinite_length_array = false;
    b0de:	2500      	movs	r5, #0
    b0e0:	e7ea      	b.n	b0b8 <list_map_start_decode+0x38>
	state->indefinite_length_array = indefinite_length_array;
    b0e2:	7425      	strb	r5, [r4, #16]
	return true;
    b0e4:	e7e0      	b.n	b0a8 <list_map_start_decode+0x28>

0000b0e6 <str_decode>:
{
    b0e6:	b538      	push	{r3, r4, r5, lr}
    b0e8:	4604      	mov	r4, r0
    b0ea:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    b0ec:	f7ff ffb5 	bl	b05a <str_start_decode>
    b0f0:	b138      	cbz	r0, b102 <str_decode+0x1c>
	if (result->len > (state->payload_end - state->payload)) {
    b0f2:	6823      	ldr	r3, [r4, #0]
    b0f4:	68e2      	ldr	r2, [r4, #12]
    b0f6:	6869      	ldr	r1, [r5, #4]
    b0f8:	1ad2      	subs	r2, r2, r3
    b0fa:	4291      	cmp	r1, r2
    b0fc:	d802      	bhi.n	b104 <str_decode+0x1e>
	state->payload += result->len;
    b0fe:	440b      	add	r3, r1
    b100:	6023      	str	r3, [r4, #0]
}
    b102:	bd38      	pop	{r3, r4, r5, pc}
    b104:	2208      	movs	r2, #8
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    b106:	6863      	ldr	r3, [r4, #4]
		ZCBOR_FAIL();
    b108:	2000      	movs	r0, #0
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    b10a:	6023      	str	r3, [r4, #0]
    b10c:	68a3      	ldr	r3, [r4, #8]
    b10e:	3301      	adds	r3, #1
    b110:	60a3      	str	r3, [r4, #8]
    b112:	6963      	ldr	r3, [r4, #20]
    b114:	60da      	str	r2, [r3, #12]
    b116:	e7f4      	b.n	b102 <str_decode+0x1c>

0000b118 <str_expect>:
{
    b118:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b11a:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    b11c:	4669      	mov	r1, sp
{
    b11e:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    b120:	f7ff ffe1 	bl	b0e6 <str_decode>
    b124:	4605      	mov	r5, r0
    b126:	b160      	cbz	r0, b142 <str_expect+0x2a>
	if ((tmp_result.len != result->len)
    b128:	9a01      	ldr	r2, [sp, #4]
    b12a:	6873      	ldr	r3, [r6, #4]
    b12c:	429a      	cmp	r2, r3
    b12e:	d00b      	beq.n	b148 <str_expect+0x30>
    b130:	220b      	movs	r2, #11
    b132:	2500      	movs	r5, #0
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    b134:	6863      	ldr	r3, [r4, #4]
    b136:	6023      	str	r3, [r4, #0]
    b138:	68a3      	ldr	r3, [r4, #8]
    b13a:	3301      	adds	r3, #1
    b13c:	60a3      	str	r3, [r4, #8]
    b13e:	6963      	ldr	r3, [r4, #20]
    b140:	60da      	str	r2, [r3, #12]
}
    b142:	4628      	mov	r0, r5
    b144:	b002      	add	sp, #8
    b146:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    b148:	9900      	ldr	r1, [sp, #0]
    b14a:	6830      	ldr	r0, [r6, #0]
    b14c:	f000 f9b4 	bl	b4b8 <memcmp>
    b150:	2800      	cmp	r0, #0
    b152:	d0f6      	beq.n	b142 <str_expect+0x2a>
    b154:	e7ec      	b.n	b130 <str_expect+0x18>

0000b156 <zcbor_int64_decode>:
{
    b156:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b158:	4604      	mov	r4, r0
    b15a:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    b15c:	f7ff fef8 	bl	af50 <initial_checks>
    b160:	b148      	cbz	r0, b176 <zcbor_int64_decode+0x20>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    b162:	6823      	ldr	r3, [r4, #0]
    b164:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    b166:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    b168:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    b16c:	d905      	bls.n	b17a <zcbor_int64_decode+0x24>
    b16e:	220a      	movs	r2, #10
    b170:	6963      	ldr	r3, [r4, #20]
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b172:	2000      	movs	r0, #0
    b174:	60da      	str	r2, [r3, #12]
}
    b176:	b002      	add	sp, #8
    b178:	bd70      	pop	{r4, r5, r6, pc}
	if (!value_extract(state, &uint_result, sizeof(uint_result))) {
    b17a:	2208      	movs	r2, #8
    b17c:	4669      	mov	r1, sp
    b17e:	4620      	mov	r0, r4
    b180:	f7ff ff1c 	bl	afbc <value_extract>
    b184:	2800      	cmp	r0, #0
    b186:	d0f6      	beq.n	b176 <zcbor_int64_decode+0x20>
	int_result = (int64_t)uint_result;
    b188:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (int_result < 0) {
    b18c:	2b00      	cmp	r3, #0
    b18e:	da07      	bge.n	b1a0 <zcbor_int64_decode+0x4a>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b190:	6863      	ldr	r3, [r4, #4]
    b192:	2205      	movs	r2, #5
    b194:	6023      	str	r3, [r4, #0]
    b196:	68a3      	ldr	r3, [r4, #8]
    b198:	3301      	adds	r3, #1
    b19a:	60a3      	str	r3, [r4, #8]
    b19c:	6963      	ldr	r3, [r4, #20]
    b19e:	e7e8      	b.n	b172 <zcbor_int64_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    b1a0:	2e01      	cmp	r6, #1
		*result = -1 - int_result;
    b1a2:	bf04      	itt	eq
    b1a4:	43d2      	mvneq	r2, r2
    b1a6:	43db      	mvneq	r3, r3
		*result = int_result;
    b1a8:	e9c5 2300 	strd	r2, r3, [r5]
    b1ac:	e7e3      	b.n	b176 <zcbor_int64_decode+0x20>

0000b1ae <zcbor_int32_decode>:
{
    b1ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b1b0:	460d      	mov	r5, r1
	if (zcbor_int64_decode(state, &result64)) {
    b1b2:	4669      	mov	r1, sp
{
    b1b4:	4604      	mov	r4, r0
	if (zcbor_int64_decode(state, &result64)) {
    b1b6:	f7ff ffce 	bl	b156 <zcbor_int64_decode>
    b1ba:	b178      	cbz	r0, b1dc <zcbor_int32_decode+0x2e>
		if (result64 > INT32_MAX) {
    b1bc:	9b00      	ldr	r3, [sp, #0]
    b1be:	9a01      	ldr	r2, [sp, #4]
    b1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b1c4:	f172 0200 	sbcs.w	r2, r2, #0
    b1c8:	db0a      	blt.n	b1e0 <zcbor_int32_decode+0x32>
    b1ca:	2205      	movs	r2, #5
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b1cc:	2000      	movs	r0, #0
    b1ce:	6863      	ldr	r3, [r4, #4]
    b1d0:	6023      	str	r3, [r4, #0]
    b1d2:	68a3      	ldr	r3, [r4, #8]
    b1d4:	3301      	adds	r3, #1
    b1d6:	60a3      	str	r3, [r4, #8]
    b1d8:	6963      	ldr	r3, [r4, #20]
    b1da:	60da      	str	r2, [r3, #12]
}
    b1dc:	b003      	add	sp, #12
    b1de:	bd30      	pop	{r4, r5, pc}
		*result = (int32_t)result64;
    b1e0:	602b      	str	r3, [r5, #0]
		return true;
    b1e2:	e7fb      	b.n	b1dc <zcbor_int32_decode+0x2e>

0000b1e4 <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    b1e4:	2202      	movs	r2, #2
    b1e6:	f7ff bf7e 	b.w	b0e6 <str_decode>

0000b1ea <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    b1ea:	2203      	movs	r2, #3
    b1ec:	f7ff bf94 	b.w	b118 <str_expect>

0000b1f0 <zcbor_map_start_decode>:
{
    b1f0:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    b1f2:	2105      	movs	r1, #5
{
    b1f4:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    b1f6:	f7ff ff43 	bl	b080 <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    b1fa:	4602      	mov	r2, r0
    b1fc:	b180      	cbz	r0, b220 <zcbor_map_start_decode+0x30>
    b1fe:	7c20      	ldrb	r0, [r4, #16]
    b200:	b958      	cbnz	r0, b21a <zcbor_map_start_decode+0x2a>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    b202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b206:	68a3      	ldr	r3, [r4, #8]
    b208:	428b      	cmp	r3, r1
    b20a:	d307      	bcc.n	b21c <zcbor_map_start_decode+0x2c>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    b20c:	6862      	ldr	r2, [r4, #4]
    b20e:	3301      	adds	r3, #1
    b210:	6022      	str	r2, [r4, #0]
    b212:	2205      	movs	r2, #5
    b214:	60a3      	str	r3, [r4, #8]
    b216:	6963      	ldr	r3, [r4, #20]
    b218:	60da      	str	r2, [r3, #12]
}
    b21a:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    b21c:	005b      	lsls	r3, r3, #1
    b21e:	60a3      	str	r3, [r4, #8]
    b220:	4610      	mov	r0, r2
    b222:	e7fa      	b.n	b21a <zcbor_map_start_decode+0x2a>

0000b224 <zcbor_map_end_decode>:
    b224:	f7ff be9f 	b.w	af66 <list_map_end_decode>

0000b228 <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    b228:	f04f 32ff 	mov.w	r2, #4294967295
    b22c:	2107      	movs	r1, #7
    b22e:	f000 b8c8 	b.w	b3c2 <zcbor_process_backup>

0000b232 <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    b232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b236:	4681      	mov	r9, r0
    b238:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    b23c:	4688      	mov	r8, r1
    b23e:	4617      	mov	r7, r2
    b240:	469a      	mov	sl, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    b242:	2400      	movs	r4, #0
    b244:	4544      	cmp	r4, r8
    b246:	d102      	bne.n	b24e <zcbor_multi_decode+0x1c>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    b248:	603c      	str	r4, [r7, #0]
			return true;
    b24a:	2001      	movs	r0, #1
    b24c:	e013      	b.n	b276 <zcbor_multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    b24e:	682b      	ldr	r3, [r5, #0]
		if (!decoder(state,
    b250:	4631      	mov	r1, r6
    b252:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    b254:	9301      	str	r3, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    b256:	f8d5 b008 	ldr.w	fp, [r5, #8]
		if (!decoder(state,
    b25a:	47d0      	blx	sl
    b25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b25e:	441e      	add	r6, r3
    b260:	9b01      	ldr	r3, [sp, #4]
    b262:	b958      	cbnz	r0, b27c <zcbor_multi_decode+0x4a>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    b264:	454c      	cmp	r4, r9
			*num_decode = i;
    b266:	603c      	str	r4, [r7, #0]
			state->payload = payload_bak;
    b268:	602b      	str	r3, [r5, #0]
			state->elem_count = elem_count_bak;
    b26a:	f8c5 b008 	str.w	fp, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    b26e:	d2ec      	bcs.n	b24a <zcbor_multi_decode+0x18>
    b270:	220d      	movs	r2, #13
    b272:	696b      	ldr	r3, [r5, #20]
    b274:	60da      	str	r2, [r3, #12]
	return true;
}
    b276:	b003      	add	sp, #12
    b278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    b27c:	3401      	adds	r4, #1
    b27e:	e7e1      	b.n	b244 <zcbor_multi_decode+0x12>

0000b280 <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    b284:	f8d0 900c 	ldr.w	r9, [r0, #12]
    b288:	6805      	ldr	r5, [r0, #0]
    b28a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    b28e:	eba9 0305 	sub.w	r3, r9, r5
    b292:	459a      	cmp	sl, r3
{
    b294:	4604      	mov	r4, r0
    b296:	460e      	mov	r6, r1
    b298:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    b29a:	d906      	bls.n	b2aa <str_encode+0x2a>
    b29c:	2208      	movs	r2, #8
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
	}
	if (!str_start_encode(state, input, major_type)) {
		ZCBOR_FAIL();
    b29e:	2500      	movs	r5, #0
    b2a0:	6963      	ldr	r3, [r4, #20]
    b2a2:	60da      	str	r2, [r3, #12]
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    b2a4:	4628      	mov	r0, r5
    b2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    b2aa:	460f      	mov	r7, r1
    b2ac:	f857 3b04 	ldr.w	r3, [r7], #4
    b2b0:	b143      	cbz	r3, b2c4 <str_encode+0x44>
    b2b2:	2104      	movs	r1, #4
    b2b4:	4638      	mov	r0, r7
    b2b6:	f7f8 fb95 	bl	39e4 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    b2ba:	4455      	add	r5, sl
    b2bc:	3501      	adds	r5, #1
    b2be:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    b2c0:	45a9      	cmp	r9, r5
    b2c2:	d3eb      	bcc.n	b29c <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    b2c4:	2304      	movs	r3, #4
    b2c6:	463a      	mov	r2, r7
    b2c8:	4641      	mov	r1, r8
    b2ca:	4620      	mov	r0, r4
    b2cc:	f7f8 fba2 	bl	3a14 <value_encode>
    b2d0:	4605      	mov	r5, r0
    b2d2:	2800      	cmp	r0, #0
    b2d4:	d0e6      	beq.n	b2a4 <str_encode+0x24>
	if (state->payload_mut != input->value) {
    b2d6:	6820      	ldr	r0, [r4, #0]
    b2d8:	6831      	ldr	r1, [r6, #0]
    b2da:	4288      	cmp	r0, r1
    b2dc:	d002      	beq.n	b2e4 <str_encode+0x64>
		memmove(state->payload_mut, input->value, input->len);
    b2de:	6872      	ldr	r2, [r6, #4]
    b2e0:	f000 f8fb 	bl	b4da <memmove>
	state->payload += input->len;
    b2e4:	6823      	ldr	r3, [r4, #0]
    b2e6:	6872      	ldr	r2, [r6, #4]
    b2e8:	4413      	add	r3, r2
    b2ea:	6023      	str	r3, [r4, #0]
	return true;
    b2ec:	e7da      	b.n	b2a4 <str_encode+0x24>

0000b2ee <zcbor_uint64_put>:
{
    b2ee:	b507      	push	{r0, r1, r2, lr}
	if (!value_encode(state, major_type, input, 8)) {
    b2f0:	2100      	movs	r1, #0
{
    b2f2:	e9cd 2300 	strd	r2, r3, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    b2f6:	2308      	movs	r3, #8
    b2f8:	466a      	mov	r2, sp
    b2fa:	f7f8 fb8b 	bl	3a14 <value_encode>
}
    b2fe:	b003      	add	sp, #12
    b300:	f85d fb04 	ldr.w	pc, [sp], #4

0000b304 <zcbor_uint32_put>:
{
    b304:	460a      	mov	r2, r1
	return zcbor_uint64_put(state, input);
    b306:	2300      	movs	r3, #0
    b308:	f7ff bff1 	b.w	b2ee <zcbor_uint64_put>

0000b30c <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    b30c:	2203      	movs	r2, #3
    b30e:	f7ff bfb7 	b.w	b280 <str_encode>

0000b312 <zcbor_list_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b312:	6803      	ldr	r3, [r0, #0]
    b314:	68c2      	ldr	r2, [r0, #12]
    b316:	4293      	cmp	r3, r2
    b318:	d304      	bcc.n	b324 <zcbor_list_start_encode+0x12>
    b31a:	2208      	movs	r2, #8
    b31c:	6943      	ldr	r3, [r0, #20]
		ZCBOR_FAIL();
	}
	state->elem_count--; /* Because of dummy header. */
#else
	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
		ZCBOR_FAIL();
    b31e:	2000      	movs	r0, #0
    b320:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    b322:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b324:	1c5a      	adds	r2, r3, #1
    b326:	6002      	str	r2, [r0, #0]
    b328:	229f      	movs	r2, #159	; 0x9f
	}
#endif
	return true;
    b32a:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b32c:	701a      	strb	r2, [r3, #0]


bool zcbor_list_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    b32e:	4770      	bx	lr

0000b330 <zcbor_map_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b330:	6803      	ldr	r3, [r0, #0]
    b332:	68c2      	ldr	r2, [r0, #12]
    b334:	4293      	cmp	r3, r2
    b336:	d304      	bcc.n	b342 <zcbor_map_start_encode+0x12>
    b338:	2208      	movs	r2, #8
    b33a:	6943      	ldr	r3, [r0, #20]
		ZCBOR_FAIL();
    b33c:	2000      	movs	r0, #0
    b33e:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    b340:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b342:	1c5a      	adds	r2, r3, #1
    b344:	6002      	str	r2, [r0, #0]
    b346:	22bf      	movs	r2, #191	; 0xbf
	return true;
    b348:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b34a:	701a      	strb	r2, [r3, #0]


bool zcbor_map_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    b34c:	4770      	bx	lr

0000b34e <zcbor_list_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b34e:	6803      	ldr	r3, [r0, #0]
    b350:	68c2      	ldr	r2, [r0, #12]
    b352:	4293      	cmp	r3, r2
    b354:	d304      	bcc.n	b360 <zcbor_list_end_encode+0x12>
    b356:	2208      	movs	r2, #8
    b358:	6943      	ldr	r3, [r0, #20]
		/* Reset payload pointer to end of list */
		state->payload = payload;
	}
#else
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_PRIM, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
		ZCBOR_FAIL();
    b35a:	2000      	movs	r0, #0
    b35c:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    b35e:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b360:	1c5a      	adds	r2, r3, #1
    b362:	6002      	str	r2, [r0, #0]
    b364:	22ff      	movs	r2, #255	; 0xff
	}
#endif
	return true;
    b366:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b368:	701a      	strb	r2, [r3, #0]


bool zcbor_list_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    b36a:	4770      	bx	lr

0000b36c <zcbor_map_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    b36c:	6803      	ldr	r3, [r0, #0]
    b36e:	68c2      	ldr	r2, [r0, #12]
    b370:	4293      	cmp	r3, r2
    b372:	d304      	bcc.n	b37e <zcbor_map_end_encode+0x12>
    b374:	2208      	movs	r2, #8
    b376:	6943      	ldr	r3, [r0, #20]
		ZCBOR_FAIL();
    b378:	2000      	movs	r0, #0
    b37a:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    b37c:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b37e:	1c5a      	adds	r2, r3, #1
    b380:	6002      	str	r2, [r0, #0]
    b382:	22ff      	movs	r2, #255	; 0xff
	return true;
    b384:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    b386:	701a      	strb	r2, [r3, #0]


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    b388:	4770      	bx	lr

0000b38a <zcbor_new_encode_state>:


bool zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	return zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    b38a:	f000 b859 	b.w	b440 <zcbor_new_state>

0000b38e <zcbor_new_backup>:

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    b38e:	6943      	ldr	r3, [r0, #20]
{
    b390:	b570      	push	{r4, r5, r6, lr}
	if ((state->constant_state->current_backup)
    b392:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
    b396:	4296      	cmp	r6, r2
{
    b398:	4604      	mov	r4, r0
    b39a:	460d      	mov	r5, r1
    b39c:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    b3a0:	d302      	bcc.n	b3a8 <zcbor_new_backup+0x1a>
    b3a2:	2201      	movs	r2, #1
    b3a4:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    b3a6:	bd70      	pop	{r4, r5, r6, pc}
	(state->constant_state->current_backup)++;
    b3a8:	1c72      	adds	r2, r6, #1
	state->payload_moved = false;
    b3aa:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    b3ac:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    b3ae:	2218      	movs	r2, #24
    b3b0:	6818      	ldr	r0, [r3, #0]
    b3b2:	4621      	mov	r1, r4
    b3b4:	fb02 0006 	mla	r0, r2, r6, r0
    b3b8:	f000 f8a7 	bl	b50a <memcpy>
	return true;
    b3bc:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    b3be:	60a5      	str	r5, [r4, #8]
	return true;
    b3c0:	e7f1      	b.n	b3a6 <zcbor_new_backup+0x18>

0000b3c2 <zcbor_process_backup>:
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    b3c2:	6943      	ldr	r3, [r0, #20]
{
    b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3c8:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    b3ca:	6858      	ldr	r0, [r3, #4]
{
    b3cc:	460d      	mov	r5, r1
    b3ce:	4616      	mov	r6, r2
	if (state->constant_state->current_backup == 0) {
    b3d0:	b918      	cbnz	r0, b3da <zcbor_process_backup+0x18>
    b3d2:	2202      	movs	r2, #2
    b3d4:	60da      	str	r2, [r3, #12]
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    b3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    b3da:	07e9      	lsls	r1, r5, #31
	const uint8_t *payload = state->payload;
    b3dc:	6827      	ldr	r7, [r4, #0]
	const uint_fast32_t elem_count = state->elem_count;
    b3de:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if (flags & ZCBOR_FLAG_RESTORE) {
    b3e2:	d50e      	bpl.n	b402 <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    b3e4:	6819      	ldr	r1, [r3, #0]
    b3e6:	2318      	movs	r3, #24
		uint_fast32_t i = state->constant_state->current_backup - 1;
    b3e8:	3801      	subs	r0, #1
			if (state->constant_state->backup_list[i].payload_moved) {
    b3ea:	fb03 1100 	mla	r1, r3, r0, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    b3ee:	f015 0004 	ands.w	r0, r5, #4
    b3f2:	d102      	bne.n	b3fa <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    b3f4:	7c4b      	ldrb	r3, [r1, #17]
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d1ed      	bne.n	b3d6 <zcbor_process_backup+0x14>
		memcpy(state, &state->constant_state->backup_list[i],
    b3fa:	2218      	movs	r2, #24
    b3fc:	4620      	mov	r0, r4
    b3fe:	f000 f884 	bl	b50a <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    b402:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    b404:	bf41      	itttt	mi
    b406:	6962      	ldrmi	r2, [r4, #20]
    b408:	6853      	ldrmi	r3, [r2, #4]
    b40a:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b40e:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    b410:	45b0      	cmp	r8, r6
    b412:	d904      	bls.n	b41e <zcbor_process_backup+0x5c>
    b414:	2204      	movs	r2, #4
    b416:	6963      	ldr	r3, [r4, #20]
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    b418:	2000      	movs	r0, #0
    b41a:	60da      	str	r2, [r3, #12]
    b41c:	e7db      	b.n	b3d6 <zcbor_process_backup+0x14>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    b41e:	076b      	lsls	r3, r5, #29
	return true;
    b420:	f04f 0001 	mov.w	r0, #1
		state->payload = payload;
    b424:	bf48      	it	mi
    b426:	6027      	strmi	r7, [r4, #0]
    b428:	e7d5      	b.n	b3d6 <zcbor_process_backup+0x14>

0000b42a <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    b42a:	6881      	ldr	r1, [r0, #8]
    b42c:	f7ff bfaf 	b.w	b38e <zcbor_new_backup>

0000b430 <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    b430:	2101      	movs	r1, #1
    b432:	6882      	ldr	r2, [r0, #8]
    b434:	f7ff bfc5 	b.w	b3c2 <zcbor_process_backup>

0000b438 <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    b438:	2102      	movs	r1, #2
    b43a:	6882      	ldr	r2, [r0, #8]
    b43c:	f7ff bfc1 	b.w	b3c2 <zcbor_process_backup>

0000b440 <zcbor_new_state>:
	return true;
}

bool zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    b440:	b530      	push	{r4, r5, lr}
	state_array[0].payload = payload;
    b442:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    b444:	441a      	add	r2, r3
	state_array[0].elem_count = elem_count;
    b446:	9b03      	ldr	r3, [sp, #12]
	state_array[0].indefinite_length_array = false;
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    b448:	2901      	cmp	r1, #1
	state_array[0].elem_count = elem_count;
    b44a:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    b44c:	f04f 0300 	mov.w	r3, #0
	state_array[0].payload_end = payload + payload_len;
    b450:	60c2      	str	r2, [r0, #12]
	state_array[0].indefinite_length_array = false;
    b452:	8203      	strh	r3, [r0, #16]
	if(n_states < 2) {
    b454:	d802      	bhi.n	b45c <zcbor_new_state+0x1c>
	state_array[0].constant_state = NULL;
    b456:	6143      	str	r3, [r0, #20]
		return false;
    b458:	4618      	mov	r0, r3
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
	return true;
}
    b45a:	bd30      	pop	{r4, r5, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    b45c:	2218      	movs	r2, #24
    b45e:	434a      	muls	r2, r1
    b460:	3a18      	subs	r2, #24
    b462:	1884      	adds	r4, r0, r2
	if (n_states > 2) {
    b464:	2902      	cmp	r1, #2
	state_array[0].constant_state->num_backups = n_states - 2;
    b466:	f1a1 0502 	sub.w	r5, r1, #2
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    b46a:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
    b46c:	5083      	str	r3, [r0, r2]
	state_array[0].constant_state->current_backup = 0;
    b46e:	e9c4 3501 	strd	r3, r5, [r4, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    b472:	60e3      	str	r3, [r4, #12]
		state_array[0].constant_state->backup_list = &state_array[1];
    b474:	bf1c      	itt	ne
    b476:	f100 0318 	addne.w	r3, r0, #24
    b47a:	5083      	strne	r3, [r0, r2]
	return true;
    b47c:	2001      	movs	r0, #1
    b47e:	e7ec      	b.n	b45a <zcbor_new_state+0x1a>

0000b480 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b480:	f002 ba64 	b.w	d94c <z_fatal_error>

0000b484 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    b484:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    b486:	6800      	ldr	r0, [r0, #0]
    b488:	f002 ba60 	b.w	d94c <z_fatal_error>

0000b48c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b48c:	2100      	movs	r1, #0
    b48e:	2001      	movs	r0, #1
    b490:	f7ff bff6 	b.w	b480 <z_arm_fatal_error>

0000b494 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b494:	b508      	push	{r3, lr}
	handler();
    b496:	f7f8 fb61 	bl	3b5c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    b49a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    b49e:	f7f8 bc17 	b.w	3cd0 <z_arm_exc_exit>

0000b4a2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    b4a2:	6e03      	ldr	r3, [r0, #96]	; 0x60
    b4a4:	f383 880b 	msr	PSPLIM, r3
}
    b4a8:	4770      	bx	lr

0000b4aa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b4aa:	4603      	mov	r3, r0
	size_t n = 0;
    b4ac:	2000      	movs	r0, #0

	while (*s != '\0') {
    b4ae:	5c1a      	ldrb	r2, [r3, r0]
    b4b0:	b902      	cbnz	r2, b4b4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    b4b2:	4770      	bx	lr
		n++;
    b4b4:	3001      	adds	r0, #1
    b4b6:	e7fa      	b.n	b4ae <strlen+0x4>

0000b4b8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    b4b8:	4603      	mov	r3, r0
    b4ba:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    b4bc:	b15a      	cbz	r2, b4d6 <memcmp+0x1e>
    b4be:	3901      	subs	r1, #1
    b4c0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    b4c2:	f813 0b01 	ldrb.w	r0, [r3], #1
    b4c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    b4ca:	42a3      	cmp	r3, r4
    b4cc:	d001      	beq.n	b4d2 <memcmp+0x1a>
    b4ce:	4290      	cmp	r0, r2
    b4d0:	d0f7      	beq.n	b4c2 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    b4d2:	1a80      	subs	r0, r0, r2
}
    b4d4:	bd10      	pop	{r4, pc}
		return 0;
    b4d6:	4610      	mov	r0, r2
    b4d8:	e7fc      	b.n	b4d4 <memcmp+0x1c>

0000b4da <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    b4da:	1a43      	subs	r3, r0, r1
    b4dc:	4293      	cmp	r3, r2
{
    b4de:	b510      	push	{r4, lr}
    b4e0:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    b4e4:	d308      	bcc.n	b4f8 <memmove+0x1e>
	char *dest = d;
    b4e6:	4602      	mov	r2, r0
    b4e8:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    b4ea:	429a      	cmp	r2, r3
    b4ec:	d007      	beq.n	b4fe <memmove+0x24>
			*dest = *src;
    b4ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b4f2:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    b4f6:	e7f8      	b.n	b4ea <memmove+0x10>
    b4f8:	440a      	add	r2, r1
		while (n > 0) {
    b4fa:	428a      	cmp	r2, r1
    b4fc:	d100      	bne.n	b500 <memmove+0x26>
		}
	}

	return d;
}
    b4fe:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    b500:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    b504:	f803 4d01 	strb.w	r4, [r3, #-1]!
    b508:	e7f7      	b.n	b4fa <memmove+0x20>

0000b50a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    b50a:	b510      	push	{r4, lr}
    b50c:	1e43      	subs	r3, r0, #1
    b50e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    b510:	4291      	cmp	r1, r2
    b512:	d100      	bne.n	b516 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    b514:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    b516:	f811 4b01 	ldrb.w	r4, [r1], #1
    b51a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    b51e:	e7f7      	b.n	b510 <memcpy+0x6>

0000b520 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    b520:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    b522:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    b524:	4402      	add	r2, r0
    b526:	4293      	cmp	r3, r2
    b528:	d100      	bne.n	b52c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    b52a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    b52c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b530:	e7f9      	b.n	b526 <memset+0x6>

0000b532 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    b532:	684b      	ldr	r3, [r1, #4]
    b534:	2b01      	cmp	r3, #1
    b536:	dd07      	ble.n	b548 <sprintf_out+0x16>
		*(p->ptr) = c;
    b538:	680b      	ldr	r3, [r1, #0]
    b53a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    b53c:	680b      	ldr	r3, [r1, #0]
    b53e:	3301      	adds	r3, #1
    b540:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    b542:	684b      	ldr	r3, [r1, #4]
    b544:	3b01      	subs	r3, #1
    b546:	604b      	str	r3, [r1, #4]
}
    b548:	2000      	movs	r0, #0
    b54a:	4770      	bx	lr

0000b54c <setup>:
	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
	}

	return 0;
}
    b54c:	2000      	movs	r0, #0
    b54e:	4770      	bx	lr

0000b550 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    b550:	6903      	ldr	r3, [r0, #16]
{
    b552:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    b554:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    b558:	2300      	movs	r3, #0
    b55a:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    b55c:	7f83      	ldrb	r3, [r0, #30]
{
    b55e:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    b560:	b113      	cbz	r3, b568 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    b562:	7a40      	ldrb	r0, [r0, #9]
    b564:	f002 f9d9 	bl	d91a <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    b568:	2301      	movs	r3, #1
    b56a:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    b56c:	2300      	movs	r3, #0
    b56e:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    b570:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    b572:	77a3      	strb	r3, [r4, #30]
}
    b574:	bd10      	pop	{r4, pc}

0000b576 <attached_evt_delay_handler>:
	submit_dc_power_event(USBD_ATTACHED);
    b576:	2001      	movs	r0, #1
    b578:	f7f8 bdf6 	b.w	4168 <submit_dc_power_event>

0000b57c <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    b57c:	f7fd bb9c 	b.w	8cb8 <z_impl_k_mutex_lock>

0000b580 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b580:	f7fd bc12 	b.w	8da8 <z_impl_k_mutex_unlock>

0000b584 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    b584:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    b586:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    b588:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    b58c:	b921      	cbnz	r1, b598 <usb_dc_ep_check_cap+0x14>
    b58e:	1e10      	subs	r0, r2, #0
    b590:	bf18      	it	ne
    b592:	2001      	movne	r0, #1
    b594:	4240      	negs	r0, r0
    b596:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    b598:	2a08      	cmp	r2, #8
    b59a:	d806      	bhi.n	b5aa <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    b59c:	2901      	cmp	r1, #1
    b59e:	d107      	bne.n	b5b0 <usb_dc_ep_check_cap+0x2c>
    b5a0:	f083 0008 	eor.w	r0, r3, #8
    b5a4:	f340 00c0 	sbfx	r0, r0, #3, #1
    b5a8:	4770      	bx	lr
		return -1;
    b5aa:	f04f 30ff 	mov.w	r0, #4294967295
    b5ae:	4770      	bx	lr
	return 0;
    b5b0:	2000      	movs	r0, #0
}
    b5b2:	4770      	bx	lr

0000b5b4 <usb_dc_ep_read>:
{
    b5b4:	b570      	push	{r4, r5, r6, lr}
    b5b6:	4604      	mov	r4, r0
    b5b8:	460e      	mov	r6, r1
    b5ba:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    b5bc:	f7f9 fa96 	bl	4aec <usb_dc_ep_read_wait>
	if (ret) {
    b5c0:	b930      	cbnz	r0, b5d0 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    b5c2:	b906      	cbnz	r6, b5c6 <usb_dc_ep_read+0x12>
    b5c4:	b125      	cbz	r5, b5d0 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    b5c6:	4620      	mov	r0, r4
}
    b5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    b5cc:	f7f9 bad6 	b.w	4b7c <usb_dc_ep_read_continue>
}
    b5d0:	bd70      	pop	{r4, r5, r6, pc}

0000b5d2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b5d2:	220c      	movs	r2, #12
    b5d4:	6903      	ldr	r3, [r0, #16]
    b5d6:	b2c9      	uxtb	r1, r1
    b5d8:	fb01 3302 	mla	r3, r1, r2, r3
    b5dc:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    b5de:	f000 0007 	and.w	r0, r0, #7
    b5e2:	4770      	bx	lr

0000b5e4 <set_on_state>:
    b5e4:	f04f 0320 	mov.w	r3, #32
    b5e8:	f3ef 8211 	mrs	r2, BASEPRI
    b5ec:	f383 8812 	msr	BASEPRI_MAX, r3
    b5f0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b5f4:	6803      	ldr	r3, [r0, #0]
    b5f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b5fa:	f043 0302 	orr.w	r3, r3, #2
    b5fe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b600:	f382 8811 	msr	BASEPRI, r2
    b604:	f3bf 8f6f 	isb	sy
}
    b608:	4770      	bx	lr

0000b60a <stop>:
{
    b60a:	4603      	mov	r3, r0
    b60c:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    b60e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    b610:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b612:	f04f 0420 	mov.w	r4, #32
    b616:	f3ef 8611 	mrs	r6, BASEPRI
    b61a:	f384 8812 	msr	BASEPRI_MAX, r4
    b61e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b622:	250c      	movs	r5, #12
    b624:	fb05 0401 	mla	r4, r5, r1, r0
    b628:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b62a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    b62e:	d001      	beq.n	b634 <stop+0x2a>
    b630:	42a2      	cmp	r2, r4
    b632:	d110      	bne.n	b656 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b634:	2201      	movs	r2, #1
    b636:	fb05 0001 	mla	r0, r5, r1, r0
    b63a:	6782      	str	r2, [r0, #120]	; 0x78
	int err = 0;
    b63c:	2000      	movs	r0, #0
	__asm__ volatile(
    b63e:	f386 8811 	msr	BASEPRI, r6
    b642:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b646:	b928      	cbnz	r0, b654 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    b648:	685b      	ldr	r3, [r3, #4]
    b64a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    b64e:	684b      	ldr	r3, [r1, #4]
    b650:	4798      	blx	r3
	return 0;
    b652:	2000      	movs	r0, #0
}
    b654:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    b656:	f04f 30ff 	mov.w	r0, #4294967295
    b65a:	e7f0      	b.n	b63e <stop+0x34>

0000b65c <api_stop>:
	return stop(dev, subsys, CTX_API);
    b65c:	2280      	movs	r2, #128	; 0x80
    b65e:	f7ff bfd4 	b.w	b60a <stop>

0000b662 <async_start>:
{
    b662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b664:	9f06      	ldr	r7, [sp, #24]
    b666:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    b668:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    b66a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b66c:	f04f 0020 	mov.w	r0, #32
    b670:	f3ef 8c11 	mrs	ip, BASEPRI
    b674:	f380 8812 	msr	BASEPRI_MAX, r0
    b678:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b67c:	260c      	movs	r6, #12
    b67e:	fb06 4601 	mla	r6, r6, r1, r4
    b682:	6fb0      	ldr	r0, [r6, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b684:	f000 0e07 	and.w	lr, r0, #7
    b688:	f1be 0f01 	cmp.w	lr, #1
    b68c:	d111      	bne.n	b6b2 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b68e:	67b7      	str	r7, [r6, #120]	; 0x78
	int err = 0;
    b690:	2600      	movs	r6, #0
	__asm__ volatile(
    b692:	f38c 8811 	msr	BASEPRI, ip
    b696:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b69a:	b946      	cbnz	r6, b6ae <async_start+0x4c>
	subdata->cb = cb;
    b69c:	200c      	movs	r0, #12
    b69e:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    b6a2:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    b6a6:	686b      	ldr	r3, [r5, #4]
    b6a8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    b6ac:	4798      	blx	r3
}
    b6ae:	4630      	mov	r0, r6
    b6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    b6b2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    b6b6:	4287      	cmp	r7, r0
    b6b8:	bf14      	ite	ne
    b6ba:	f04f 36ff 	movne.w	r6, #4294967295
    b6be:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    b6c2:	e7e6      	b.n	b692 <async_start+0x30>

0000b6c4 <api_start>:
{
    b6c4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b6c6:	2480      	movs	r4, #128	; 0x80
    b6c8:	9400      	str	r4, [sp, #0]
    b6ca:	f7ff ffca 	bl	b662 <async_start>
}
    b6ce:	b002      	add	sp, #8
    b6d0:	bd10      	pop	{r4, pc}

0000b6d2 <onoff_started_callback>:
{
    b6d2:	b410      	push	{r4}
	notify(mgr, 0);
    b6d4:	241c      	movs	r4, #28
	return &data->mgr[type];
    b6d6:	6900      	ldr	r0, [r0, #16]
    b6d8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    b6da:	fb03 0004 	mla	r0, r3, r4, r0
    b6de:	2100      	movs	r1, #0
}
    b6e0:	bc10      	pop	{r4}
	notify(mgr, 0);
    b6e2:	4710      	bx	r2

0000b6e4 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    b6e4:	2003      	movs	r0, #3
    b6e6:	f001 bfa1 	b.w	d62c <nrfx_clock_start>

0000b6ea <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    b6ea:	2002      	movs	r0, #2
    b6ec:	f001 bf9e 	b.w	d62c <nrfx_clock_start>

0000b6f0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b6f0:	2000      	movs	r0, #0
    b6f2:	f001 bf9b 	b.w	d62c <nrfx_clock_start>

0000b6f6 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    b6f6:	2003      	movs	r0, #3
    b6f8:	f001 bff8 	b.w	d6ec <nrfx_clock_stop>

0000b6fc <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    b6fc:	2002      	movs	r0, #2
    b6fe:	f001 bff5 	b.w	d6ec <nrfx_clock_stop>

0000b702 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b702:	2000      	movs	r0, #0
    b704:	f001 bff2 	b.w	d6ec <nrfx_clock_stop>

0000b708 <blocking_start_callback>:
{
    b708:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b70a:	f7fd bbbd 	b.w	8e88 <z_impl_k_sem_give>

0000b70e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b70e:	6843      	ldr	r3, [r0, #4]
}
    b710:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b712:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b714:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    b716:	600b      	str	r3, [r1, #0]
}
    b718:	4770      	bx	lr

0000b71a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b71a:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    b71c:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b720:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    b722:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    b726:	6098      	str	r0, [r3, #8]
}
    b728:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    b72a:	60d9      	str	r1, [r3, #12]
    b72c:	4770      	bx	lr

0000b72e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b72e:	6843      	ldr	r3, [r0, #4]
}
    b730:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b732:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    b734:	6099      	str	r1, [r3, #8]
}
    b736:	4770      	bx	lr

0000b738 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b738:	6843      	ldr	r3, [r0, #4]
}
    b73a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b73c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    b73e:	60d9      	str	r1, [r3, #12]
}
    b740:	4770      	bx	lr

0000b742 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b742:	6843      	ldr	r3, [r0, #4]
    b744:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b746:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    b748:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    b74c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    b74e:	6090      	str	r0, [r2, #8]
}
    b750:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    b752:	60d3      	str	r3, [r2, #12]
    b754:	4770      	bx	lr

0000b756 <gpio_nrfx_manage_callback>:
	return port->data;
    b756:	6903      	ldr	r3, [r0, #16]
{
    b758:	b530      	push	{r4, r5, lr}
	return list->head;
    b75a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    b75c:	b158      	cbz	r0, b776 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b75e:	2400      	movs	r4, #0
    b760:	4281      	cmp	r1, r0
    b762:	d112      	bne.n	b78a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    b764:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    b766:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    b768:	b954      	cbnz	r4, b780 <gpio_nrfx_manage_callback+0x2a>
    b76a:	428d      	cmp	r5, r1
	list->head = node;
    b76c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    b76e:	d100      	bne.n	b772 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    b770:	6098      	str	r0, [r3, #8]
	parent->next = child;
    b772:	2000      	movs	r0, #0
    b774:	6008      	str	r0, [r1, #0]
	if (set) {
    b776:	b96a      	cbnz	r2, b794 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    b778:	2000      	movs	r0, #0
}
    b77a:	bd30      	pop	{r4, r5, pc}
    b77c:	4628      	mov	r0, r5
    b77e:	e7ef      	b.n	b760 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    b780:	428d      	cmp	r5, r1
	parent->next = child;
    b782:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b784:	bf08      	it	eq
    b786:	609c      	streq	r4, [r3, #8]
}
    b788:	e7f3      	b.n	b772 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    b78a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b78c:	4604      	mov	r4, r0
    b78e:	2d00      	cmp	r5, #0
    b790:	d1f4      	bne.n	b77c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    b792:	b13a      	cbz	r2, b7a4 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    b794:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    b796:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    b798:	600a      	str	r2, [r1, #0]
	list->head = node;
    b79a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    b79c:	2800      	cmp	r0, #0
    b79e:	d1eb      	bne.n	b778 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    b7a0:	6099      	str	r1, [r3, #8]
}
    b7a2:	e7ea      	b.n	b77a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    b7a4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    b7a8:	e7e7      	b.n	b77a <gpio_nrfx_manage_callback+0x24>

0000b7aa <z_impl_hwinfo_get_device_id>:
}

NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
    b7aa:	2908      	cmp	r1, #8
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    b7ac:	b513      	push	{r0, r1, r4, lr}
    b7ae:	bf28      	it	cs
    b7b0:	2108      	movcs	r1, #8
    b7b2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    b7b6:	460c      	mov	r4, r1
    b7b8:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
    b7bc:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    b7c0:	ba1b      	rev	r3, r3
    b7c2:	ba12      	rev	r2, r2
    b7c4:	9200      	str	r2, [sp, #0]

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    b7c6:	460a      	mov	r2, r1
    b7c8:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    b7ca:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    b7cc:	f7ff fe9d 	bl	b50a <memcpy>

	return length;
}
    b7d0:	4620      	mov	r0, r4
    b7d2:	b002      	add	sp, #8
    b7d4:	bd10      	pop	{r4, pc}

0000b7d6 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    b7d6:	4603      	mov	r3, r0
    b7d8:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    b7da:	7919      	ldrb	r1, [r3, #4]
    b7dc:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
    b7de:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    b7e0:	fa03 f101 	lsl.w	r1, r3, r1
    b7e4:	6903      	ldr	r3, [r0, #16]
    b7e6:	681b      	ldr	r3, [r3, #0]
    b7e8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    b7ea:	bf18      	it	ne
    b7ec:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    b7f0:	b112      	cbz	r2, b7f8 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    b7f2:	6883      	ldr	r3, [r0, #8]
    b7f4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    b7f6:	4718      	bx	r3
    b7f8:	6883      	ldr	r3, [r0, #8]
    b7fa:	691b      	ldr	r3, [r3, #16]
    b7fc:	e7fb      	b.n	b7f6 <gpio_pin_set_dt+0x20>

0000b7fe <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
    b7fe:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
    b800:	6904      	ldr	r4, [r0, #16]
{
    b802:	b085      	sub	sp, #20
	const struct driver_config *cfg = dev->config;
    b804:	6845      	ldr	r5, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
    b806:	a903      	add	r1, sp, #12
    b808:	4620      	mov	r0, r4
    b80a:	f7fe fe00 	bl	a40e <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    b80e:	7d29      	ldrb	r1, [r5, #20]
	int rc = onoff_sync_lock(&data->srv, &key);
    b810:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    b812:	f011 0101 	ands.w	r1, r1, #1
    b816:	d114      	bne.n	b842 <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
    b818:	2801      	cmp	r0, #1
    b81a:	d10c      	bne.n	b836 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    b81c:	f105 000c 	add.w	r0, r5, #12
    b820:	f7ff ffd9 	bl	b7d6 <gpio_pin_set_dt>
    b824:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    b826:	2200      	movs	r2, #0
    b828:	4620      	mov	r0, r4
    b82a:	9903      	ldr	r1, [sp, #12]
    b82c:	9200      	str	r2, [sp, #0]
    b82e:	f7fe fdf9 	bl	a424 <onoff_sync_finalize>
}
    b832:	b005      	add	sp, #20
    b834:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    b836:	2800      	cmp	r0, #0
    b838:	bf14      	ite	ne
    b83a:	4603      	movne	r3, r0
    b83c:	f06f 0315 	mvneq.w	r3, #21
    b840:	e7f1      	b.n	b826 <disable_sync+0x28>
		rc = 0;
    b842:	2300      	movs	r3, #0
    b844:	e7ef      	b.n	b826 <disable_sync+0x28>

0000b846 <enable_sync>:
{
    b846:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    b848:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    b84a:	6846      	ldr	r6, [r0, #4]
{
    b84c:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    b84e:	4628      	mov	r0, r5
    b850:	a903      	add	r1, sp, #12
    b852:	f7fe fddc 	bl	a40e <onoff_sync_lock>
	if ((rc == 0)
    b856:	4603      	mov	r3, r0
    b858:	b940      	cbnz	r0, b86c <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    b85a:	7d32      	ldrb	r2, [r6, #20]
    b85c:	07d2      	lsls	r2, r2, #31
    b85e:	d405      	bmi.n	b86c <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    b860:	2101      	movs	r1, #1
    b862:	f106 000c 	add.w	r0, r6, #12
    b866:	f7ff ffb6 	bl	b7d6 <gpio_pin_set_dt>
    b86a:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    b86c:	2201      	movs	r2, #1
    b86e:	4628      	mov	r0, r5
    b870:	9200      	str	r2, [sp, #0]
    b872:	9903      	ldr	r1, [sp, #12]
    b874:	4622      	mov	r2, r4
    b876:	f7fe fdd5 	bl	a424 <onoff_sync_finalize>
}
    b87a:	b004      	add	sp, #16
    b87c:	bd70      	pop	{r4, r5, r6, pc}

0000b87e <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    b87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b880:	6845      	ldr	r5, [r0, #4]
	if (!device_is_ready(cfg->enable.port)) {
    b882:	68e8      	ldr	r0, [r5, #12]
    b884:	f002 f84c 	bl	d920 <z_device_is_ready>
    b888:	b340      	cbz	r0, b8dc <regulator_fixed_init_sync+0x5e>
	if (on) {
    b88a:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    b88c:	8a6b      	ldrh	r3, [r5, #18]
    b88e:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    b892:	bf16      	itet	ne
    b894:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
    b898:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
    b89c:	686c      	ldrne	r4, [r5, #4]
	return gpio_pin_configure(spec->port,
    b89e:	68e8      	ldr	r0, [r5, #12]
    b8a0:	7c29      	ldrb	r1, [r5, #16]
    b8a2:	4313      	orrs	r3, r2
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b8a4:	2601      	movs	r6, #1
	struct gpio_driver_data *data =
    b8a6:	6907      	ldr	r7, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    b8a8:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b8aa:	683d      	ldr	r5, [r7, #0]
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    b8ac:	bf48      	it	mi
    b8ae:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
	const struct gpio_driver_api *api =
    b8b2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    b8b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b8ba:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b8bc:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b8be:	bf4c      	ite	mi
    b8c0:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b8c2:	43b5      	bicpl	r5, r6
    b8c4:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    b8c6:	f8dc 3000 	ldr.w	r3, [ip]
    b8ca:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    b8cc:	4605      	mov	r5, r0
    b8ce:	b918      	cbnz	r0, b8d8 <regulator_fixed_init_sync+0x5a>
    b8d0:	b114      	cbz	r4, b8d8 <regulator_fixed_init_sync+0x5a>
	z_impl_k_busy_wait(usec_to_wait);
    b8d2:	4620      	mov	r0, r4
    b8d4:	f002 fa95 	bl	de02 <z_impl_k_busy_wait>
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);

	return rc;
}
    b8d8:	4628      	mov	r0, r5
    b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    b8dc:	f06f 0512 	mvn.w	r5, #18
	return rc;
    b8e0:	e7fa      	b.n	b8d8 <regulator_fixed_init_sync+0x5a>

0000b8e2 <k_sem_give>:
	z_impl_k_sem_give(sem);
    b8e2:	f7fd bad1 	b.w	8e88 <z_impl_k_sem_give>

0000b8e6 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    b8e6:	b918      	cbnz	r0, b8f0 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
    b8e8:	f101 0020 	add.w	r0, r1, #32
    b8ec:	f7ff bff9 	b.w	b8e2 <k_sem_give>
}
    b8f0:	4770      	bx	lr

0000b8f2 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    b8f2:	f04f 32ff 	mov.w	r2, #4294967295
    b8f6:	f04f 33ff 	mov.w	r3, #4294967295
    b8fa:	3010      	adds	r0, #16
    b8fc:	f7fd bae4 	b.w	8ec8 <z_impl_k_sem_take>

0000b900 <qspi_trans_lock.isra.0>:
    b900:	f04f 32ff 	mov.w	r2, #4294967295
    b904:	f04f 33ff 	mov.w	r3, #4294967295
    b908:	f7fd bade 	b.w	8ec8 <z_impl_k_sem_take>

0000b90c <qspi_send_cmd>:
{
    b90c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cmd->tx_buf) {
    b90e:	684c      	ldr	r4, [r1, #4]
{
    b910:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
    b912:	b374      	cbz	r4, b972 <qspi_send_cmd+0x66>
		tx_buf = cmd->tx_buf->buf;
    b914:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
    b918:	6888      	ldr	r0, [r1, #8]
    b91a:	b360      	cbz	r0, b976 <qspi_send_cmd+0x6a>
		rx_len = cmd->rx_buf->len;
    b91c:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    b920:	b350      	cbz	r0, b978 <qspi_send_cmd+0x6c>
    b922:	b34b      	cbz	r3, b978 <qspi_send_cmd+0x6c>
		if (rx_len != tx_len) {
    b924:	4298      	cmp	r0, r3
    b926:	d12a      	bne.n	b97e <qspi_send_cmd+0x72>
		xfer_len += tx_len;
    b928:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    b92a:	2b09      	cmp	r3, #9
    b92c:	d827      	bhi.n	b97e <qspi_send_cmd+0x72>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    b92e:	f88d 3001 	strb.w	r3, [sp, #1]
    b932:	2301      	movs	r3, #1
    b934:	f88d 3002 	strb.w	r3, [sp, #2]
    b938:	f88d 3003 	strb.w	r3, [sp, #3]
    b93c:	2300      	movs	r3, #0
    b93e:	7809      	ldrb	r1, [r1, #0]
	qspi_lock(dev);
    b940:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    b942:	f88d 3004 	strb.w	r3, [sp, #4]
    b946:	f88d 1000 	strb.w	r1, [sp]
    b94a:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
    b94e:	f7ff ffd0 	bl	b8f2 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    b952:	4621      	mov	r1, r4
    b954:	4632      	mov	r2, r6
    b956:	4668      	mov	r0, sp
    b958:	f7fb ff78 	bl	784c <nrfx_qspi_cinstr_xfer>
    b95c:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
    b95e:	6928      	ldr	r0, [r5, #16]
    b960:	3010      	adds	r0, #16
    b962:	f7ff ffbe 	bl	b8e2 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
    b966:	4620      	mov	r0, r4
}
    b968:	b002      	add	sp, #8
    b96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
    b96e:	f7f9 bc3f 	b.w	51f0 <qspi_get_zephyr_ret_code>
	size_t tx_len = 0;
    b972:	4623      	mov	r3, r4
    b974:	e7d0      	b.n	b918 <qspi_send_cmd+0xc>
	void *rx_buf = NULL;
    b976:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    b978:	3301      	adds	r3, #1
    b97a:	4403      	add	r3, r0
    b97c:	e7d5      	b.n	b92a <qspi_send_cmd+0x1e>
}
    b97e:	f06f 0015 	mvn.w	r0, #21
    b982:	b002      	add	sp, #8
    b984:	bd70      	pop	{r4, r5, r6, pc}

0000b986 <qspi_nor_write_protection_set>:
{
    b986:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    b988:	2200      	movs	r2, #0
    b98a:	4291      	cmp	r1, r2
    b98c:	bf14      	ite	ne
    b98e:	2304      	movne	r3, #4
    b990:	2306      	moveq	r3, #6
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    b992:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    b994:	e9cd 2201 	strd	r2, r2, [sp, #4]
    b998:	9203      	str	r2, [sp, #12]
    b99a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    b99e:	f7ff ffb5 	bl	b90c <qspi_send_cmd>
		ret = -EIO;
    b9a2:	2800      	cmp	r0, #0
}
    b9a4:	bf18      	it	ne
    b9a6:	f06f 0004 	mvnne.w	r0, #4
    b9aa:	b005      	add	sp, #20
    b9ac:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9b0 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    b9b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    b9b2:	23ff      	movs	r3, #255	; 0xff
    b9b4:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    b9b8:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    b9bc:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    b9be:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    b9c0:	2301      	movs	r3, #1
    b9c2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    b9c6:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    b9c8:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    b9ca:	f88d 300c 	strb.w	r3, [sp, #12]
    b9ce:	ab01      	add	r3, sp, #4
    b9d0:	9204      	str	r2, [sp, #16]
    b9d2:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    b9d4:	f7ff ff9a 	bl	b90c <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    b9d8:	2800      	cmp	r0, #0
    b9da:	bfa8      	it	ge
    b9dc:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    b9e0:	b007      	add	sp, #28
    b9e2:	f85d fb04 	ldr.w	pc, [sp], #4

0000b9e6 <is_regular_addr_valid>:
{
    b9e6:	b538      	push	{r3, r4, r5, lr}
    b9e8:	4605      	mov	r5, r0
    b9ea:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    b9ec:	f001 fee9 	bl	d7c2 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    b9f0:	2d00      	cmp	r5, #0
    b9f2:	db07      	blt.n	ba04 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    b9f4:	42a8      	cmp	r0, r5
    b9f6:	d905      	bls.n	ba04 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    b9f8:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    b9fa:	4284      	cmp	r4, r0
    b9fc:	bf8c      	ite	hi
    b9fe:	2000      	movhi	r0, #0
    ba00:	2001      	movls	r0, #1
}
    ba02:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    ba04:	2000      	movs	r0, #0
    ba06:	e7fc      	b.n	ba02 <is_regular_addr_valid+0x1c>

0000ba08 <flash_nrf_read>:
{
    ba08:	b570      	push	{r4, r5, r6, lr}
    ba0a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    ba0c:	4619      	mov	r1, r3
    ba0e:	4628      	mov	r0, r5
{
    ba10:	4616      	mov	r6, r2
    ba12:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    ba14:	f7ff ffe7 	bl	b9e6 <is_regular_addr_valid>
    ba18:	b138      	cbz	r0, ba2a <flash_nrf_read+0x22>
	if (!len) {
    ba1a:	b14c      	cbz	r4, ba30 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
    ba1c:	4622      	mov	r2, r4
    ba1e:	4629      	mov	r1, r5
    ba20:	4630      	mov	r0, r6
    ba22:	f7ff fd72 	bl	b50a <memcpy>
	return 0;
    ba26:	2000      	movs	r0, #0
}
    ba28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ba2a:	f06f 0015 	mvn.w	r0, #21
    ba2e:	e7fb      	b.n	ba28 <flash_nrf_read+0x20>
		return 0;
    ba30:	4620      	mov	r0, r4
    ba32:	e7f9      	b.n	ba28 <flash_nrf_read+0x20>

0000ba34 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    ba34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ba38:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    ba3a:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
    ba3e:	6883      	ldr	r3, [r0, #8]
{
    ba40:	460d      	mov	r5, r1
    ba42:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    ba44:	4669      	mov	r1, sp
    ba46:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
    ba48:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
    ba4c:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    ba50:	aa01      	add	r2, sp, #4
    ba52:	4798      	blx	r3

	while (layout_size--) {
    ba54:	e9dd 7c00 	ldrd	r7, ip, [sp]
    ba58:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    ba5a:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    ba5e:	4560      	cmp	r0, ip
    ba60:	d104      	bne.n	ba6c <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    ba62:	f06f 0015 	mvn.w	r0, #21
}
    ba66:	b003      	add	sp, #12
    ba68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    ba6c:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    ba70:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    ba72:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    ba74:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    ba78:	b97d      	cbnz	r5, ba9a <flash_get_page_info+0x66>
			index_jmp = index - info->index;
    ba7a:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    ba7c:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
    ba80:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
    ba82:	4543      	cmp	r3, r8
    ba84:	bf28      	it	cs
    ba86:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    ba88:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    ba8c:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    ba8e:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    ba90:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    ba92:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    ba94:	d9e3      	bls.n	ba5e <flash_get_page_info+0x2a>
			return 0;
    ba96:	2000      	movs	r0, #0
    ba98:	e7e5      	b.n	ba66 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    ba9a:	1aab      	subs	r3, r5, r2
    ba9c:	fbb3 f3f9 	udiv	r3, r3, r9
    baa0:	e7ec      	b.n	ba7c <flash_get_page_info+0x48>

0000baa2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    baa2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    baa4:	2200      	movs	r2, #0
    baa6:	f7ff bfc5 	b.w	ba34 <flash_get_page_info>

0000baaa <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    baaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    baae:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    bab0:	6883      	ldr	r3, [r0, #8]
{
    bab2:	b086      	sub	sp, #24
    bab4:	4688      	mov	r8, r1
    bab6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    bab8:	691b      	ldr	r3, [r3, #16]
    baba:	aa02      	add	r2, sp, #8
    babc:	a901      	add	r1, sp, #4
    babe:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    bac0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    bac2:	4625      	mov	r5, r4
    bac4:	9b02      	ldr	r3, [sp, #8]
    bac6:	42ab      	cmp	r3, r5
    bac8:	d802      	bhi.n	bad0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    baca:	b006      	add	sp, #24
    bacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    bad0:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    bad2:	9f01      	ldr	r7, [sp, #4]
    bad4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    bad8:	687b      	ldr	r3, [r7, #4]
    bada:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    badc:	683a      	ldr	r2, [r7, #0]
    bade:	eb0a 0306 	add.w	r3, sl, r6
    bae2:	42b2      	cmp	r2, r6
    bae4:	d802      	bhi.n	baec <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    bae6:	469a      	mov	sl, r3
    bae8:	3501      	adds	r5, #1
    baea:	e7eb      	b.n	bac4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    baec:	4649      	mov	r1, r9
    baee:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    baf0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    baf2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    baf4:	47c0      	blx	r8
    baf6:	2800      	cmp	r0, #0
    baf8:	d0e7      	beq.n	baca <flash_page_foreach+0x20>
			off += page_info.size;
    bafa:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    bafc:	3601      	adds	r6, #1
			off += page_info.size;
    bafe:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    bb00:	e7ec      	b.n	badc <flash_page_foreach+0x32>

0000bb02 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    bb02:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    bb04:	6843      	ldr	r3, [r0, #4]
    bb06:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    bb08:	7a03      	ldrb	r3, [r0, #8]
    bb0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    bb0e:	3b01      	subs	r3, #1
    bb10:	00db      	lsls	r3, r3, #3
    bb12:	6845      	ldr	r5, [r0, #4]
    bb14:	6814      	ldr	r4, [r2, #0]
    bb16:	441d      	add	r5, r3
    bb18:	42ac      	cmp	r4, r5
    bb1a:	d902      	bls.n	bb22 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    bb1c:	f06f 0001 	mvn.w	r0, #1
}
    bb20:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    bb22:	7965      	ldrb	r5, [r4, #5]
    bb24:	428d      	cmp	r5, r1
    bb26:	d002      	beq.n	bb2e <pinctrl_lookup_state+0x2c>
		(*state)++;
    bb28:	3408      	adds	r4, #8
    bb2a:	6014      	str	r4, [r2, #0]
    bb2c:	e7f1      	b.n	bb12 <pinctrl_lookup_state+0x10>
			return 0;
    bb2e:	2000      	movs	r0, #0
    bb30:	e7f6      	b.n	bb20 <pinctrl_lookup_state+0x1e>

0000bb32 <nrf_gpio_pin_write>:
    if (value == 0)
    bb32:	b909      	cbnz	r1, bb38 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    bb34:	f7fa b978 	b.w	5e28 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    bb38:	f7fa b9ac 	b.w	5e94 <nrf_gpio_pin_set>

0000bb3c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb40:	4616      	mov	r6, r2
    bb42:	4605      	mov	r5, r0
    bb44:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    bb48:	42af      	cmp	r7, r5
    bb4a:	d102      	bne.n	bb52 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    bb4c:	2000      	movs	r0, #0
}
    bb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    bb52:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    bb54:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    bb56:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    bb5a:	2b22      	cmp	r3, #34	; 0x22
    bb5c:	f200 8097 	bhi.w	bc8e <pinctrl_configure_pins+0x152>
    bb60:	e8df f003 	tbb	[pc, r3]
    bb64:	2b261e12 	.word	0x2b261e12
    bb68:	952b4130 	.word	0x952b4130
    bb6c:	4b959595 	.word	0x4b959595
    bb70:	95959555 	.word	0x95959555
    bb74:	95959595 	.word	0x95959595
    bb78:	665a9595 	.word	0x665a9595
    bb7c:	9595706b 	.word	0x9595706b
    bb80:	817c7595 	.word	0x817c7595
    bb84:	8b86      	.short	0x8b86
    bb86:	90          	.byte	0x90
    bb87:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    bb88:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bb8c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    bb90:	6828      	ldr	r0, [r5, #0]
    bb92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    bb96:	f7fa f97d 	bl	5e94 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    bb9a:	4643      	mov	r3, r8
    bb9c:	2201      	movs	r2, #1
    bb9e:	e01c      	b.n	bbda <pinctrl_configure_pins+0x9e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    bba0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bba4:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bba8:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bbaa:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bbac:	2100      	movs	r1, #0
    bbae:	e015      	b.n	bbdc <pinctrl_configure_pins+0xa0>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    bbb0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bbb4:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    bbb8:	e7ea      	b.n	bb90 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    bbba:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bbbe:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
    bbc2:	e7f1      	b.n	bba8 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    bbc4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bbc8:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    bbcc:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
    bbce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    bbd2:	f7fa f929 	bl	5e28 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    bbd6:	4643      	mov	r3, r8
    bbd8:	2200      	movs	r2, #0
    bbda:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bbdc:	6828      	ldr	r0, [r5, #0]
    bbde:	f7fa f933 	bl	5e48 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    bbe2:	3504      	adds	r5, #4
    bbe4:	e7b0      	b.n	bb48 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    bbe6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bbea:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    bbee:	6828      	ldr	r0, [r5, #0]
    bbf0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    bbf4:	f7fa f918 	bl	5e28 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    bbf8:	e7cf      	b.n	bb9a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    bbfa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bbfe:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    bc02:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bc06:	bf14      	ite	ne
    bc08:	4643      	movne	r3, r8
    bc0a:	2306      	moveq	r3, #6
    bc0c:	e7cd      	b.n	bbaa <pinctrl_configure_pins+0x6e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    bc0e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc12:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    bc16:	e7f4      	b.n	bc02 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    bc18:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc1c:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    bc20:	6828      	ldr	r0, [r5, #0]
    bc22:	f3c0 3140 	ubfx	r1, r0, #13, #1
    bc26:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    bc2a:	f7ff ff82 	bl	bb32 <nrf_gpio_pin_write>
    bc2e:	e7b4      	b.n	bb9a <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    bc30:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc34:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    bc38:	e7f2      	b.n	bc20 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    bc3a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc3e:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    bc42:	e7ed      	b.n	bc20 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    bc44:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc48:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    bc4c:	e7e8      	b.n	bc20 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    bc4e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc52:	f8c6 4524 	str.w	r4, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bc56:	4643      	mov	r3, r8
    bc58:	2201      	movs	r2, #1
    bc5a:	e7a7      	b.n	bbac <pinctrl_configure_pins+0x70>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    bc5c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc60:	f8c6 4528 	str.w	r4, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bc64:	e7f7      	b.n	bc56 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    bc66:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc6a:	f8c6 4530 	str.w	r4, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bc6e:	e7f2      	b.n	bc56 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    bc70:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc74:	f8c6 4534 	str.w	r4, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bc78:	e7ed      	b.n	bc56 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    bc7a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc7e:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    bc82:	e7e8      	b.n	bc56 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    bc84:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    bc88:	f8c6 453c 	str.w	r4, [r6, #1340]	; 0x53c
    bc8c:	e7e3      	b.n	bc56 <pinctrl_configure_pins+0x11a>
		switch (NRF_GET_FUN(pins[i])) {
    bc8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    bc92:	e75c      	b.n	bb4e <pinctrl_configure_pins+0x12>

0000bc94 <boot_perform_update_hook>:
}
    bc94:	2001      	movs	r0, #1
    bc96:	4770      	bx	lr

0000bc98 <boot_read_swap_state_primary_slot_hook>:
	if (image_index == 1) {
    bc98:	2801      	cmp	r0, #1
		state->magic = BOOT_MAGIC_UNSET;
    bc9a:	bf01      	itttt	eq
    bc9c:	2303      	moveq	r3, #3
		state->swap_type = BOOT_SWAP_TYPE_NONE;
    bc9e:	7048      	strbeq	r0, [r1, #1]
		state->image_num = image_index;
    bca0:	7108      	strbeq	r0, [r1, #4]
		state->magic = BOOT_MAGIC_UNSET;
    bca2:	700b      	strbeq	r3, [r1, #0]
		return 0;
    bca4:	bf05      	ittet	eq
    bca6:	2000      	moveq	r0, #0
		state->copy_done = BOOT_FLAG_UNSET;
    bca8:	708b      	strbeq	r3, [r1, #2]
	return BOOT_HOOK_REGULAR;
    bcaa:	2001      	movne	r0, #1
		state->image_ok = BOOT_FLAG_UNSET;
    bcac:	70cb      	strbeq	r3, [r1, #3]
}
    bcae:	4770      	bx	lr

0000bcb0 <boot_copy_region_post_hook>:

int boot_copy_region_post_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_SECONDARY_SLOT) {
    bcb0:	2801      	cmp	r0, #1
    bcb2:	d101      	bne.n	bcb8 <boot_copy_region_post_hook+0x8>
		return network_core_update(true);
    bcb4:	f7fa b9b0 	b.w	6018 <network_core_update>
	}

	return 0;
}
    bcb8:	2000      	movs	r0, #0
    bcba:	4770      	bx	lr

0000bcbc <boot_serial_uploaded_hook>:

int boot_serial_uploaded_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    bcbc:	2803      	cmp	r0, #3
		return network_core_update(false);
    bcbe:	f04f 0000 	mov.w	r0, #0
	if (img_index == NET_CORE_VIRTUAL_PRIMARY_SLOT) {
    bcc2:	d101      	bne.n	bcc8 <boot_serial_uploaded_hook+0xc>
		return network_core_update(false);
    bcc4:	f7fa b9a8 	b.w	6018 <network_core_update>
	}

	return 0;
}
    bcc8:	4770      	bx	lr

0000bcca <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    bcca:	f7fd bf1d 	b.w	9b08 <nrf_cc3xx_platform_init_no_rng>

0000bcce <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    bcce:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    bcd0:	f7f7 f8aa 	bl	2e28 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    bcd4:	f7f7 f96e 	bl	2fb4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    bcd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    bcdc:	f7fd bf14 	b.w	9b08 <nrf_cc3xx_platform_init_no_rng>

0000bce0 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    bce0:	b538      	push	{r3, r4, r5, lr}
    bce2:	460c      	mov	r4, r1
    bce4:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    bce6:	f7ff f8de 	bl	aea6 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    bcea:	4621      	mov	r1, r4
    bcec:	4425      	add	r5, r4
    bcee:	42a9      	cmp	r1, r5
    bcf0:	d101      	bne.n	bcf6 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    bcf2:	2001      	movs	r0, #1
}
    bcf4:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    bcf6:	f811 3b01 	ldrb.w	r3, [r1], #1
    bcfa:	4298      	cmp	r0, r3
    bcfc:	d0f7      	beq.n	bcee <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    bcfe:	2000      	movs	r0, #0
    bd00:	e7f8      	b.n	bcf4 <bootutil_buffer_is_erased.part.0+0x14>

0000bd02 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    bd02:	6880      	ldr	r0, [r0, #8]
    bd04:	3818      	subs	r0, #24
    bd06:	f020 0007 	bic.w	r0, r0, #7
}
    bd0a:	3810      	subs	r0, #16
    bd0c:	4770      	bx	lr

0000bd0e <boot_magic_compatible_check>:
    switch (tbl_val) {
    bd0e:	2804      	cmp	r0, #4
    bd10:	d009      	beq.n	bd26 <boot_magic_compatible_check+0x18>
    bd12:	2805      	cmp	r0, #5
    bd14:	d103      	bne.n	bd1e <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    bd16:	1e48      	subs	r0, r1, #1
    bd18:	bf18      	it	ne
    bd1a:	2001      	movne	r0, #1
    bd1c:	4770      	bx	lr
        return tbl_val == val;
    bd1e:	1a43      	subs	r3, r0, r1
    bd20:	4258      	negs	r0, r3
    bd22:	4158      	adcs	r0, r3
    bd24:	4770      	bx	lr
    switch (tbl_val) {
    bd26:	2001      	movs	r0, #1
}
    bd28:	4770      	bx	lr

0000bd2a <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    bd2a:	b111      	cbz	r1, bd32 <bootutil_buffer_is_erased+0x8>
    bd2c:	b10a      	cbz	r2, bd32 <bootutil_buffer_is_erased+0x8>
    bd2e:	f7ff bfd7 	b.w	bce0 <bootutil_buffer_is_erased.part.0>
}
    bd32:	2000      	movs	r0, #0
    bd34:	4770      	bx	lr

0000bd36 <boot_read_flag>:
{
    bd36:	b538      	push	{r3, r4, r5, lr}
    bd38:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    bd3a:	2301      	movs	r3, #1
{
    bd3c:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    bd3e:	4622      	mov	r2, r4
{
    bd40:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    bd42:	f7ff f86b 	bl	ae1c <flash_area_read>
    if (rc < 0) {
    bd46:	2800      	cmp	r0, #0
    bd48:	db10      	blt.n	bd6c <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    bd4a:	2201      	movs	r2, #1
    bd4c:	4621      	mov	r1, r4
    bd4e:	4628      	mov	r0, r5
    bd50:	f7ff ffeb 	bl	bd2a <bootutil_buffer_is_erased>
    bd54:	b118      	cbz	r0, bd5e <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    bd56:	2303      	movs	r3, #3
    return 0;
    bd58:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    bd5a:	7023      	strb	r3, [r4, #0]
}
    bd5c:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    bd5e:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    bd60:	2b01      	cmp	r3, #1
    bd62:	bf0c      	ite	eq
    bd64:	2301      	moveq	r3, #1
    bd66:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    bd68:	7023      	strb	r3, [r4, #0]
    bd6a:	e7f7      	b.n	bd5c <boot_read_flag+0x26>
        return BOOT_EFLASH;
    bd6c:	2001      	movs	r0, #1
    bd6e:	e7f5      	b.n	bd5c <boot_read_flag+0x26>

0000bd70 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    bd70:	6882      	ldr	r2, [r0, #8]
    bd72:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    bd74:	f022 0207 	bic.w	r2, r2, #7
    bd78:	f7ff bfdd 	b.w	bd36 <boot_read_flag>

0000bd7c <boot_read_swap_state_by_id>:
{
    bd7c:	b513      	push	{r0, r1, r4, lr}
    bd7e:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    bd80:	b2c0      	uxtb	r0, r0
    bd82:	a901      	add	r1, sp, #4
    bd84:	f7f6 fff8 	bl	2d78 <flash_area_open>
    if (rc != 0) {
    bd88:	b950      	cbnz	r0, bda0 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    bd8a:	4621      	mov	r1, r4
    bd8c:	9801      	ldr	r0, [sp, #4]
    bd8e:	f7fa f98b 	bl	60a8 <boot_read_swap_state>
    bd92:	4604      	mov	r4, r0
    flash_area_close(fap);
    bd94:	9801      	ldr	r0, [sp, #4]
    bd96:	f7ff f840 	bl	ae1a <flash_area_close>
}
    bd9a:	4620      	mov	r0, r4
    bd9c:	b002      	add	sp, #8
    bd9e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    bda0:	2401      	movs	r4, #1
    bda2:	e7fa      	b.n	bd9a <boot_read_swap_state_by_id+0x1e>

0000bda4 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    bda4:	2000      	movs	r0, #0
    bda6:	4770      	bx	lr

0000bda8 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    bda8:	6803      	ldr	r3, [r0, #0]
{
    bdaa:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    bdac:	1acd      	subs	r5, r1, r3
    bdae:	2d00      	cmp	r5, #0
    bdb0:	dd0d      	ble.n	bdce <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    bdb2:	f993 6000 	ldrsb.w	r6, [r3]
    bdb6:	781c      	ldrb	r4, [r3, #0]
    bdb8:	2e00      	cmp	r6, #0
    bdba:	db0b      	blt.n	bdd4 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    bdbc:	1c5c      	adds	r4, r3, #1
    bdbe:	6004      	str	r4, [r0, #0]
    bdc0:	781b      	ldrb	r3, [r3, #0]
    bdc2:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    bdc4:	6803      	ldr	r3, [r0, #0]
    bdc6:	1ac9      	subs	r1, r1, r3
    bdc8:	6813      	ldr	r3, [r2, #0]
    bdca:	428b      	cmp	r3, r1
    bdcc:	d932      	bls.n	be34 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bdce:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    bdd2:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    bdd4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    bdd8:	3c01      	subs	r4, #1
    bdda:	2c03      	cmp	r4, #3
    bddc:	d827      	bhi.n	be2e <mbedtls_asn1_get_len+0x86>
    bdde:	e8df f004 	tbb	[pc, r4]
    bde2:	0902      	.short	0x0902
    bde4:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    bde6:	2d01      	cmp	r5, #1
    bde8:	d0f1      	beq.n	bdce <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    bdea:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    bdec:	3302      	adds	r3, #2
            *len = (*p)[1];
    bdee:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    bdf0:	6003      	str	r3, [r0, #0]
            break;
    bdf2:	e7e7      	b.n	bdc4 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    bdf4:	2d02      	cmp	r5, #2
    bdf6:	ddea      	ble.n	bdce <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    bdf8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    bdfc:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    bdfe:	ba64      	rev16	r4, r4
    be00:	b2a4      	uxth	r4, r4
    be02:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    be04:	e7f4      	b.n	bdf0 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    be06:	2d03      	cmp	r5, #3
    be08:	dde1      	ble.n	bdce <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    be0a:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    be0c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    be0e:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    be10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    be14:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    be16:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    be18:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    be1a:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    be1c:	e7e8      	b.n	bdf0 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    be1e:	2d04      	cmp	r5, #4
    be20:	ddd5      	ble.n	bdce <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    be22:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    be26:	3305      	adds	r3, #5
    be28:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    be2a:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    be2c:	e7e0      	b.n	bdf0 <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    be2e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    be32:	e7ce      	b.n	bdd2 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    be34:	2000      	movs	r0, #0
    be36:	e7cc      	b.n	bdd2 <mbedtls_asn1_get_len+0x2a>

0000be38 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    be38:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    be3a:	6804      	ldr	r4, [r0, #0]
    be3c:	1b0e      	subs	r6, r1, r4
    be3e:	2e00      	cmp	r6, #0
    be40:	dd07      	ble.n	be52 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    be42:	7826      	ldrb	r6, [r4, #0]
    be44:	429e      	cmp	r6, r3
    be46:	d108      	bne.n	be5a <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    be48:	3401      	adds	r4, #1
    be4a:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    be4c:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    be4e:	f7ff bfab 	b.w	bda8 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    be52:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    be56:	bc70      	pop	{r4, r5, r6}
    be58:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    be5a:	f06f 0061 	mvn.w	r0, #97	; 0x61
    be5e:	e7fa      	b.n	be56 <mbedtls_asn1_get_tag+0x1e>

0000be60 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    be60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    be62:	2302      	movs	r3, #2
{
    be64:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    be66:	aa01      	add	r2, sp, #4
{
    be68:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    be6a:	f7ff ffe5 	bl	be38 <mbedtls_asn1_get_tag>
    be6e:	b940      	cbnz	r0, be82 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    be70:	9a01      	ldr	r2, [sp, #4]
    be72:	4628      	mov	r0, r5
    be74:	6821      	ldr	r1, [r4, #0]
    be76:	f000 fb1b 	bl	c4b0 <mbedtls_mpi_read_binary>

    *p += len;
    be7a:	6823      	ldr	r3, [r4, #0]
    be7c:	9a01      	ldr	r2, [sp, #4]
    be7e:	4413      	add	r3, r2
    be80:	6023      	str	r3, [r4, #0]

    return( ret );
}
    be82:	b003      	add	sp, #12
    be84:	bd30      	pop	{r4, r5, pc}

0000be86 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    be86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    be8a:	4684      	mov	ip, r0
{
    be8c:	4688      	mov	r8, r1
    be8e:	460e      	mov	r6, r1
    be90:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    be92:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    be94:	f1bc 0f0f 	cmp.w	ip, #15
    be98:	f106 0640 	add.w	r6, r6, #64	; 0x40
    be9c:	f104 0440 	add.w	r4, r4, #64	; 0x40
    bea0:	d878      	bhi.n	bf94 <mpi_mul_hlp+0x10e>
    bea2:	f06f 060f 	mvn.w	r6, #15
    bea6:	0907      	lsrs	r7, r0, #4
    bea8:	fb06 0607 	mla	r6, r6, r7, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    beac:	2e07      	cmp	r6, #7
    beae:	ea4f 1c87 	mov.w	ip, r7, lsl #6
    beb2:	eb08 1487 	add.w	r4, r8, r7, lsl #6
    beb6:	eb02 1087 	add.w	r0, r2, r7, lsl #6
    beba:	d95d      	bls.n	bf78 <mpi_mul_hlp+0xf2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    bebc:	f858 700c 	ldr.w	r7, [r8, ip]
    for( ; i >= 8; i -= 8 )
    bec0:	3e08      	subs	r6, #8
        MULADDC_CORE   MULADDC_CORE
    bec2:	fba3 1707 	umull	r1, r7, r3, r7
    bec6:	186d      	adds	r5, r5, r1
    bec8:	f852 100c 	ldr.w	r1, [r2, ip]
    becc:	f147 0700 	adc.w	r7, r7, #0
    bed0:	186d      	adds	r5, r5, r1
    bed2:	f842 500c 	str.w	r5, [r2, ip]
    bed6:	6861      	ldr	r1, [r4, #4]
    bed8:	f147 0200 	adc.w	r2, r7, #0
    bedc:	fba3 5101 	umull	r5, r1, r3, r1
    bee0:	1952      	adds	r2, r2, r5
    bee2:	6845      	ldr	r5, [r0, #4]
    bee4:	f141 0100 	adc.w	r1, r1, #0
    bee8:	1952      	adds	r2, r2, r5
    beea:	6042      	str	r2, [r0, #4]
        MULADDC_CORE   MULADDC_CORE
    beec:	68a2      	ldr	r2, [r4, #8]
        MULADDC_CORE   MULADDC_CORE
    beee:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    bef2:	fba3 5202 	umull	r5, r2, r3, r2
    bef6:	1949      	adds	r1, r1, r5
    bef8:	6885      	ldr	r5, [r0, #8]
    befa:	f142 0200 	adc.w	r2, r2, #0
    befe:	1949      	adds	r1, r1, r5
    bf00:	6081      	str	r1, [r0, #8]
    bf02:	68e1      	ldr	r1, [r4, #12]
    bf04:	f142 0200 	adc.w	r2, r2, #0
    bf08:	fba3 5101 	umull	r5, r1, r3, r1
    bf0c:	1952      	adds	r2, r2, r5
    bf0e:	68c5      	ldr	r5, [r0, #12]
    bf10:	f141 0100 	adc.w	r1, r1, #0
    bf14:	1952      	adds	r2, r2, r5
    bf16:	60c2      	str	r2, [r0, #12]

        MULADDC_CORE   MULADDC_CORE
    bf18:	6922      	ldr	r2, [r4, #16]
        MULADDC_CORE   MULADDC_CORE
    bf1a:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    bf1e:	fba3 5202 	umull	r5, r2, r3, r2
    bf22:	1949      	adds	r1, r1, r5
    bf24:	6905      	ldr	r5, [r0, #16]
    bf26:	f142 0200 	adc.w	r2, r2, #0
    bf2a:	1949      	adds	r1, r1, r5
    bf2c:	6101      	str	r1, [r0, #16]
    bf2e:	6961      	ldr	r1, [r4, #20]
    bf30:	f142 0200 	adc.w	r2, r2, #0
    bf34:	fba3 5101 	umull	r5, r1, r3, r1
    bf38:	1952      	adds	r2, r2, r5
    bf3a:	6945      	ldr	r5, [r0, #20]
    bf3c:	f141 0100 	adc.w	r1, r1, #0
    bf40:	1952      	adds	r2, r2, r5
    bf42:	6142      	str	r2, [r0, #20]
        MULADDC_CORE   MULADDC_CORE
    bf44:	69a2      	ldr	r2, [r4, #24]
        MULADDC_CORE   MULADDC_CORE
    bf46:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    bf4a:	fba3 5202 	umull	r5, r2, r3, r2
    bf4e:	1949      	adds	r1, r1, r5
    bf50:	6985      	ldr	r5, [r0, #24]
    bf52:	f142 0200 	adc.w	r2, r2, #0
    bf56:	1949      	adds	r1, r1, r5
    bf58:	6181      	str	r1, [r0, #24]
    bf5a:	69e5      	ldr	r5, [r4, #28]
    bf5c:	f142 0200 	adc.w	r2, r2, #0
    bf60:	fba3 5105 	umull	r5, r1, r3, r5
    bf64:	1952      	adds	r2, r2, r5
    bf66:	f141 0500 	adc.w	r5, r1, #0
    bf6a:	69c1      	ldr	r1, [r0, #28]
    bf6c:	3420      	adds	r4, #32
    bf6e:	1852      	adds	r2, r2, r1
    bf70:	61c2      	str	r2, [r0, #28]
    bf72:	f145 0500 	adc.w	r5, r5, #0
    bf76:	3020      	adds	r0, #32
    bf78:	4607      	mov	r7, r0
    bf7a:	ea4f 0c86 	mov.w	ip, r6, lsl #2
    bf7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    bf82:	42a6      	cmp	r6, r4
    bf84:	f040 8105 	bne.w	c192 <CONFIG_PM_PARTITION_SIZE_MCUBOOT+0x192>
    bf88:	4460      	add	r0, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    bf8a:	2d00      	cmp	r5, #0
    bf8c:	f040 810f 	bne.w	c1ae <CONFIG_PM_PARTITION_SIZE_MCUBOOT+0x1ae>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MULADDC_CORE   MULADDC_CORE
    bf94:	f856 7c40 	ldr.w	r7, [r6, #-64]
    bf98:	f854 1c40 	ldr.w	r1, [r4, #-64]
    bf9c:	fba3 e707 	umull	lr, r7, r3, r7
    bfa0:	eb15 050e 	adds.w	r5, r5, lr
    bfa4:	f147 0700 	adc.w	r7, r7, #0
    bfa8:	194d      	adds	r5, r1, r5
    bfaa:	f844 5c40 	str.w	r5, [r4, #-64]
    bfae:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    bfb2:	f854 1c3c 	ldr.w	r1, [r4, #-60]
    bfb6:	fba3 e505 	umull	lr, r5, r3, r5
    bfba:	f147 0700 	adc.w	r7, r7, #0
    bfbe:	eb17 070e 	adds.w	r7, r7, lr
    bfc2:	f145 0500 	adc.w	r5, r5, #0
    bfc6:	19cf      	adds	r7, r1, r7
    bfc8:	f844 7c3c 	str.w	r7, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    bfcc:	f856 7c38 	ldr.w	r7, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    bfd0:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    bfd4:	fba3 e707 	umull	lr, r7, r3, r7
    bfd8:	eb15 0e0e 	adds.w	lr, r5, lr
    bfdc:	f854 5c38 	ldr.w	r5, [r4, #-56]
    bfe0:	f147 0700 	adc.w	r7, r7, #0
    bfe4:	eb15 050e 	adds.w	r5, r5, lr
    bfe8:	f844 5c38 	str.w	r5, [r4, #-56]
    bfec:	f856 5c34 	ldr.w	r5, [r6, #-52]
    bff0:	f147 0700 	adc.w	r7, r7, #0
    bff4:	fba3 e505 	umull	lr, r5, r3, r5
    bff8:	eb17 0e0e 	adds.w	lr, r7, lr
    bffc:	f854 7c34 	ldr.w	r7, [r4, #-52]
    c000:	f145 0500 	adc.w	r5, r5, #0
    c004:	eb17 070e 	adds.w	r7, r7, lr
    c008:	f844 7c34 	str.w	r7, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    c00c:	f856 7c30 	ldr.w	r7, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    c010:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c014:	fba3 e707 	umull	lr, r7, r3, r7
    c018:	eb15 0e0e 	adds.w	lr, r5, lr
    c01c:	f854 5c30 	ldr.w	r5, [r4, #-48]
    c020:	f147 0700 	adc.w	r7, r7, #0
    c024:	eb15 050e 	adds.w	r5, r5, lr
    c028:	f844 5c30 	str.w	r5, [r4, #-48]
    c02c:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    c030:	f147 0700 	adc.w	r7, r7, #0
    c034:	fba3 e505 	umull	lr, r5, r3, r5
    c038:	eb17 0e0e 	adds.w	lr, r7, lr
    c03c:	f854 7c2c 	ldr.w	r7, [r4, #-44]
    c040:	f145 0500 	adc.w	r5, r5, #0
    c044:	eb17 070e 	adds.w	r7, r7, lr
    c048:	f844 7c2c 	str.w	r7, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    c04c:	f856 7c28 	ldr.w	r7, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    c050:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c054:	fba3 e707 	umull	lr, r7, r3, r7
    c058:	eb15 0e0e 	adds.w	lr, r5, lr
    c05c:	f854 5c28 	ldr.w	r5, [r4, #-40]
    c060:	f147 0700 	adc.w	r7, r7, #0
    c064:	eb15 050e 	adds.w	r5, r5, lr
    c068:	f844 5c28 	str.w	r5, [r4, #-40]
    c06c:	f856 5c24 	ldr.w	r5, [r6, #-36]
    c070:	f147 0700 	adc.w	r7, r7, #0
    c074:	fba3 e505 	umull	lr, r5, r3, r5
    c078:	eb17 0e0e 	adds.w	lr, r7, lr
    c07c:	f854 7c24 	ldr.w	r7, [r4, #-36]
    c080:	f145 0500 	adc.w	r5, r5, #0
    c084:	eb17 070e 	adds.w	r7, r7, lr
    c088:	f844 7c24 	str.w	r7, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    c08c:	f856 7c20 	ldr.w	r7, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    c090:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c094:	fba3 e707 	umull	lr, r7, r3, r7
    c098:	eb15 0e0e 	adds.w	lr, r5, lr
    c09c:	f854 5c20 	ldr.w	r5, [r4, #-32]
    c0a0:	f147 0700 	adc.w	r7, r7, #0
    c0a4:	eb15 050e 	adds.w	r5, r5, lr
    c0a8:	f844 5c20 	str.w	r5, [r4, #-32]
    c0ac:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    c0b0:	f147 0700 	adc.w	r7, r7, #0
    c0b4:	fba3 e505 	umull	lr, r5, r3, r5
    c0b8:	eb17 0e0e 	adds.w	lr, r7, lr
    c0bc:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    c0c0:	f145 0500 	adc.w	r5, r5, #0
    c0c4:	eb17 070e 	adds.w	r7, r7, lr
    c0c8:	f844 7c1c 	str.w	r7, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    c0cc:	f856 7c18 	ldr.w	r7, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    c0d0:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c0d4:	fba3 e707 	umull	lr, r7, r3, r7
    c0d8:	eb15 0e0e 	adds.w	lr, r5, lr
    c0dc:	f854 5c18 	ldr.w	r5, [r4, #-24]
    c0e0:	f147 0700 	adc.w	r7, r7, #0
    c0e4:	eb15 050e 	adds.w	r5, r5, lr
    c0e8:	f844 5c18 	str.w	r5, [r4, #-24]
    c0ec:	f856 5c14 	ldr.w	r5, [r6, #-20]
    c0f0:	f147 0700 	adc.w	r7, r7, #0
    c0f4:	fba3 e505 	umull	lr, r5, r3, r5
    c0f8:	eb17 0e0e 	adds.w	lr, r7, lr
    c0fc:	f854 7c14 	ldr.w	r7, [r4, #-20]
    c100:	f145 0500 	adc.w	r5, r5, #0
    c104:	eb17 070e 	adds.w	r7, r7, lr
    c108:	f844 7c14 	str.w	r7, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    c10c:	f856 7c10 	ldr.w	r7, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    c110:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c114:	fba3 e707 	umull	lr, r7, r3, r7
    c118:	eb15 0e0e 	adds.w	lr, r5, lr
    c11c:	f854 5c10 	ldr.w	r5, [r4, #-16]
    c120:	f147 0700 	adc.w	r7, r7, #0
    c124:	eb15 050e 	adds.w	r5, r5, lr
    c128:	f844 5c10 	str.w	r5, [r4, #-16]
    c12c:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    c130:	f147 0700 	adc.w	r7, r7, #0
    c134:	fba3 e505 	umull	lr, r5, r3, r5
    c138:	eb17 0e0e 	adds.w	lr, r7, lr
    c13c:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    c140:	f145 0500 	adc.w	r5, r5, #0
    c144:	eb17 070e 	adds.w	r7, r7, lr
    c148:	f844 7c0c 	str.w	r7, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    c14c:	f856 7c08 	ldr.w	r7, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    c150:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    c154:	fba3 e707 	umull	lr, r7, r3, r7
    c158:	eb15 0e0e 	adds.w	lr, r5, lr
    c15c:	f854 5c08 	ldr.w	r5, [r4, #-8]
    c160:	f147 0700 	adc.w	r7, r7, #0
    c164:	eb15 050e 	adds.w	r5, r5, lr
    c168:	f844 5c08 	str.w	r5, [r4, #-8]
    c16c:	f856 5c04 	ldr.w	r5, [r6, #-4]
    c170:	f854 1c04 	ldr.w	r1, [r4, #-4]
    c174:	fba3 5e05 	umull	r5, lr, r3, r5
    c178:	f147 0700 	adc.w	r7, r7, #0
    c17c:	197f      	adds	r7, r7, r5
    c17e:	f14e 0500 	adc.w	r5, lr, #0
    c182:	19cf      	adds	r7, r1, r7
    c184:	f145 0500 	adc.w	r5, r5, #0
    c188:	f844 7c04 	str.w	r7, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    c18c:	f1ac 0c10 	sub.w	ip, ip, #16
    c190:	e680      	b.n	be94 <mpi_mul_hlp+0xe>
        MULADDC_CORE
    c192:	f854 2b04 	ldr.w	r2, [r4], #4
    c196:	fba3 2102 	umull	r2, r1, r3, r2
    c19a:	18ad      	adds	r5, r5, r2
    c19c:	f141 0200 	adc.w	r2, r1, #0
    c1a0:	6839      	ldr	r1, [r7, #0]
    c1a2:	1949      	adds	r1, r1, r5
    c1a4:	f142 0500 	adc.w	r5, r2, #0
    c1a8:	f847 1b04 	str.w	r1, [r7], #4
    for( ; i > 0; i-- )
    c1ac:	e6e9      	b.n	bf82 <mpi_mul_hlp+0xfc>
        *d += c; c = ( *d < c ); d++;
    c1ae:	6803      	ldr	r3, [r0, #0]
    c1b0:	195b      	adds	r3, r3, r5
    c1b2:	bf2c      	ite	cs
    c1b4:	2501      	movcs	r5, #1
    c1b6:	2500      	movcc	r5, #0
    c1b8:	f840 3b04 	str.w	r3, [r0], #4
    c1bc:	e6e5      	b.n	bf8a <mpi_mul_hlp+0x104>

0000c1be <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    c1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1c2:	468a      	mov	sl, r1
    c1c4:	4617      	mov	r7, r2
    c1c6:	b085      	sub	sp, #20
    c1c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c1ca:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    c1cc:	6862      	ldr	r2, [r4, #4]
    c1ce:	68a0      	ldr	r0, [r4, #8]
    c1d0:	2100      	movs	r1, #0
    c1d2:	0092      	lsls	r2, r2, #2
{
    c1d4:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    c1d6:	f7ff f9a3 	bl	b520 <memset>

    d = T->p;
    n = N->n;
    c1da:	687d      	ldr	r5, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    c1dc:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    c1e0:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    c1e2:	42ab      	cmp	r3, r5
    c1e4:	bf28      	it	cs
    c1e6:	462b      	movcs	r3, r5
    d = T->p;
    c1e8:	46b1      	mov	r9, r6

    for( i = 0; i < n; i++ )
    c1ea:	f04f 0800 	mov.w	r8, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    c1ee:	1c6c      	adds	r4, r5, #1
    m = ( B->n < n ) ? B->n : n;
    c1f0:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    c1f2:	00a4      	lsls	r4, r4, #2
        u0 = A->p[i];
    c1f4:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    c1f6:	45a8      	cmp	r8, r5
        u0 = A->p[i];
    c1f8:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    c1fa:	d122      	bne.n	c242 <mpi_montmul+0x84>
    c1fc:	3c04      	subs	r4, #4
    c1fe:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    c202:	4622      	mov	r2, r4
    c204:	4641      	mov	r1, r8
    c206:	f7ff f980 	bl	b50a <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    c20a:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c20e:	f8d7 e008 	ldr.w	lr, [r7, #8]
    d[n] += 1;
    c212:	3301      	adds	r3, #1
    c214:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mbedtls_mpi_uint c = 0, t, z;
    c218:	2300      	movs	r3, #0
    for( i = 0; i < n; i++ )
    c21a:	461a      	mov	r2, r3
    c21c:	f1a8 0004 	sub.w	r0, r8, #4
    c220:	4295      	cmp	r5, r2
    c222:	d12d      	bne.n	c280 <mpi_montmul+0xc2>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c224:	f856 2014 	ldr.w	r2, [r6, r4, lsl #1]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c228:	4628      	mov	r0, r5
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c22a:	1ad3      	subs	r3, r2, r3
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c22c:	4642      	mov	r2, r8
    c22e:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    c230:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c234:	6889      	ldr	r1, [r1, #8]
    c236:	b2db      	uxtb	r3, r3
}
    c238:	b005      	add	sp, #20
    c23a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    c23e:	f000 bfe8 	b.w	d212 <mbedtls_ct_mpi_uint_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    c242:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    c246:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    c24a:	f8d9 3000 	ldr.w	r3, [r9]
    c24e:	6808      	ldr	r0, [r1, #0]
    c250:	9a03      	ldr	r2, [sp, #12]
    c252:	fb00 330b 	mla	r3, r0, fp, r3
    c256:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    c258:	9801      	ldr	r0, [sp, #4]
    c25a:	464a      	mov	r2, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    c25c:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    c25e:	465b      	mov	r3, fp
    c260:	f7ff fe11 	bl	be86 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    c264:	464a      	mov	r2, r9
    c266:	9b02      	ldr	r3, [sp, #8]
    c268:	4628      	mov	r0, r5
    c26a:	68b9      	ldr	r1, [r7, #8]
    c26c:	f7ff fe0b 	bl	be86 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    c270:	2300      	movs	r3, #0
    c272:	f849 bb04 	str.w	fp, [r9], #4
    c276:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    c27a:	f108 0801 	add.w	r8, r8, #1
    c27e:	e7b9      	b.n	c1f4 <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    c280:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    c284:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    c288:	ebac 0103 	sub.w	r1, ip, r3
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    c28c:	42b9      	cmp	r1, r7
    c28e:	bf2c      	ite	cs
    c290:	f04f 0900 	movcs.w	r9, #0
    c294:	f04f 0901 	movcc.w	r9, #1
    c298:	1bc9      	subs	r1, r1, r7
    c29a:	459c      	cmp	ip, r3
    c29c:	bf2c      	ite	cs
    c29e:	464b      	movcs	r3, r9
    c2a0:	f109 0301 	addcc.w	r3, r9, #1
    c2a4:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    c2a6:	3201      	adds	r2, #1
    c2a8:	e7ba      	b.n	c220 <mpi_montmul+0x62>

0000c2aa <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    c2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    c2ac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    c2b0:	3901      	subs	r1, #1
    c2b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c2b6:	4281      	cmp	r1, r0
    c2b8:	d201      	bcs.n	c2be <mpi_bigendian_to_host.part.0+0x14>
}
    c2ba:	b002      	add	sp, #8
    c2bc:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    c2be:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    c2c0:	2500      	movs	r5, #0
    c2c2:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    c2c4:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c2c6:	eb0d 0203 	add.w	r2, sp, r3
    c2ca:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c2cc:	f812 6b01 	ldrb.w	r6, [r2], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c2d0:	3b01      	subs	r3, #1
    c2d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c2d6:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c2da:	d1f7      	bne.n	c2cc <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    c2dc:	680a      	ldr	r2, [r1, #0]
    c2de:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    c2e0:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c2e2:	f814 6b01 	ldrb.w	r6, [r4], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c2e6:	3a01      	subs	r2, #1
    c2e8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    c2ec:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    c2f0:	d1f7      	bne.n	c2e2 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    c2f2:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    c2f6:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    c2fa:	e7dc      	b.n	c2b6 <mpi_bigendian_to_host.part.0+0xc>

0000c2fc <mbedtls_mpi_init>:
    X->n = 0;
    c2fc:	2300      	movs	r3, #0
    c2fe:	2201      	movs	r2, #1
    X->p = NULL;
    c300:	6083      	str	r3, [r0, #8]
    X->n = 0;
    c302:	e9c0 2300 	strd	r2, r3, [r0]
}
    c306:	4770      	bx	lr

0000c308 <mbedtls_mpi_free>:
{
    c308:	b510      	push	{r4, lr}
    if( X == NULL )
    c30a:	4604      	mov	r4, r0
    c30c:	b168      	cbz	r0, c32a <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    c30e:	6880      	ldr	r0, [r0, #8]
    c310:	b130      	cbz	r0, c320 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    c312:	6861      	ldr	r1, [r4, #4]
    c314:	0089      	lsls	r1, r1, #2
    c316:	f7fd fcdd 	bl	9cd4 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    c31a:	68a0      	ldr	r0, [r4, #8]
    c31c:	f7fa f904 	bl	6528 <mbedtls_free>
    X->n = 0;
    c320:	2300      	movs	r3, #0
    c322:	2201      	movs	r2, #1
    c324:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    c328:	60a3      	str	r3, [r4, #8]
}
    c32a:	bd10      	pop	{r4, pc}

0000c32c <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c32c:	f242 7310 	movw	r3, #10000	; 0x2710
    c330:	4299      	cmp	r1, r3
{
    c332:	b570      	push	{r4, r5, r6, lr}
    c334:	4604      	mov	r4, r0
    c336:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    c338:	d902      	bls.n	c340 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    c33a:	f06f 000f 	mvn.w	r0, #15
}
    c33e:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    c340:	6843      	ldr	r3, [r0, #4]
    c342:	428b      	cmp	r3, r1
    c344:	d216      	bcs.n	c374 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    c346:	2104      	movs	r1, #4
    c348:	4628      	mov	r0, r5
    c34a:	f7fa f8e7 	bl	651c <mbedtls_calloc>
    c34e:	4606      	mov	r6, r0
    c350:	2800      	cmp	r0, #0
    c352:	d0f2      	beq.n	c33a <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    c354:	68a1      	ldr	r1, [r4, #8]
    c356:	b159      	cbz	r1, c370 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    c358:	6862      	ldr	r2, [r4, #4]
    c35a:	0092      	lsls	r2, r2, #2
    c35c:	f7ff f8d5 	bl	b50a <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    c360:	6861      	ldr	r1, [r4, #4]
    c362:	68a0      	ldr	r0, [r4, #8]
    c364:	0089      	lsls	r1, r1, #2
    c366:	f7fd fcb5 	bl	9cd4 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    c36a:	68a0      	ldr	r0, [r4, #8]
    c36c:	f7fa f8dc 	bl	6528 <mbedtls_free>
        X->p = p;
    c370:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    c374:	2000      	movs	r0, #0
    c376:	e7e2      	b.n	c33e <mbedtls_mpi_grow+0x12>

0000c378 <mbedtls_mpi_resize_clear>:
{
    c378:	b538      	push	{r3, r4, r5, lr}
    c37a:	4604      	mov	r4, r0
    if( limbs == 0 )
    c37c:	460d      	mov	r5, r1
    c37e:	b919      	cbnz	r1, c388 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    c380:	f7ff ffc2 	bl	c308 <mbedtls_mpi_free>
}
    c384:	2000      	movs	r0, #0
    c386:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    c388:	6842      	ldr	r2, [r0, #4]
    c38a:	428a      	cmp	r2, r1
    c38c:	d107      	bne.n	c39e <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    c38e:	2100      	movs	r1, #0
    c390:	6880      	ldr	r0, [r0, #8]
    c392:	0092      	lsls	r2, r2, #2
    c394:	f7ff f8c4 	bl	b520 <memset>
        X->s = 1;
    c398:	2301      	movs	r3, #1
    c39a:	6023      	str	r3, [r4, #0]
        return( 0 );
    c39c:	e7f2      	b.n	c384 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    c39e:	f7ff ffb3 	bl	c308 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    c3a2:	4629      	mov	r1, r5
    c3a4:	4620      	mov	r0, r4
}
    c3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    c3aa:	f7ff bfbf 	b.w	c32c <mbedtls_mpi_grow>

0000c3ae <mbedtls_mpi_copy>:
    if( X == Y )
    c3ae:	4288      	cmp	r0, r1
{
    c3b0:	b570      	push	{r4, r5, r6, lr}
    c3b2:	4605      	mov	r5, r0
    c3b4:	460e      	mov	r6, r1
    if( X == Y )
    c3b6:	d00a      	beq.n	c3ce <mbedtls_mpi_copy+0x20>
    if( Y->n == 0 )
    c3b8:	684c      	ldr	r4, [r1, #4]
        if( X->n != 0 )
    c3ba:	6840      	ldr	r0, [r0, #4]
    if( Y->n == 0 )
    c3bc:	b96c      	cbnz	r4, c3da <mbedtls_mpi_copy+0x2c>
        if( X->n != 0 )
    c3be:	b1c8      	cbz	r0, c3f4 <mbedtls_mpi_copy+0x46>
            X->s = 1;
    c3c0:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    c3c2:	0082      	lsls	r2, r0, #2
    c3c4:	4621      	mov	r1, r4
    c3c6:	68a8      	ldr	r0, [r5, #8]
            X->s = 1;
    c3c8:	602b      	str	r3, [r5, #0]
            memset( X->p, 0, X->n * ciL );
    c3ca:	f7ff f8a9 	bl	b520 <memset>
        return( 0 );
    c3ce:	2000      	movs	r0, #0
    c3d0:	e010      	b.n	c3f4 <mbedtls_mpi_copy+0x46>
        if( Y->p[i] != 0 )
    c3d2:	68b3      	ldr	r3, [r6, #8]
    c3d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c3d8:	b913      	cbnz	r3, c3e0 <mbedtls_mpi_copy+0x32>
    for( i = Y->n - 1; i > 0; i-- )
    c3da:	3c01      	subs	r4, #1
    c3dc:	2c00      	cmp	r4, #0
    c3de:	d1f8      	bne.n	c3d2 <mbedtls_mpi_copy+0x24>
    X->s = Y->s;
    c3e0:	6833      	ldr	r3, [r6, #0]
    i++;
    c3e2:	3401      	adds	r4, #1
    if( X->n < i )
    c3e4:	4284      	cmp	r4, r0
    X->s = Y->s;
    c3e6:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    c3e8:	d905      	bls.n	c3f6 <mbedtls_mpi_copy+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    c3ea:	4621      	mov	r1, r4
    c3ec:	4628      	mov	r0, r5
    c3ee:	f7ff ff9d 	bl	c32c <mbedtls_mpi_grow>
    c3f2:	b140      	cbz	r0, c406 <mbedtls_mpi_copy+0x58>
}
    c3f4:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    c3f6:	1b02      	subs	r2, r0, r4
    c3f8:	68a8      	ldr	r0, [r5, #8]
    c3fa:	2100      	movs	r1, #0
    c3fc:	0092      	lsls	r2, r2, #2
    c3fe:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c402:	f7ff f88d 	bl	b520 <memset>
    memcpy( X->p, Y->p, i * ciL );
    c406:	68b1      	ldr	r1, [r6, #8]
    c408:	68a8      	ldr	r0, [r5, #8]
    c40a:	00a2      	lsls	r2, r4, #2
    c40c:	f7ff f87d 	bl	b50a <memcpy>
    c410:	e7dd      	b.n	c3ce <mbedtls_mpi_copy+0x20>

0000c412 <mbedtls_mpi_lset>:
{
    c412:	b570      	push	{r4, r5, r6, lr}
    c414:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c416:	2101      	movs	r1, #1
{
    c418:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    c41a:	f7ff ff87 	bl	c32c <mbedtls_mpi_grow>
    c41e:	4605      	mov	r5, r0
    c420:	b988      	cbnz	r0, c446 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    c422:	6862      	ldr	r2, [r4, #4]
    c424:	4601      	mov	r1, r0
    c426:	0092      	lsls	r2, r2, #2
    c428:	68a0      	ldr	r0, [r4, #8]
    c42a:	f7ff f879 	bl	b520 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    c42e:	68a3      	ldr	r3, [r4, #8]
    c430:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    c434:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    c436:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    c43a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    c43c:	bfb4      	ite	lt
    c43e:	f04f 33ff 	movlt.w	r3, #4294967295
    c442:	2301      	movge	r3, #1
    c444:	6023      	str	r3, [r4, #0]
}
    c446:	4628      	mov	r0, r5
    c448:	bd70      	pop	{r4, r5, r6, pc}

0000c44a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    c44a:	6843      	ldr	r3, [r0, #4]
    c44c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    c450:	bf3f      	itttt	cc
    c452:	6883      	ldrcc	r3, [r0, #8]
    c454:	094a      	lsrcc	r2, r1, #5
    c456:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    c45a:	f001 011f 	andcc.w	r1, r1, #31
    c45e:	bf3a      	itte	cc
    c460:	fa20 f101 	lsrcc.w	r1, r0, r1
    c464:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    c468:	2000      	movcs	r0, #0
}
    c46a:	4770      	bx	lr

0000c46c <mbedtls_mpi_bitlen>:
{
    c46c:	4602      	mov	r2, r0
    if( X->n == 0 )
    c46e:	6840      	ldr	r0, [r0, #4]
    c470:	b188      	cbz	r0, c496 <mbedtls_mpi_bitlen+0x2a>
        if( X->p[i] != 0 )
    c472:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    c474:	1e43      	subs	r3, r0, #1
    c476:	b97b      	cbnz	r3, c498 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    c478:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    c47c:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    c47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    c482:	4211      	tst	r1, r2
    c484:	d104      	bne.n	c490 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    c486:	3001      	adds	r0, #1
    c488:	2820      	cmp	r0, #32
        mask >>= 1;
    c48a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    c48e:	d1f8      	bne.n	c482 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    c490:	3301      	adds	r3, #1
    c492:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    c496:	4770      	bx	lr
        if( X->p[i] != 0 )
    c498:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c49c:	2900      	cmp	r1, #0
    c49e:	d1eb      	bne.n	c478 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    c4a0:	3b01      	subs	r3, #1
    c4a2:	e7e8      	b.n	c476 <mbedtls_mpi_bitlen+0xa>

0000c4a4 <mbedtls_mpi_size>:
{
    c4a4:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    c4a6:	f7ff ffe1 	bl	c46c <mbedtls_mpi_bitlen>
    c4aa:	3007      	adds	r0, #7
}
    c4ac:	08c0      	lsrs	r0, r0, #3
    c4ae:	bd08      	pop	{r3, pc}

0000c4b0 <mbedtls_mpi_read_binary>:
{
    c4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    c4b4:	f012 0403 	ands.w	r4, r2, #3
    c4b8:	bf18      	it	ne
    c4ba:	2401      	movne	r4, #1
    c4bc:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    c4c0:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c4c2:	4621      	mov	r1, r4
{
    c4c4:	4607      	mov	r7, r0
    c4c6:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    c4c8:	f7ff ff56 	bl	c378 <mbedtls_mpi_resize_clear>
    c4cc:	4606      	mov	r6, r0
    c4ce:	b968      	cbnz	r0, c4ec <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    c4d0:	b165      	cbz	r5, c4ec <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    c4d2:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    c4d4:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    c4d8:	462a      	mov	r2, r5
    c4da:	4641      	mov	r1, r8
    c4dc:	4418      	add	r0, r3
    c4de:	f7ff f814 	bl	b50a <memcpy>
    if( limbs == 0 )
    c4e2:	b11c      	cbz	r4, c4ec <mbedtls_mpi_read_binary+0x3c>
    c4e4:	4621      	mov	r1, r4
    c4e6:	68b8      	ldr	r0, [r7, #8]
    c4e8:	f7ff fedf 	bl	c2aa <mpi_bigendian_to_host.part.0>
}
    c4ec:	4630      	mov	r0, r6
    c4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c4f2 <mbedtls_mpi_write_binary>:
{
    c4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4f4:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    c4f6:	6863      	ldr	r3, [r4, #4]
{
    c4f8:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    c4fa:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    c4fe:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    c502:	d91b      	bls.n	c53c <mbedtls_mpi_write_binary+0x4a>
        p = buf + buflen - stored_bytes;
    c504:	1b52      	subs	r2, r2, r5
    c506:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    c508:	2100      	movs	r1, #0
    c50a:	f7ff f809 	bl	b520 <memset>
        p = buf + buflen - stored_bytes;
    c50e:	4630      	mov	r0, r6
    c510:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    c512:	2300      	movs	r3, #0
    c514:	1881      	adds	r1, r0, r2
    c516:	429a      	cmp	r2, r3
    c518:	d112      	bne.n	c540 <mbedtls_mpi_write_binary+0x4e>
    return( 0 );
    c51a:	2000      	movs	r0, #0
}
    c51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    c51e:	68a7      	ldr	r7, [r4, #8]
    c520:	f003 0103 	and.w	r1, r3, #3
    c524:	f023 0c03 	bic.w	ip, r3, #3
    c528:	00ce      	lsls	r6, r1, #3
    c52a:	f857 100c 	ldr.w	r1, [r7, ip]
    c52e:	40f1      	lsrs	r1, r6
    c530:	b2c9      	uxtb	r1, r1
    c532:	b989      	cbnz	r1, c558 <mbedtls_mpi_write_binary+0x66>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    c534:	3301      	adds	r3, #1
    c536:	42ab      	cmp	r3, r5
    c538:	d1f1      	bne.n	c51e <mbedtls_mpi_write_binary+0x2c>
    c53a:	e7ea      	b.n	c512 <mbedtls_mpi_write_binary+0x20>
    c53c:	4613      	mov	r3, r2
    c53e:	e7fa      	b.n	c536 <mbedtls_mpi_write_binary+0x44>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    c540:	68a7      	ldr	r7, [r4, #8]
    c542:	f003 0003 	and.w	r0, r3, #3
    c546:	f023 0603 	bic.w	r6, r3, #3
    c54a:	00c5      	lsls	r5, r0, #3
    c54c:	59b8      	ldr	r0, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
    c54e:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    c550:	40e8      	lsrs	r0, r5
    c552:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    c556:	e7de      	b.n	c516 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    c558:	f06f 0007 	mvn.w	r0, #7
    c55c:	e7de      	b.n	c51c <mbedtls_mpi_write_binary+0x2a>

0000c55e <mbedtls_mpi_shift_l>:
{
    c55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c560:	4605      	mov	r5, r0
    c562:	460e      	mov	r6, r1
    v0 = count / (biL    );
    c564:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    c566:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    c56a:	f7ff ff7f 	bl	c46c <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    c56e:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    c570:	4430      	add	r0, r6
    if( X->n * biL < i )
    c572:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    c576:	d805      	bhi.n	c584 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    c578:	2e1f      	cmp	r6, #31
    c57a:	d80f      	bhi.n	c59c <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    c57c:	2f00      	cmp	r7, #0
    c57e:	d13c      	bne.n	c5fa <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    c580:	2000      	movs	r0, #0
    c582:	e00a      	b.n	c59a <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    c584:	f010 011f 	ands.w	r1, r0, #31
    c588:	bf18      	it	ne
    c58a:	2101      	movne	r1, #1
    c58c:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    c590:	4628      	mov	r0, r5
    c592:	f7ff fecb 	bl	c32c <mbedtls_mpi_grow>
    c596:	2800      	cmp	r0, #0
    c598:	d0ee      	beq.n	c578 <mbedtls_mpi_shift_l+0x1a>
}
    c59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    c59c:	f06f 0003 	mvn.w	r0, #3
    c5a0:	686b      	ldr	r3, [r5, #4]
    c5a2:	4360      	muls	r0, r4
    c5a4:	4619      	mov	r1, r3
    c5a6:	009a      	lsls	r2, r3, #2
    c5a8:	42a1      	cmp	r1, r4
    c5aa:	f1a2 0204 	sub.w	r2, r2, #4
    c5ae:	d80c      	bhi.n	c5ca <mbedtls_mpi_shift_l+0x6c>
    c5b0:	1ae2      	subs	r2, r4, r3
    c5b2:	429c      	cmp	r4, r3
    c5b4:	bf88      	it	hi
    c5b6:	2200      	movhi	r2, #0
    c5b8:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    c5ba:	2200      	movs	r2, #0
    c5bc:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    c5be:	3b04      	subs	r3, #4
    c5c0:	1d19      	adds	r1, r3, #4
    c5c2:	d0db      	beq.n	c57c <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    c5c4:	68a9      	ldr	r1, [r5, #8]
    c5c6:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    c5c8:	e7f9      	b.n	c5be <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    c5ca:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    c5cc:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    c5ce:	eb06 0c02 	add.w	ip, r6, r2
    c5d2:	f85c c000 	ldr.w	ip, [ip, r0]
    c5d6:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    c5da:	e7e5      	b.n	c5a8 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    c5dc:	68a8      	ldr	r0, [r5, #8]
    c5de:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            X->p[i] <<= t1;
    c5e2:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    c5e6:	4313      	orrs	r3, r2
    c5e8:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    c5ec:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    c5f0:	3401      	adds	r4, #1
    c5f2:	686b      	ldr	r3, [r5, #4]
    c5f4:	42a3      	cmp	r3, r4
    c5f6:	d8f1      	bhi.n	c5dc <mbedtls_mpi_shift_l+0x7e>
    c5f8:	e7c2      	b.n	c580 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    c5fa:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    c5fc:	f1c7 0620 	rsb	r6, r7, #32
    c600:	e7f7      	b.n	c5f2 <mbedtls_mpi_shift_l+0x94>

0000c602 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    c602:	6843      	ldr	r3, [r0, #4]
{
    c604:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    c606:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    c608:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    c60a:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    c60e:	d301      	bcc.n	c614 <mbedtls_mpi_shift_r+0x12>
    c610:	d104      	bne.n	c61c <mbedtls_mpi_shift_r+0x1a>
    c612:	b36a      	cbz	r2, c670 <mbedtls_mpi_shift_r+0x6e>
}
    c614:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    c616:	2100      	movs	r1, #0
    c618:	f7ff befb 	b.w	c412 <mbedtls_mpi_lset>
    if( v0 > 0 )
    c61c:	291f      	cmp	r1, #31
    c61e:	d829      	bhi.n	c674 <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    c620:	b9aa      	cbnz	r2, c64e <mbedtls_mpi_shift_r+0x4c>
}
    c622:	bcf0      	pop	{r4, r5, r6, r7}
    c624:	2000      	movs	r0, #0
    c626:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    c628:	6885      	ldr	r5, [r0, #8]
    c62a:	586e      	ldr	r6, [r5, r1]
    c62c:	3104      	adds	r1, #4
    c62e:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    c632:	3301      	adds	r3, #1
    c634:	6845      	ldr	r5, [r0, #4]
    c636:	1b2d      	subs	r5, r5, r4
    c638:	429d      	cmp	r5, r3
    c63a:	d8f5      	bhi.n	c628 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    c63c:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    c63e:	6841      	ldr	r1, [r0, #4]
    c640:	4299      	cmp	r1, r3
    c642:	d9ed      	bls.n	c620 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    c644:	6881      	ldr	r1, [r0, #8]
    c646:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    c64a:	3301      	adds	r3, #1
    c64c:	e7f7      	b.n	c63e <mbedtls_mpi_shift_r+0x3c>
    mbedtls_mpi_uint r0 = 0, r1;
    c64e:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    c650:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    c652:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    c656:	3b01      	subs	r3, #1
    c658:	d3e3      	bcc.n	c622 <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    c65a:	6886      	ldr	r6, [r0, #8]
    c65c:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    c660:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    c664:	4321      	orrs	r1, r4
    c666:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    c66a:	fa05 f407 	lsl.w	r4, r5, r7
    c66e:	e7f2      	b.n	c656 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    c670:	291f      	cmp	r1, #31
    c672:	d9d6      	bls.n	c622 <mbedtls_mpi_shift_r+0x20>
{
    c674:	2300      	movs	r3, #0
    c676:	00a1      	lsls	r1, r4, #2
    c678:	e7dc      	b.n	c634 <mbedtls_mpi_shift_r+0x32>

0000c67a <mbedtls_mpi_cmp_abs>:
{
    c67a:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    c67c:	6843      	ldr	r3, [r0, #4]
    c67e:	b92b      	cbnz	r3, c68c <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    c680:	684a      	ldr	r2, [r1, #4]
    c682:	b962      	cbnz	r2, c69e <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    c684:	1e18      	subs	r0, r3, #0
    c686:	bf18      	it	ne
    c688:	2001      	movne	r0, #1
    c68a:	e028      	b.n	c6de <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    c68c:	6882      	ldr	r2, [r0, #8]
    c68e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c692:	f852 2c04 	ldr.w	r2, [r2, #-4]
    c696:	2a00      	cmp	r2, #0
    c698:	d1f2      	bne.n	c680 <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    c69a:	3b01      	subs	r3, #1
    c69c:	e7ef      	b.n	c67e <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    c69e:	688c      	ldr	r4, [r1, #8]
    c6a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    c6a4:	f855 5c04 	ldr.w	r5, [r5, #-4]
    c6a8:	b935      	cbnz	r5, c6b8 <mbedtls_mpi_cmp_abs+0x3e>
    for( j = Y->n; j > 0; j-- )
    c6aa:	3a01      	subs	r2, #1
    c6ac:	e7e9      	b.n	c682 <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    c6ae:	2001      	movs	r0, #1
    c6b0:	e015      	b.n	c6de <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
    c6b2:	f04f 30ff 	mov.w	r0, #4294967295
    c6b6:	e012      	b.n	c6de <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    c6b8:	2b00      	cmp	r3, #0
    c6ba:	d0fa      	beq.n	c6b2 <mbedtls_mpi_cmp_abs+0x38>
    if( i > j ) return(  1 );
    c6bc:	4293      	cmp	r3, r2
    c6be:	d8f6      	bhi.n	c6ae <mbedtls_mpi_cmp_abs+0x34>
    if( j > i ) return( -1 );
    c6c0:	d3f7      	bcc.n	c6b2 <mbedtls_mpi_cmp_abs+0x38>
    c6c2:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    c6c4:	6882      	ldr	r2, [r0, #8]
    c6c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c6ca:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    c6ce:	4291      	cmp	r1, r2
    c6d0:	d8ed      	bhi.n	c6ae <mbedtls_mpi_cmp_abs+0x34>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    c6d2:	f103 33ff 	add.w	r3, r3, #4294967295
    c6d6:	d3ec      	bcc.n	c6b2 <mbedtls_mpi_cmp_abs+0x38>
    for( ; i > 0; i-- )
    c6d8:	1c5a      	adds	r2, r3, #1
    c6da:	d1f3      	bne.n	c6c4 <mbedtls_mpi_cmp_abs+0x4a>
    return( 0 );
    c6dc:	2000      	movs	r0, #0
}
    c6de:	bd30      	pop	{r4, r5, pc}

0000c6e0 <mbedtls_mpi_cmp_mpi>:
{
    c6e0:	4602      	mov	r2, r0
    c6e2:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    c6e4:	6843      	ldr	r3, [r0, #4]
    c6e6:	b923      	cbnz	r3, c6f2 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    c6e8:	6848      	ldr	r0, [r1, #4]
    c6ea:	b958      	cbnz	r0, c704 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    c6ec:	2b00      	cmp	r3, #0
    c6ee:	d136      	bne.n	c75e <mbedtls_mpi_cmp_mpi+0x7e>
    c6f0:	e02f      	b.n	c752 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    c6f2:	6890      	ldr	r0, [r2, #8]
    c6f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c6f8:	f850 0c04 	ldr.w	r0, [r0, #-4]
    c6fc:	2800      	cmp	r0, #0
    c6fe:	d1f3      	bne.n	c6e8 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    c700:	3b01      	subs	r3, #1
    c702:	e7f0      	b.n	c6e6 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    c704:	688c      	ldr	r4, [r1, #8]
    c706:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    c70a:	f855 5c04 	ldr.w	r5, [r5, #-4]
    c70e:	bb15      	cbnz	r5, c756 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    c710:	3801      	subs	r0, #1
    c712:	e7ea      	b.n	c6ea <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    c714:	d202      	bcs.n	c71c <mbedtls_mpi_cmp_mpi+0x3c>
    c716:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c718:	4240      	negs	r0, r0
    c71a:	e021      	b.n	c760 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c71c:	6810      	ldr	r0, [r2, #0]
    if( j > i ) return( -Y->s );
    c71e:	6809      	ldr	r1, [r1, #0]
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c720:	2800      	cmp	r0, #0
    c722:	dd03      	ble.n	c72c <mbedtls_mpi_cmp_mpi+0x4c>
    c724:	2900      	cmp	r1, #0
    c726:	da07      	bge.n	c738 <mbedtls_mpi_cmp_mpi+0x58>
    c728:	2001      	movs	r0, #1
    c72a:	e019      	b.n	c760 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    c72c:	2900      	cmp	r1, #0
    c72e:	dd03      	ble.n	c738 <mbedtls_mpi_cmp_mpi+0x58>
    c730:	b110      	cbz	r0, c738 <mbedtls_mpi_cmp_mpi+0x58>
    c732:	f04f 30ff 	mov.w	r0, #4294967295
    c736:	e013      	b.n	c760 <mbedtls_mpi_cmp_mpi+0x80>
    c738:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    c73a:	6891      	ldr	r1, [r2, #8]
    c73c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    c740:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    c744:	428d      	cmp	r5, r1
    c746:	d80b      	bhi.n	c760 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c748:	f103 33ff 	add.w	r3, r3, #4294967295
    c74c:	d3e4      	bcc.n	c718 <mbedtls_mpi_cmp_mpi+0x38>
    for( ; i > 0; i-- )
    c74e:	1c59      	adds	r1, r3, #1
    c750:	d1f3      	bne.n	c73a <mbedtls_mpi_cmp_mpi+0x5a>
    return( 0 );
    c752:	2000      	movs	r0, #0
    c754:	e004      	b.n	c760 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    c756:	2b00      	cmp	r3, #0
    c758:	d0dd      	beq.n	c716 <mbedtls_mpi_cmp_mpi+0x36>
    if( i > j ) return(  X->s );
    c75a:	4283      	cmp	r3, r0
    c75c:	d9da      	bls.n	c714 <mbedtls_mpi_cmp_mpi+0x34>
    c75e:	6810      	ldr	r0, [r2, #0]
}
    c760:	bd30      	pop	{r4, r5, pc}

0000c762 <mbedtls_mpi_cmp_int>:
{
    c762:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    c764:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    c768:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    c76c:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    c76e:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    c770:	bfb4      	ite	lt
    c772:	f04f 33ff 	movlt.w	r3, #4294967295
    c776:	2301      	movge	r3, #1
    c778:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    c77a:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c77c:	a901      	add	r1, sp, #4
    Y.n = 1;
    c77e:	9302      	str	r3, [sp, #8]
    Y.p = p;
    c780:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c784:	f7ff ffac 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
}
    c788:	b005      	add	sp, #20
    c78a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c78e <mbedtls_mpi_add_abs>:
    if( X == B )
    c78e:	4290      	cmp	r0, r2
{
    c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c794:	4606      	mov	r6, r0
    c796:	460f      	mov	r7, r1
    c798:	4615      	mov	r5, r2
    if( X == B )
    c79a:	d002      	beq.n	c7a2 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    c79c:	4288      	cmp	r0, r1
    c79e:	d129      	bne.n	c7f4 <mbedtls_mpi_add_abs+0x66>
{
    c7a0:	462f      	mov	r7, r5
    X->s = 1;
    c7a2:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    c7a4:	687d      	ldr	r5, [r7, #4]
    X->s = 1;
    c7a6:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    c7a8:	bb65      	cbnz	r5, c804 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c7aa:	4629      	mov	r1, r5
    c7ac:	4630      	mov	r0, r6
    c7ae:	f7ff fdbd 	bl	c32c <mbedtls_mpi_grow>
    c7b2:	4604      	mov	r4, r0
    c7b4:	bb18      	cbnz	r0, c7fe <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    c7b6:	68b3      	ldr	r3, [r6, #8]
    c7b8:	68b9      	ldr	r1, [r7, #8]
    c7ba:	469c      	mov	ip, r3
    c7bc:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    c7be:	4285      	cmp	r5, r0
    c7c0:	d129      	bne.n	c816 <mbedtls_mpi_add_abs+0x88>
    c7c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    c7c6:	b1d7      	cbz	r7, c7fe <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    c7c8:	6872      	ldr	r2, [r6, #4]
    c7ca:	f105 0801 	add.w	r8, r5, #1
    c7ce:	42aa      	cmp	r2, r5
    c7d0:	d807      	bhi.n	c7e2 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    c7d2:	4641      	mov	r1, r8
    c7d4:	4630      	mov	r0, r6
    c7d6:	f7ff fda9 	bl	c32c <mbedtls_mpi_grow>
    c7da:	bb68      	cbnz	r0, c838 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    c7dc:	68b3      	ldr	r3, [r6, #8]
    c7de:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    c7e2:	681a      	ldr	r2, [r3, #0]
    c7e4:	4645      	mov	r5, r8
    c7e6:	19d2      	adds	r2, r2, r7
    c7e8:	bf2c      	ite	cs
    c7ea:	2701      	movcs	r7, #1
    c7ec:	2700      	movcc	r7, #0
    c7ee:	f843 2b04 	str.w	r2, [r3], #4
    c7f2:	e7e8      	b.n	c7c6 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c7f4:	f7ff fddb 	bl	c3ae <mbedtls_mpi_copy>
    c7f8:	4604      	mov	r4, r0
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d0d0      	beq.n	c7a0 <mbedtls_mpi_add_abs+0x12>
}
    c7fe:	4620      	mov	r0, r4
    c800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    c804:	68bb      	ldr	r3, [r7, #8]
    c806:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    c80a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c80e:	2b00      	cmp	r3, #0
    c810:	d1cb      	bne.n	c7aa <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    c812:	3d01      	subs	r5, #1
    c814:	e7c8      	b.n	c7a8 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    c816:	f8dc 2000 	ldr.w	r2, [ip]
    c81a:	19d2      	adds	r2, r2, r7
    c81c:	bf2c      	ite	cs
    c81e:	f04f 0e01 	movcs.w	lr, #1
    c822:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    c826:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    for( i = 0; i < j; i++, o++, p++ )
    c82a:	3001      	adds	r0, #1
    c82c:	19d2      	adds	r2, r2, r7
        *p += tmp; c += ( *p < tmp );
    c82e:	f84c 2b04 	str.w	r2, [ip], #4
    c832:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    c836:	e7c2      	b.n	c7be <mbedtls_mpi_add_abs+0x30>
    return( ret );
    c838:	4604      	mov	r4, r0
    c83a:	e7e0      	b.n	c7fe <mbedtls_mpi_add_abs+0x70>

0000c83c <mbedtls_mpi_sub_abs>:
{
    c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c840:	4605      	mov	r5, r0
    c842:	460e      	mov	r6, r1
    c844:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    c846:	6854      	ldr	r4, [r2, #4]
    c848:	b93c      	cbnz	r4, c85a <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    c84a:	6871      	ldr	r1, [r6, #4]
    c84c:	42a1      	cmp	r1, r4
    c84e:	d20e      	bcs.n	c86e <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    c850:	f06f 0709 	mvn.w	r7, #9
}
    c854:	4638      	mov	r0, r7
    c856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    c85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c85e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c862:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c866:	2b00      	cmp	r3, #0
    c868:	d1ef      	bne.n	c84a <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    c86a:	3c01      	subs	r4, #1
    c86c:	e7ec      	b.n	c848 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    c86e:	4628      	mov	r0, r5
    c870:	f7ff fd5c 	bl	c32c <mbedtls_mpi_grow>
    c874:	4607      	mov	r7, r0
    c876:	2800      	cmp	r0, #0
    c878:	d1ec      	bne.n	c854 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    c87a:	6872      	ldr	r2, [r6, #4]
    c87c:	42a2      	cmp	r2, r4
    c87e:	d909      	bls.n	c894 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    c880:	68b1      	ldr	r1, [r6, #8]
    c882:	68a8      	ldr	r0, [r5, #8]
    c884:	1b12      	subs	r2, r2, r4
    c886:	0092      	lsls	r2, r2, #2
    c888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c88c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    c890:	f7fe fe3b 	bl	b50a <memcpy>
    if( X->n > A->n )
    c894:	686a      	ldr	r2, [r5, #4]
    c896:	6870      	ldr	r0, [r6, #4]
    c898:	4282      	cmp	r2, r0
    c89a:	d907      	bls.n	c8ac <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    c89c:	68ab      	ldr	r3, [r5, #8]
    c89e:	1a12      	subs	r2, r2, r0
    c8a0:	2100      	movs	r1, #0
    c8a2:	0092      	lsls	r2, r2, #2
    c8a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    c8a8:	f7fe fe3a 	bl	b520 <memset>
    mbedtls_mpi_uint c = 0, t, z;
    c8ac:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
    c8ae:	4613      	mov	r3, r2
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    c8b0:	68a9      	ldr	r1, [r5, #8]
    c8b2:	f8d6 e008 	ldr.w	lr, [r6, #8]
    c8b6:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    c8ba:	429c      	cmp	r4, r3
    c8bc:	d111      	bne.n	c8e2 <mbedtls_mpi_sub_abs+0xa6>
    if( carry != 0 )
    c8be:	b16a      	cbz	r2, c8dc <mbedtls_mpi_sub_abs+0xa0>
            --X->p[n];
    c8c0:	f04f 30ff 	mov.w	r0, #4294967295
    c8c4:	eb01 0384 	add.w	r3, r1, r4, lsl #2
        for( ; n < X->n && X->p[n] == 0; n++ )
    c8c8:	686a      	ldr	r2, [r5, #4]
    c8ca:	42a2      	cmp	r2, r4
    c8cc:	d923      	bls.n	c916 <mbedtls_mpi_sub_abs+0xda>
    c8ce:	681a      	ldr	r2, [r3, #0]
    c8d0:	b1ea      	cbz	r2, c90e <mbedtls_mpi_sub_abs+0xd2>
        --X->p[n];
    c8d2:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    c8d6:	3b01      	subs	r3, #1
    c8d8:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    X->s = 1;
    c8dc:	2301      	movs	r3, #1
    c8de:	602b      	str	r3, [r5, #0]
    return( ret );
    c8e0:	e7b8      	b.n	c854 <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    c8e2:	f85e c023 	ldr.w	ip, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    c8e6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    c8ea:	ebac 0002 	sub.w	r0, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    c8ee:	42b0      	cmp	r0, r6
    c8f0:	bf2c      	ite	cs
    c8f2:	f04f 0900 	movcs.w	r9, #0
    c8f6:	f04f 0901 	movcc.w	r9, #1
    c8fa:	1b80      	subs	r0, r0, r6
    c8fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    c900:	4594      	cmp	ip, r2
    c902:	bf2c      	ite	cs
    c904:	464a      	movcs	r2, r9
    c906:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    c90a:	3301      	adds	r3, #1
    c90c:	e7d5      	b.n	c8ba <mbedtls_mpi_sub_abs+0x7e>
            --X->p[n];
    c90e:	f843 0b04 	str.w	r0, [r3], #4
        for( ; n < X->n && X->p[n] == 0; n++ )
    c912:	3401      	adds	r4, #1
    c914:	e7d8      	b.n	c8c8 <mbedtls_mpi_sub_abs+0x8c>
        if( n == X->n )
    c916:	d1dc      	bne.n	c8d2 <mbedtls_mpi_sub_abs+0x96>
    c918:	e79a      	b.n	c850 <mbedtls_mpi_sub_abs+0x14>

0000c91a <mbedtls_mpi_add_mpi>:
{
    c91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    c91c:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    c91e:	6813      	ldr	r3, [r2, #0]
{
    c920:	4604      	mov	r4, r0
    if( A->s * B->s < 0 )
    c922:	436b      	muls	r3, r5
{
    c924:	460f      	mov	r7, r1
    c926:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    c928:	d516      	bpl.n	c958 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    c92a:	4611      	mov	r1, r2
    c92c:	4638      	mov	r0, r7
    c92e:	f7ff fea4 	bl	c67a <mbedtls_mpi_cmp_abs>
    c932:	2800      	cmp	r0, #0
    c934:	db06      	blt.n	c944 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c936:	4632      	mov	r2, r6
    c938:	4639      	mov	r1, r7
    c93a:	4620      	mov	r0, r4
    c93c:	f7ff ff7e 	bl	c83c <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c940:	b140      	cbz	r0, c954 <mbedtls_mpi_add_mpi+0x3a>
}
    c942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c944:	463a      	mov	r2, r7
    c946:	4631      	mov	r1, r6
    c948:	4620      	mov	r0, r4
    c94a:	f7ff ff77 	bl	c83c <mbedtls_mpi_sub_abs>
    c94e:	2800      	cmp	r0, #0
    c950:	d1f7      	bne.n	c942 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    c952:	426d      	negs	r5, r5
        X->s = s;
    c954:	6025      	str	r5, [r4, #0]
    return( ret );
    c956:	e7f4      	b.n	c942 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c958:	f7ff ff19 	bl	c78e <mbedtls_mpi_add_abs>
    c95c:	e7f0      	b.n	c940 <mbedtls_mpi_add_mpi+0x26>

0000c95e <mbedtls_mpi_sub_mpi>:
{
    c95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    c960:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    c962:	6813      	ldr	r3, [r2, #0]
{
    c964:	4604      	mov	r4, r0
    if( A->s * B->s > 0 )
    c966:	436b      	muls	r3, r5
    c968:	2b00      	cmp	r3, #0
{
    c96a:	460f      	mov	r7, r1
    c96c:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    c96e:	dd16      	ble.n	c99e <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    c970:	4611      	mov	r1, r2
    c972:	4638      	mov	r0, r7
    c974:	f7ff fe81 	bl	c67a <mbedtls_mpi_cmp_abs>
    c978:	2800      	cmp	r0, #0
    c97a:	db06      	blt.n	c98a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c97c:	4632      	mov	r2, r6
    c97e:	4639      	mov	r1, r7
    c980:	4620      	mov	r0, r4
    c982:	f7ff ff5b 	bl	c83c <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c986:	b140      	cbz	r0, c99a <mbedtls_mpi_sub_mpi+0x3c>
}
    c988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c98a:	463a      	mov	r2, r7
    c98c:	4631      	mov	r1, r6
    c98e:	4620      	mov	r0, r4
    c990:	f7ff ff54 	bl	c83c <mbedtls_mpi_sub_abs>
    c994:	2800      	cmp	r0, #0
    c996:	d1f7      	bne.n	c988 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    c998:	426d      	negs	r5, r5
        X->s = s;
    c99a:	6025      	str	r5, [r4, #0]
    return( ret );
    c99c:	e7f4      	b.n	c988 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c99e:	f7ff fef6 	bl	c78e <mbedtls_mpi_add_abs>
    c9a2:	e7f0      	b.n	c986 <mbedtls_mpi_sub_mpi+0x28>

0000c9a4 <mbedtls_mpi_mul_int>:
{
    c9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a8:	4605      	mov	r5, r0
    c9aa:	460f      	mov	r7, r1
    c9ac:	4690      	mov	r8, r2
    size_t n = A->n;
    c9ae:	684e      	ldr	r6, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    c9b0:	b146      	cbz	r6, c9c4 <mbedtls_mpi_mul_int+0x20>
    c9b2:	68bb      	ldr	r3, [r7, #8]
    c9b4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c9b8:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c9bc:	b143      	cbz	r3, c9d0 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    c9be:	f1b8 0f00 	cmp.w	r8, #0
    c9c2:	d107      	bne.n	c9d4 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    c9c4:	4628      	mov	r0, r5
}
    c9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    c9ca:	2100      	movs	r1, #0
    c9cc:	f7ff bd21 	b.w	c412 <mbedtls_mpi_lset>
        --n;
    c9d0:	3e01      	subs	r6, #1
    c9d2:	e7ed      	b.n	c9b0 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    c9d4:	4628      	mov	r0, r5
    c9d6:	1c71      	adds	r1, r6, #1
    c9d8:	f7ff fca8 	bl	c32c <mbedtls_mpi_grow>
    c9dc:	4604      	mov	r4, r0
    c9de:	b960      	cbnz	r0, c9fa <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c9e0:	4639      	mov	r1, r7
    c9e2:	4628      	mov	r0, r5
    c9e4:	f7ff fce3 	bl	c3ae <mbedtls_mpi_copy>
    c9e8:	4604      	mov	r4, r0
    c9ea:	b930      	cbnz	r0, c9fa <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    c9ec:	4630      	mov	r0, r6
    c9ee:	68aa      	ldr	r2, [r5, #8]
    c9f0:	68b9      	ldr	r1, [r7, #8]
    c9f2:	f108 33ff 	add.w	r3, r8, #4294967295
    c9f6:	f7ff fa46 	bl	be86 <mpi_mul_hlp>
}
    c9fa:	4620      	mov	r0, r4
    c9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ca00 <mbedtls_mpi_div_mpi>:
{
    ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca04:	b099      	sub	sp, #100	; 0x64
    ca06:	4688      	mov	r8, r1
    ca08:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    ca0a:	2100      	movs	r1, #0
    ca0c:	4618      	mov	r0, r3
{
    ca0e:	4616      	mov	r6, r2
    ca10:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    ca12:	f7ff fea6 	bl	c762 <mbedtls_mpi_cmp_int>
    ca16:	2800      	cmp	r0, #0
    ca18:	f000 8194 	beq.w	cd44 <mbedtls_mpi_div_mpi+0x344>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    ca1c:	2303      	movs	r3, #3
    X->n = 0;
    ca1e:	2400      	movs	r4, #0
    ca20:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    ca22:	9313      	str	r3, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    ca24:	4630      	mov	r0, r6
    T2.p = TP2;
    ca26:	ab15      	add	r3, sp, #84	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    ca28:	9901      	ldr	r1, [sp, #4]
    X->n = 0;
    ca2a:	e9cd 5406 	strd	r5, r4, [sp, #24]
    X->s = 1;
    ca2e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    X->p = NULL;
    ca32:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    X->n = 0;
    ca36:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    X->s = 1;
    ca3a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    X->p = NULL;
    ca3e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    T2.s = 1;
    ca42:	9512      	str	r5, [sp, #72]	; 0x48
    T2.p = TP2;
    ca44:	9314      	str	r3, [sp, #80]	; 0x50
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    ca46:	f7ff fe18 	bl	c67a <mbedtls_mpi_cmp_abs>
    ca4a:	42a0      	cmp	r0, r4
    ca4c:	da29      	bge.n	caa2 <mbedtls_mpi_div_mpi+0xa2>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    ca4e:	9b00      	ldr	r3, [sp, #0]
    ca50:	b93b      	cbnz	r3, ca62 <mbedtls_mpi_div_mpi+0x62>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    ca52:	f1b8 0f00 	cmp.w	r8, #0
    ca56:	d11c      	bne.n	ca92 <mbedtls_mpi_div_mpi+0x92>
        return( 0 );
    ca58:	2400      	movs	r4, #0
}
    ca5a:	4620      	mov	r0, r4
    ca5c:	b019      	add	sp, #100	; 0x64
    ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    ca62:	4621      	mov	r1, r4
    ca64:	9800      	ldr	r0, [sp, #0]
    ca66:	f7ff fcd4 	bl	c412 <mbedtls_mpi_lset>
    ca6a:	4604      	mov	r4, r0
    ca6c:	2800      	cmp	r0, #0
    ca6e:	d0f0      	beq.n	ca52 <mbedtls_mpi_div_mpi+0x52>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    ca70:	a806      	add	r0, sp, #24
    ca72:	f7ff fc49 	bl	c308 <mbedtls_mpi_free>
    ca76:	a809      	add	r0, sp, #36	; 0x24
    ca78:	f7ff fc46 	bl	c308 <mbedtls_mpi_free>
    ca7c:	a80c      	add	r0, sp, #48	; 0x30
    ca7e:	f7ff fc43 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    ca82:	a80f      	add	r0, sp, #60	; 0x3c
    ca84:	f7ff fc40 	bl	c308 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    ca88:	210c      	movs	r1, #12
    ca8a:	a815      	add	r0, sp, #84	; 0x54
    ca8c:	f7fd f922 	bl	9cd4 <mbedtls_platform_zeroize>
    return( ret );
    ca90:	e7e3      	b.n	ca5a <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    ca92:	4631      	mov	r1, r6
    ca94:	4640      	mov	r0, r8
    ca96:	f7ff fc8a 	bl	c3ae <mbedtls_mpi_copy>
    ca9a:	4604      	mov	r4, r0
    ca9c:	2800      	cmp	r0, #0
    ca9e:	d1e7      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    caa0:	e7da      	b.n	ca58 <mbedtls_mpi_div_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    caa2:	4631      	mov	r1, r6
    caa4:	a806      	add	r0, sp, #24
    caa6:	f7ff fc82 	bl	c3ae <mbedtls_mpi_copy>
    caaa:	4604      	mov	r4, r0
    caac:	2800      	cmp	r0, #0
    caae:	d1df      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    cab0:	af09      	add	r7, sp, #36	; 0x24
    cab2:	4638      	mov	r0, r7
    cab4:	9901      	ldr	r1, [sp, #4]
    cab6:	f7ff fc7a 	bl	c3ae <mbedtls_mpi_copy>
    caba:	4604      	mov	r4, r0
    cabc:	2800      	cmp	r0, #0
    cabe:	d1d7      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    cac0:	6871      	ldr	r1, [r6, #4]
    cac2:	a80c      	add	r0, sp, #48	; 0x30
    cac4:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    cac6:	9509      	str	r5, [sp, #36]	; 0x24
    cac8:	9506      	str	r5, [sp, #24]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    caca:	f7ff fc2f 	bl	c32c <mbedtls_mpi_grow>
    cace:	4604      	mov	r4, r0
    cad0:	2800      	cmp	r0, #0
    cad2:	d1cd      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    cad4:	4601      	mov	r1, r0
    cad6:	a80c      	add	r0, sp, #48	; 0x30
    cad8:	f7ff fc9b 	bl	c412 <mbedtls_mpi_lset>
    cadc:	4604      	mov	r4, r0
    cade:	2800      	cmp	r0, #0
    cae0:	d1c6      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    cae2:	6871      	ldr	r1, [r6, #4]
    cae4:	a80f      	add	r0, sp, #60	; 0x3c
    cae6:	3102      	adds	r1, #2
    cae8:	f7ff fc20 	bl	c32c <mbedtls_mpi_grow>
    caec:	4604      	mov	r4, r0
    caee:	2800      	cmp	r0, #0
    caf0:	d1be      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    caf2:	4638      	mov	r0, r7
    caf4:	f7ff fcba 	bl	c46c <mbedtls_mpi_bitlen>
    caf8:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    cafc:	281f      	cmp	r0, #31
    cafe:	d073      	beq.n	cbe8 <mbedtls_mpi_div_mpi+0x1e8>
        k = biL - 1 - k;
    cb00:	f1c0 0a1f 	rsb	sl, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    cb04:	4651      	mov	r1, sl
    cb06:	a806      	add	r0, sp, #24
    cb08:	f7ff fd29 	bl	c55e <mbedtls_mpi_shift_l>
    cb0c:	4604      	mov	r4, r0
    cb0e:	2800      	cmp	r0, #0
    cb10:	d1ae      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    cb12:	4651      	mov	r1, sl
    cb14:	4638      	mov	r0, r7
    cb16:	f7ff fd22 	bl	c55e <mbedtls_mpi_shift_l>
    cb1a:	4604      	mov	r4, r0
    cb1c:	2800      	cmp	r0, #0
    cb1e:	d1a7      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    n = X.n - 1;
    cb20:	f8dd 901c 	ldr.w	r9, [sp, #28]
    t = Y.n - 1;
    cb24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    cb26:	4638      	mov	r0, r7
    cb28:	eba9 0305 	sub.w	r3, r9, r5
    cb2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    cb30:	4659      	mov	r1, fp
    cb32:	9302      	str	r3, [sp, #8]
    cb34:	f7ff fd13 	bl	c55e <mbedtls_mpi_shift_l>
    cb38:	4604      	mov	r4, r0
    cb3a:	2800      	cmp	r0, #0
    cb3c:	d198      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
        Z.p[n - t]++;
    cb3e:	9b02      	ldr	r3, [sp, #8]
    cb40:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    cb42:	4639      	mov	r1, r7
    cb44:	a806      	add	r0, sp, #24
    cb46:	9302      	str	r3, [sp, #8]
    cb48:	f7ff fdca 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
    cb4c:	2800      	cmp	r0, #0
    cb4e:	9b02      	ldr	r3, [sp, #8]
    cb50:	da4c      	bge.n	cbec <mbedtls_mpi_div_mpi+0x1ec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    cb52:	4659      	mov	r1, fp
    cb54:	4638      	mov	r0, r7
    cb56:	f7ff fd54 	bl	c602 <mbedtls_mpi_shift_r>
    cb5a:	4604      	mov	r4, r0
    cb5c:	2800      	cmp	r0, #0
    cb5e:	d187      	bne.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    t = Y.n - 1;
    cb60:	1e6b      	subs	r3, r5, #1
    cb62:	9302      	str	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    cb64:	009b      	lsls	r3, r3, #2
    cb66:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    cb68:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    cb6c:	3b02      	subs	r3, #2
    cb6e:	009b      	lsls	r3, r3, #2
    cb70:	9305      	str	r3, [sp, #20]
    cb72:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
    n = X.n - 1;
    cb76:	f109 37ff 	add.w	r7, r9, #4294967295
    cb7a:	3b01      	subs	r3, #1
    cb7c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    cb80:	1b5d      	subs	r5, r3, r5
    cb82:	f1a9 0902 	sub.w	r9, r9, #2
    cb86:	00ad      	lsls	r5, r5, #2
    cb88:	ea4f 0b89 	mov.w	fp, r9, lsl #2
    for( i = n; i > t ; i-- )
    cb8c:	9b02      	ldr	r3, [sp, #8]
    cb8e:	429f      	cmp	r7, r3
    cb90:	d83b      	bhi.n	cc0a <mbedtls_mpi_div_mpi+0x20a>
    if( Q != NULL )
    cb92:	9b00      	ldr	r3, [sp, #0]
    cb94:	b153      	cbz	r3, cbac <mbedtls_mpi_div_mpi+0x1ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    cb96:	4618      	mov	r0, r3
    cb98:	a90c      	add	r1, sp, #48	; 0x30
    cb9a:	f7ff fc08 	bl	c3ae <mbedtls_mpi_copy>
    cb9e:	bb08      	cbnz	r0, cbe4 <mbedtls_mpi_div_mpi+0x1e4>
        Q->s = A->s * B->s;
    cba0:	9a01      	ldr	r2, [sp, #4]
    cba2:	6833      	ldr	r3, [r6, #0]
    cba4:	6812      	ldr	r2, [r2, #0]
    cba6:	4353      	muls	r3, r2
    cba8:	9a00      	ldr	r2, [sp, #0]
    cbaa:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    cbac:	f1b8 0f00 	cmp.w	r8, #0
    cbb0:	f43f af5e 	beq.w	ca70 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    cbb4:	4651      	mov	r1, sl
    cbb6:	a806      	add	r0, sp, #24
    cbb8:	f7ff fd23 	bl	c602 <mbedtls_mpi_shift_r>
    cbbc:	b990      	cbnz	r0, cbe4 <mbedtls_mpi_div_mpi+0x1e4>
        X.s = A->s;
    cbbe:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    cbc0:	a906      	add	r1, sp, #24
    cbc2:	4640      	mov	r0, r8
        X.s = A->s;
    cbc4:	9306      	str	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    cbc6:	f7ff fbf2 	bl	c3ae <mbedtls_mpi_copy>
    cbca:	4601      	mov	r1, r0
    cbcc:	2800      	cmp	r0, #0
    cbce:	f040 80b7 	bne.w	cd40 <mbedtls_mpi_div_mpi+0x340>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    cbd2:	4640      	mov	r0, r8
    cbd4:	f7ff fdc5 	bl	c762 <mbedtls_mpi_cmp_int>
    cbd8:	2800      	cmp	r0, #0
    cbda:	f47f af49 	bne.w	ca70 <mbedtls_mpi_div_mpi+0x70>
            R->s = 1;
    cbde:	2301      	movs	r3, #1
    cbe0:	f8c8 3000 	str.w	r3, [r8]
    cbe4:	4604      	mov	r4, r0
    cbe6:	e743      	b.n	ca70 <mbedtls_mpi_div_mpi+0x70>
    else k = 0;
    cbe8:	46a2      	mov	sl, r4
    cbea:	e799      	b.n	cb20 <mbedtls_mpi_div_mpi+0x120>
        Z.p[n - t]++;
    cbec:	990e      	ldr	r1, [sp, #56]	; 0x38
    cbee:	9302      	str	r3, [sp, #8]
    cbf0:	58ca      	ldr	r2, [r1, r3]
    cbf2:	3201      	adds	r2, #1
    cbf4:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    cbf6:	a906      	add	r1, sp, #24
    cbf8:	463a      	mov	r2, r7
    cbfa:	4608      	mov	r0, r1
    cbfc:	f7ff feaf 	bl	c95e <mbedtls_mpi_sub_mpi>
    cc00:	9b02      	ldr	r3, [sp, #8]
    cc02:	4604      	mov	r4, r0
    cc04:	2800      	cmp	r0, #0
    cc06:	d09c      	beq.n	cb42 <mbedtls_mpi_div_mpi+0x142>
    cc08:	e732      	b.n	ca70 <mbedtls_mpi_div_mpi+0x70>
        if( X.p[i] >= Y.p[t] )
    cc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
    cc10:	9a04      	ldr	r2, [sp, #16]
    cc12:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
    cc16:	589a      	ldr	r2, [r3, r2]
            Z.p[i - t - 1] = ~0;
    cc18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        if( X.p[i] >= Y.p[t] )
    cc1a:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    cc1c:	eb03 0005 	add.w	r0, r3, r5
    cc20:	9003      	str	r0, [sp, #12]
        if( X.p[i] >= Y.p[t] )
    cc22:	d376      	bcc.n	cd12 <mbedtls_mpi_div_mpi+0x312>
            Z.p[i - t - 1] = ~0;
    cc24:	f04f 32ff 	mov.w	r2, #4294967295
    cc28:	515a      	str	r2, [r3, r5]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    cc2a:	2f01      	cmp	r7, #1
    cc2c:	bf92      	itee	ls
    cc2e:	2300      	movls	r3, #0
    cc30:	eb09 030b 	addhi.w	r3, r9, fp
    cc34:	f853 3c04 	ldrhi.w	r3, [r3, #-4]
    cc38:	9315      	str	r3, [sp, #84]	; 0x54
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    cc3a:	2f00      	cmp	r7, #0
    cc3c:	d07c      	beq.n	cd38 <mbedtls_mpi_div_mpi+0x338>
    cc3e:	f859 300b 	ldr.w	r3, [r9, fp]
    cc42:	9316      	str	r3, [sp, #88]	; 0x58
        T2.p[2] = X.p[i];
    cc44:	00bb      	lsls	r3, r7, #2
    cc46:	f859 3003 	ldr.w	r3, [r9, r3]
        Z.p[i - t - 1]++;
    cc4a:	9a03      	ldr	r2, [sp, #12]
        T2.p[2] = X.p[i];
    cc4c:	9317      	str	r3, [sp, #92]	; 0x5c
        Z.p[i - t - 1]++;
    cc4e:	9b03      	ldr	r3, [sp, #12]
    cc50:	681b      	ldr	r3, [r3, #0]
    cc52:	3301      	adds	r3, #1
    cc54:	6013      	str	r3, [r2, #0]
            Z.p[i - t - 1]--;
    cc56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    cc58:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    cc5a:	5953      	ldr	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    cc5c:	a80f      	add	r0, sp, #60	; 0x3c
            Z.p[i - t - 1]--;
    cc5e:	3b01      	subs	r3, #1
    cc60:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    cc62:	f7ff fbd6 	bl	c412 <mbedtls_mpi_lset>
    cc66:	2800      	cmp	r0, #0
    cc68:	d1bc      	bne.n	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    cc6a:	9b02      	ldr	r3, [sp, #8]
    cc6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc6e:	2b00      	cmp	r3, #0
    cc70:	d064      	beq.n	cd3c <mbedtls_mpi_div_mpi+0x33c>
    cc72:	9b05      	ldr	r3, [sp, #20]
    cc74:	58d1      	ldr	r1, [r2, r3]
    cc76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc78:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    cc7a:	9904      	ldr	r1, [sp, #16]
    cc7c:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    cc7e:	a90f      	add	r1, sp, #60	; 0x3c
            T1.p[1] = Y.p[t];
    cc80:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    cc82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc84:	4608      	mov	r0, r1
    cc86:	595a      	ldr	r2, [r3, r5]
    cc88:	f7ff fe8c 	bl	c9a4 <mbedtls_mpi_mul_int>
    cc8c:	2800      	cmp	r0, #0
    cc8e:	d1a9      	bne.n	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    cc90:	a912      	add	r1, sp, #72	; 0x48
    cc92:	a80f      	add	r0, sp, #60	; 0x3c
    cc94:	f7ff fd24 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
    cc98:	2800      	cmp	r0, #0
    cc9a:	dcdc      	bgt.n	cc56 <mbedtls_mpi_div_mpi+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    cc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc9e:	a909      	add	r1, sp, #36	; 0x24
    cca0:	595a      	ldr	r2, [r3, r5]
    cca2:	a80f      	add	r0, sp, #60	; 0x3c
    cca4:	f7ff fe7e 	bl	c9a4 <mbedtls_mpi_mul_int>
    cca8:	2800      	cmp	r0, #0
    ccaa:	d19b      	bne.n	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    ccac:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    ccb0:	4649      	mov	r1, r9
    ccb2:	a80f      	add	r0, sp, #60	; 0x3c
    ccb4:	f7ff fc53 	bl	c55e <mbedtls_mpi_shift_l>
    ccb8:	2800      	cmp	r0, #0
    ccba:	d193      	bne.n	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    ccbc:	a906      	add	r1, sp, #24
    ccbe:	4608      	mov	r0, r1
    ccc0:	aa0f      	add	r2, sp, #60	; 0x3c
    ccc2:	f7ff fe4c 	bl	c95e <mbedtls_mpi_sub_mpi>
    ccc6:	4601      	mov	r1, r0
    ccc8:	2800      	cmp	r0, #0
    ccca:	d139      	bne.n	cd40 <mbedtls_mpi_div_mpi+0x340>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    cccc:	a806      	add	r0, sp, #24
    ccce:	f7ff fd48 	bl	c762 <mbedtls_mpi_cmp_int>
    ccd2:	2800      	cmp	r0, #0
    ccd4:	da18      	bge.n	cd08 <mbedtls_mpi_div_mpi+0x308>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    ccd6:	a909      	add	r1, sp, #36	; 0x24
    ccd8:	a80f      	add	r0, sp, #60	; 0x3c
    ccda:	f7ff fb68 	bl	c3ae <mbedtls_mpi_copy>
    ccde:	2800      	cmp	r0, #0
    cce0:	d180      	bne.n	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    cce2:	4649      	mov	r1, r9
    cce4:	a80f      	add	r0, sp, #60	; 0x3c
    cce6:	f7ff fc3a 	bl	c55e <mbedtls_mpi_shift_l>
    ccea:	2800      	cmp	r0, #0
    ccec:	f47f af7a 	bne.w	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    ccf0:	a906      	add	r1, sp, #24
    ccf2:	4608      	mov	r0, r1
    ccf4:	aa0f      	add	r2, sp, #60	; 0x3c
    ccf6:	f7ff fe10 	bl	c91a <mbedtls_mpi_add_mpi>
    ccfa:	2800      	cmp	r0, #0
    ccfc:	f47f af72 	bne.w	cbe4 <mbedtls_mpi_div_mpi+0x1e4>
            Z.p[i - t - 1]--;
    cd00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cd02:	5953      	ldr	r3, [r2, r5]
    cd04:	3b01      	subs	r3, #1
    cd06:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
    cd08:	3f01      	subs	r7, #1
    cd0a:	3d04      	subs	r5, #4
    cd0c:	f1ab 0b04 	sub.w	fp, fp, #4
    cd10:	e73c      	b.n	cb8c <mbedtls_mpi_div_mpi+0x18c>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    cd12:	f859 000b 	ldr.w	r0, [r9, fp]
    if( 0 == d || u1 >= d )
    cd16:	b152      	cbz	r2, cd2e <mbedtls_mpi_div_mpi+0x32e>
    dividend  = (mbedtls_t_udbl) u1 << biL;
    cd18:	2300      	movs	r3, #0
    quotient = dividend / d;
    cd1a:	f7f3 fa1b 	bl	154 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
    cd1e:	f04f 33ff 	mov.w	r3, #4294967295
    cd22:	4283      	cmp	r3, r0
    cd24:	f04f 0300 	mov.w	r3, #0
    cd28:	418b      	sbcs	r3, r1
    cd2a:	4602      	mov	r2, r0
    cd2c:	d201      	bcs.n	cd32 <mbedtls_mpi_div_mpi+0x332>
        return ( ~0 );
    cd2e:	f04f 32ff 	mov.w	r2, #4294967295
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    cd32:	9b03      	ldr	r3, [sp, #12]
    cd34:	601a      	str	r2, [r3, #0]
    cd36:	e778      	b.n	cc2a <mbedtls_mpi_div_mpi+0x22a>
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    cd38:	463b      	mov	r3, r7
    cd3a:	e782      	b.n	cc42 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    cd3c:	9902      	ldr	r1, [sp, #8]
    cd3e:	e79a      	b.n	cc76 <mbedtls_mpi_div_mpi+0x276>
    cd40:	460c      	mov	r4, r1
    cd42:	e695      	b.n	ca70 <mbedtls_mpi_div_mpi+0x70>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    cd44:	f06f 040b 	mvn.w	r4, #11
    cd48:	e687      	b.n	ca5a <mbedtls_mpi_div_mpi+0x5a>

0000cd4a <mbedtls_mpi_mod_mpi>:
{
    cd4a:	b570      	push	{r4, r5, r6, lr}
    cd4c:	4604      	mov	r4, r0
    cd4e:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    cd50:	4610      	mov	r0, r2
    cd52:	2100      	movs	r1, #0
{
    cd54:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    cd56:	f7ff fd04 	bl	c762 <mbedtls_mpi_cmp_int>
    cd5a:	2800      	cmp	r0, #0
    cd5c:	db24      	blt.n	cda8 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    cd5e:	462a      	mov	r2, r5
    cd60:	4633      	mov	r3, r6
    cd62:	4621      	mov	r1, r4
    cd64:	2000      	movs	r0, #0
    cd66:	f7ff fe4b 	bl	ca00 <mbedtls_mpi_div_mpi>
    cd6a:	4605      	mov	r5, r0
    cd6c:	b138      	cbz	r0, cd7e <mbedtls_mpi_mod_mpi+0x34>
}
    cd6e:	4628      	mov	r0, r5
    cd70:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    cd72:	4632      	mov	r2, r6
    cd74:	4621      	mov	r1, r4
    cd76:	4620      	mov	r0, r4
    cd78:	f7ff fdcf 	bl	c91a <mbedtls_mpi_add_mpi>
    cd7c:	b990      	cbnz	r0, cda4 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    cd7e:	2100      	movs	r1, #0
    cd80:	4620      	mov	r0, r4
    cd82:	f7ff fcee 	bl	c762 <mbedtls_mpi_cmp_int>
    cd86:	2800      	cmp	r0, #0
    cd88:	dbf3      	blt.n	cd72 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    cd8a:	4631      	mov	r1, r6
    cd8c:	4620      	mov	r0, r4
    cd8e:	f7ff fca7 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
    cd92:	2800      	cmp	r0, #0
    cd94:	dbeb      	blt.n	cd6e <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    cd96:	4632      	mov	r2, r6
    cd98:	4621      	mov	r1, r4
    cd9a:	4620      	mov	r0, r4
    cd9c:	f7ff fddf 	bl	c95e <mbedtls_mpi_sub_mpi>
    cda0:	2800      	cmp	r0, #0
    cda2:	d0f2      	beq.n	cd8a <mbedtls_mpi_mod_mpi+0x40>
    cda4:	4605      	mov	r5, r0
    cda6:	e7e2      	b.n	cd6e <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    cda8:	f06f 0509 	mvn.w	r5, #9
    cdac:	e7df      	b.n	cd6e <mbedtls_mpi_mod_mpi+0x24>

0000cdae <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    cdae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdb2:	4606      	mov	r6, r0
    cdb4:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    cdb8:	4688      	mov	r8, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    cdba:	4618      	mov	r0, r3
    cdbc:	2100      	movs	r1, #0
{
    cdbe:	461d      	mov	r5, r3
    cdc0:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    cdc2:	f7ff fcce 	bl	c762 <mbedtls_mpi_cmp_int>
    cdc6:	2800      	cmp	r0, #0
    cdc8:	f340 821a 	ble.w	d200 <mbedtls_mpi_exp_mod+0x452>
    cdcc:	68ab      	ldr	r3, [r5, #8]
    cdce:	681c      	ldr	r4, [r3, #0]
    cdd0:	f014 0301 	ands.w	r3, r4, #1
    cdd4:	9307      	str	r3, [sp, #28]
    cdd6:	f000 8213 	beq.w	d200 <mbedtls_mpi_exp_mod+0x452>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    cdda:	2100      	movs	r1, #0
    cddc:	9805      	ldr	r0, [sp, #20]
    cdde:	f7ff fcc0 	bl	c762 <mbedtls_mpi_cmp_int>
    cde2:	2800      	cmp	r0, #0
    cde4:	f2c0 820c 	blt.w	d200 <mbedtls_mpi_exp_mod+0x452>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    cde8:	9805      	ldr	r0, [sp, #20]
    cdea:	f7ff fb3f 	bl	c46c <mbedtls_mpi_bitlen>
    cdee:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cdf2:	f200 8205 	bhi.w	d200 <mbedtls_mpi_exp_mod+0x452>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    cdf6:	4628      	mov	r0, r5
    cdf8:	f7ff fb38 	bl	c46c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    cdfc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ce00:	f200 81fe 	bhi.w	d200 <mbedtls_mpi_exp_mod+0x452>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    ce04:	2103      	movs	r1, #3
    ce06:	1ca7      	adds	r7, r4, #2
    ce08:	007f      	lsls	r7, r7, #1
    ce0a:	f007 0708 	and.w	r7, r7, #8
    ce0e:	4427      	add	r7, r4
        x *= ( 2 - ( m0 * x ) );
    ce10:	fb07 f304 	mul.w	r3, r7, r4
    for( i = biL; i >= 8; i /= 2 )
    ce14:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    ce16:	f1c3 0302 	rsb	r3, r3, #2
    ce1a:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
    ce1e:	d1f7      	bne.n	ce10 <mbedtls_mpi_exp_mod+0x62>
    X->s = 1;
    ce20:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    ce22:	f44f 7240 	mov.w	r2, #768	; 0x300
    ce26:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    ce28:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    ce2c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    ce30:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    ce34:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    ce38:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    ce3c:	9116      	str	r1, [sp, #88]	; 0x58
    ce3e:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    ce40:	f7fe fb6e 	bl	b520 <memset>

    i = mbedtls_mpi_bitlen( E );
    ce44:	9805      	ldr	r0, [sp, #20]
    ce46:	f7ff fb11 	bl	c46c <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    ce4a:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    ce4e:	f080 80f9 	bcs.w	d044 <mbedtls_mpi_exp_mod+0x296>
    ce52:	28ef      	cmp	r0, #239	; 0xef
    ce54:	f200 80f8 	bhi.w	d048 <mbedtls_mpi_exp_mod+0x29a>
    ce58:	284f      	cmp	r0, #79	; 0x4f
    ce5a:	f200 80f7 	bhi.w	d04c <mbedtls_mpi_exp_mod+0x29e>
    ce5e:	2817      	cmp	r0, #23
    ce60:	9b07      	ldr	r3, [sp, #28]
    ce62:	bf88      	it	hi
    ce64:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    ce66:	6869      	ldr	r1, [r5, #4]
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    ce68:	4630      	mov	r0, r6
    j = N->n + 1;
    ce6a:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    ce6e:	4649      	mov	r1, r9
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    ce70:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    ce72:	f7ff fa5b 	bl	c32c <mbedtls_mpi_grow>
    ce76:	4604      	mov	r4, r0
    ce78:	2800      	cmp	r0, #0
    ce7a:	f040 80bf 	bne.w	cffc <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    ce7e:	4649      	mov	r1, r9
    ce80:	a81d      	add	r0, sp, #116	; 0x74
    ce82:	f7ff fa53 	bl	c32c <mbedtls_mpi_grow>
    ce86:	4604      	mov	r4, r0
    ce88:	2800      	cmp	r0, #0
    ce8a:	f040 80b7 	bne.w	cffc <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    ce8e:	ea4f 0149 	mov.w	r1, r9, lsl #1
    ce92:	a80e      	add	r0, sp, #56	; 0x38
    ce94:	f7ff fa4a 	bl	c32c <mbedtls_mpi_grow>
    ce98:	4604      	mov	r4, r0
    ce9a:	2800      	cmp	r0, #0
    ce9c:	f040 80ae 	bne.w	cffc <mbedtls_mpi_exp_mod+0x24e>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    cea0:	f8d8 3000 	ldr.w	r3, [r8]
    cea4:	9306      	str	r3, [sp, #24]
    if( neg )
    cea6:	3301      	adds	r3, #1
    cea8:	d10b      	bne.n	cec2 <mbedtls_mpi_exp_mod+0x114>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    ceaa:	4641      	mov	r1, r8
    ceac:	a814      	add	r0, sp, #80	; 0x50
    ceae:	f7ff fa7e 	bl	c3ae <mbedtls_mpi_copy>
    ceb2:	4604      	mov	r4, r0
    ceb4:	2800      	cmp	r0, #0
    ceb6:	f040 80a1 	bne.w	cffc <mbedtls_mpi_exp_mod+0x24e>
        Apos.s = 1;
    ceba:	2301      	movs	r3, #1
        A = &Apos;
    cebc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
        Apos.s = 1;
    cec0:	9314      	str	r3, [sp, #80]	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( prec_RR == NULL || prec_RR->p == NULL )
    cec2:	9be4      	ldr	r3, [sp, #912]	; 0x390
    cec4:	b11b      	cbz	r3, cece <mbedtls_mpi_exp_mod+0x120>
    cec6:	689b      	ldr	r3, [r3, #8]
    cec8:	2b00      	cmp	r3, #0
    ceca:	f040 80c1 	bne.w	d050 <mbedtls_mpi_exp_mod+0x2a2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    cece:	2101      	movs	r1, #1
    ced0:	a80b      	add	r0, sp, #44	; 0x2c
    ced2:	f7ff fa9e 	bl	c412 <mbedtls_mpi_lset>
    ced6:	4604      	mov	r4, r0
    ced8:	2800      	cmp	r0, #0
    ceda:	f040 808f 	bne.w	cffc <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    cede:	6869      	ldr	r1, [r5, #4]
    cee0:	a80b      	add	r0, sp, #44	; 0x2c
    cee2:	0189      	lsls	r1, r1, #6
    cee4:	f7ff fb3b 	bl	c55e <mbedtls_mpi_shift_l>
    cee8:	4604      	mov	r4, r0
    ceea:	2800      	cmp	r0, #0
    ceec:	f040 8086 	bne.w	cffc <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    cef0:	a90b      	add	r1, sp, #44	; 0x2c
    cef2:	462a      	mov	r2, r5
    cef4:	4608      	mov	r0, r1
    cef6:	f7ff ff28 	bl	cd4a <mbedtls_mpi_mod_mpi>
    cefa:	4604      	mov	r4, r0
    cefc:	2800      	cmp	r0, #0
    cefe:	d17d      	bne.n	cffc <mbedtls_mpi_exp_mod+0x24e>

        if( prec_RR != NULL )
    cf00:	9be4      	ldr	r3, [sp, #912]	; 0x390
    cf02:	b123      	cbz	r3, cf0e <mbedtls_mpi_exp_mod+0x160>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    cf04:	220c      	movs	r2, #12
    cf06:	4618      	mov	r0, r3
    cf08:	a90b      	add	r1, sp, #44	; 0x2c
    }
    else
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    cf0a:	f7fe fafe 	bl	b50a <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    cf0e:	4629      	mov	r1, r5
    cf10:	4640      	mov	r0, r8
    cf12:	f7ff fbe5 	bl	c6e0 <mbedtls_mpi_cmp_mpi>
    cf16:	2800      	cmp	r0, #0
    cf18:	f2c0 809e 	blt.w	d058 <mbedtls_mpi_exp_mod+0x2aa>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    cf1c:	462a      	mov	r2, r5
    cf1e:	4641      	mov	r1, r8
    cf20:	a81d      	add	r0, sp, #116	; 0x74
    cf22:	f7ff ff12 	bl	cd4a <mbedtls_mpi_mod_mpi>
    cf26:	4604      	mov	r4, r0
    cf28:	2800      	cmp	r0, #0
    cf2a:	d167      	bne.n	cffc <mbedtls_mpi_exp_mod+0x24e>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    cf2c:	6869      	ldr	r1, [r5, #4]
    cf2e:	a81d      	add	r0, sp, #116	; 0x74
    cf30:	3101      	adds	r1, #1
    cf32:	f7ff f9fb 	bl	c32c <mbedtls_mpi_grow>
    cf36:	4604      	mov	r4, r0
    cf38:	2800      	cmp	r0, #0
    cf3a:	d15f      	bne.n	cffc <mbedtls_mpi_exp_mod+0x24e>
    *mm = ~x + 1;
    cf3c:	f1c7 0b00 	rsb	fp, r7, #0
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    cf40:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    cf44:	465b      	mov	r3, fp
    cf46:	462a      	mov	r2, r5
    cf48:	a90b      	add	r1, sp, #44	; 0x2c
    cf4a:	a81d      	add	r0, sp, #116	; 0x74
    cf4c:	f8cd 9000 	str.w	r9, [sp]
    cf50:	f7ff f935 	bl	c1be <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    cf54:	4630      	mov	r0, r6
    cf56:	a90b      	add	r1, sp, #44	; 0x2c
    cf58:	f7ff fa29 	bl	c3ae <mbedtls_mpi_copy>
    cf5c:	4604      	mov	r4, r0
    cf5e:	2800      	cmp	r0, #0
    cf60:	d14c      	bne.n	cffc <mbedtls_mpi_exp_mod+0x24e>
    mbedtls_mpi_uint z = 1;
    cf62:	2701      	movs	r7, #1
    cf64:	ab0a      	add	r3, sp, #40	; 0x28
    U.p = &z;
    cf66:	9319      	str	r3, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    cf68:	462a      	mov	r2, r5
    cf6a:	465b      	mov	r3, fp
    cf6c:	4630      	mov	r0, r6
    cf6e:	f8cd 9000 	str.w	r9, [sp]
    cf72:	a917      	add	r1, sp, #92	; 0x5c
    U.n = U.s = (int) z;
    cf74:	e9cd 7717 	strd	r7, r7, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    cf78:	970a      	str	r7, [sp, #40]	; 0x28
    mpi_montmul( A, &U, N, mm, T );
    cf7a:	f7ff f920 	bl	c1be <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    cf7e:	9b03      	ldr	r3, [sp, #12]
    cf80:	42bb      	cmp	r3, r7
    cf82:	d16e      	bne.n	d062 <mbedtls_mpi_exp_mod+0x2b4>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    cf84:	f04f 0900 	mov.w	r9, #0
    nbits   = 0;
    cf88:	464f      	mov	r7, r9
    bufsize = 0;
    cf8a:	46ca      	mov	sl, r9
    wbits   = 0;
    cf8c:	46c8      	mov	r8, r9
    nblimbs = E->n;
    cf8e:	9b05      	ldr	r3, [sp, #20]
    cf90:	685b      	ldr	r3, [r3, #4]
    cf92:	9304      	str	r3, [sp, #16]

    while( 1 )
    {
        if( bufsize == 0 )
    cf94:	f1ba 0f00 	cmp.w	sl, #0
    cf98:	f040 80b6 	bne.w	d108 <mbedtls_mpi_exp_mod+0x35a>
        {
            if( nblimbs == 0 )
    cf9c:	9b04      	ldr	r3, [sp, #16]
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	f040 80ad 	bne.w	d0fe <mbedtls_mpi_exp_mod+0x350>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    cfa4:	f04f 0a01 	mov.w	sl, #1
    cfa8:	9b03      	ldr	r3, [sp, #12]
    cfaa:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    cfae:	fa0a fa03 	lsl.w	sl, sl, r3
    for( i = 0; i < nbits; i++ )
    cfb2:	9b04      	ldr	r3, [sp, #16]
    cfb4:	42bb      	cmp	r3, r7
    cfb6:	f040 8101 	bne.w	d1bc <mbedtls_mpi_exp_mod+0x40e>
    mbedtls_mpi_uint z = 1;
    cfba:	2301      	movs	r3, #1
    cfbc:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    cfbe:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    cfc2:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    cfc4:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    cfc6:	465b      	mov	r3, fp
    cfc8:	462a      	mov	r2, r5
    cfca:	4630      	mov	r0, r6
    cfcc:	f8cd 9000 	str.w	r9, [sp]
    cfd0:	a917      	add	r1, sp, #92	; 0x5c
    cfd2:	f7ff f8f4 	bl	c1be <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    cfd6:	9b06      	ldr	r3, [sp, #24]
    cfd8:	3301      	adds	r3, #1
    cfda:	d10f      	bne.n	cffc <mbedtls_mpi_exp_mod+0x24e>
    cfdc:	9b05      	ldr	r3, [sp, #20]
    cfde:	685b      	ldr	r3, [r3, #4]
    cfe0:	b163      	cbz	r3, cffc <mbedtls_mpi_exp_mod+0x24e>
    cfe2:	9b05      	ldr	r3, [sp, #20]
    cfe4:	689b      	ldr	r3, [r3, #8]
    cfe6:	681b      	ldr	r3, [r3, #0]
    cfe8:	07db      	lsls	r3, r3, #31
    cfea:	d507      	bpl.n	cffc <mbedtls_mpi_exp_mod+0x24e>
    {
        X->s = -1;
    cfec:	9b06      	ldr	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    cfee:	4632      	mov	r2, r6
    cff0:	4629      	mov	r1, r5
    cff2:	4630      	mov	r0, r6
        X->s = -1;
    cff4:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    cff6:	f7ff fc90 	bl	c91a <mbedtls_mpi_add_mpi>
    cffa:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    cffc:	9b03      	ldr	r3, [sp, #12]
        mbedtls_mpi_free( &W[i] );
    cffe:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    d000:	1e5d      	subs	r5, r3, #1
    d002:	2301      	movs	r3, #1
    d004:	9a03      	ldr	r2, [sp, #12]
    d006:	fa03 f505 	lsl.w	r5, r3, r5
    d00a:	fa03 f602 	lsl.w	r6, r3, r2
    d00e:	42ae      	cmp	r6, r5
    d010:	f200 80ef 	bhi.w	d1f2 <mbedtls_mpi_exp_mod+0x444>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    d014:	a81d      	add	r0, sp, #116	; 0x74
    d016:	f7ff f977 	bl	c308 <mbedtls_mpi_free>
    d01a:	a80e      	add	r0, sp, #56	; 0x38
    d01c:	f7ff f974 	bl	c308 <mbedtls_mpi_free>
    d020:	a814      	add	r0, sp, #80	; 0x50
    d022:	f7ff f971 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    d026:	a811      	add	r0, sp, #68	; 0x44
    d028:	f7ff f96e 	bl	c308 <mbedtls_mpi_free>

    if( prec_RR == NULL || prec_RR->p == NULL )
    d02c:	9be4      	ldr	r3, [sp, #912]	; 0x390
    d02e:	b10b      	cbz	r3, d034 <mbedtls_mpi_exp_mod+0x286>
    d030:	689b      	ldr	r3, [r3, #8]
    d032:	b913      	cbnz	r3, d03a <mbedtls_mpi_exp_mod+0x28c>
        mbedtls_mpi_free( &RR );
    d034:	a80b      	add	r0, sp, #44	; 0x2c
    d036:	f7ff f967 	bl	c308 <mbedtls_mpi_free>

    return( ret );
}
    d03a:	4620      	mov	r0, r4
    d03c:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    d044:	2306      	movs	r3, #6
    d046:	e70e      	b.n	ce66 <mbedtls_mpi_exp_mod+0xb8>
    d048:	2305      	movs	r3, #5
    d04a:	e70c      	b.n	ce66 <mbedtls_mpi_exp_mod+0xb8>
    d04c:	2304      	movs	r3, #4
    d04e:	e70a      	b.n	ce66 <mbedtls_mpi_exp_mod+0xb8>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    d050:	220c      	movs	r2, #12
    d052:	99e4      	ldr	r1, [sp, #912]	; 0x390
    d054:	a80b      	add	r0, sp, #44	; 0x2c
    d056:	e758      	b.n	cf0a <mbedtls_mpi_exp_mod+0x15c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    d058:	4641      	mov	r1, r8
    d05a:	a81d      	add	r0, sp, #116	; 0x74
    d05c:	f7ff f9a7 	bl	c3ae <mbedtls_mpi_copy>
    d060:	e769      	b.n	cf36 <mbedtls_mpi_exp_mod+0x188>
        j =  one << ( wsize - 1 );
    d062:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    d064:	6869      	ldr	r1, [r5, #4]
        j =  one << ( wsize - 1 );
    d066:	f103 3aff 	add.w	sl, r3, #4294967295
    d06a:	fa07 f30a 	lsl.w	r3, r7, sl
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    d06e:	270c      	movs	r7, #12
        j =  one << ( wsize - 1 );
    d070:	9304      	str	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    d072:	fa07 f70a 	lsl.w	r7, r7, sl
    d076:	ab1a      	add	r3, sp, #104	; 0x68
    d078:	441f      	add	r7, r3
    d07a:	4638      	mov	r0, r7
    d07c:	3101      	adds	r1, #1
    d07e:	f7ff f955 	bl	c32c <mbedtls_mpi_grow>
    d082:	2800      	cmp	r0, #0
    d084:	d1b9      	bne.n	cffa <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    d086:	4638      	mov	r0, r7
    d088:	a91d      	add	r1, sp, #116	; 0x74
    d08a:	f7ff f990 	bl	c3ae <mbedtls_mpi_copy>
    d08e:	2800      	cmp	r0, #0
    d090:	d1b3      	bne.n	cffa <mbedtls_mpi_exp_mod+0x24c>
        for( i = 0; i < wsize - 1; i++ )
    d092:	46a0      	mov	r8, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    d094:	465b      	mov	r3, fp
    d096:	462a      	mov	r2, r5
    d098:	4639      	mov	r1, r7
    d09a:	4638      	mov	r0, r7
    d09c:	f8cd 9000 	str.w	r9, [sp]
        for( i = 0; i < wsize - 1; i++ )
    d0a0:	f108 0801 	add.w	r8, r8, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    d0a4:	f7ff f88b 	bl	c1be <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    d0a8:	45d0      	cmp	r8, sl
    d0aa:	d3f3      	bcc.n	d094 <mbedtls_mpi_exp_mod+0x2e6>
        for( i = j + 1; i < ( one << wsize ); i++ )
    d0ac:	f04f 0a01 	mov.w	sl, #1
    d0b0:	9b04      	ldr	r3, [sp, #16]
    d0b2:	f103 0801 	add.w	r8, r3, #1
    d0b6:	9b03      	ldr	r3, [sp, #12]
    d0b8:	fa0a fa03 	lsl.w	sl, sl, r3
    d0bc:	45c2      	cmp	sl, r8
    d0be:	f67f af61 	bls.w	cf84 <mbedtls_mpi_exp_mod+0x1d6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    d0c2:	6869      	ldr	r1, [r5, #4]
    d0c4:	f107 090c 	add.w	r9, r7, #12
    d0c8:	4648      	mov	r0, r9
    d0ca:	3101      	adds	r1, #1
    d0cc:	f7ff f92e 	bl	c32c <mbedtls_mpi_grow>
    d0d0:	2800      	cmp	r0, #0
    d0d2:	d192      	bne.n	cffa <mbedtls_mpi_exp_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    d0d4:	4639      	mov	r1, r7
    d0d6:	4648      	mov	r0, r9
    d0d8:	f7ff f969 	bl	c3ae <mbedtls_mpi_copy>
    d0dc:	2800      	cmp	r0, #0
    d0de:	d18c      	bne.n	cffa <mbedtls_mpi_exp_mod+0x24c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    d0e0:	ab0e      	add	r3, sp, #56	; 0x38
    d0e2:	9300      	str	r3, [sp, #0]
    d0e4:	462a      	mov	r2, r5
    d0e6:	465b      	mov	r3, fp
    d0e8:	4648      	mov	r0, r9
    d0ea:	a91d      	add	r1, sp, #116	; 0x74
    d0ec:	f7ff f867 	bl	c1be <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    d0f0:	464f      	mov	r7, r9
    d0f2:	f108 0801 	add.w	r8, r8, #1
    d0f6:	e7e1      	b.n	d0bc <mbedtls_mpi_exp_mod+0x30e>
        state = 2;
    d0f8:	f04f 0902 	mov.w	r9, #2
    d0fc:	e74a      	b.n	cf94 <mbedtls_mpi_exp_mod+0x1e6>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    d0fe:	f04f 0a20 	mov.w	sl, #32
            nblimbs--;
    d102:	9b04      	ldr	r3, [sp, #16]
    d104:	3b01      	subs	r3, #1
    d106:	9304      	str	r3, [sp, #16]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    d108:	9b05      	ldr	r3, [sp, #20]
    d10a:	9a04      	ldr	r2, [sp, #16]
    d10c:	689b      	ldr	r3, [r3, #8]
        bufsize--;
    d10e:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    d112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d116:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
    d11a:	f013 0301 	ands.w	r3, r3, #1
    d11e:	d10f      	bne.n	d140 <mbedtls_mpi_exp_mod+0x392>
    d120:	f1b9 0f00 	cmp.w	r9, #0
    d124:	f43f af36 	beq.w	cf94 <mbedtls_mpi_exp_mod+0x1e6>
        if( ei == 0 && state == 1 )
    d128:	f1b9 0f01 	cmp.w	r9, #1
    d12c:	d108      	bne.n	d140 <mbedtls_mpi_exp_mod+0x392>
            mpi_montmul( X, X, N, mm, &T );
    d12e:	ab0e      	add	r3, sp, #56	; 0x38
    d130:	9300      	str	r3, [sp, #0]
    d132:	462a      	mov	r2, r5
    d134:	465b      	mov	r3, fp
    d136:	4631      	mov	r1, r6
    d138:	4630      	mov	r0, r6
    d13a:	f7ff f840 	bl	c1be <mpi_montmul>
            continue;
    d13e:	e729      	b.n	cf94 <mbedtls_mpi_exp_mod+0x1e6>
        wbits |= ( ei << ( wsize - nbits ) );
    d140:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    d142:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
    d144:	1bd2      	subs	r2, r2, r7
    d146:	4093      	lsls	r3, r2
    d148:	ea48 0803 	orr.w	r8, r8, r3
        if( nbits == wsize )
    d14c:	9b03      	ldr	r3, [sp, #12]
    d14e:	42bb      	cmp	r3, r7
    d150:	d1d2      	bne.n	d0f8 <mbedtls_mpi_exp_mod+0x34a>
            for( i = 0; i < wsize; i++ )
    d152:	f04f 0900 	mov.w	r9, #0
                mpi_montmul( X, X, N, mm, &T );
    d156:	ab0e      	add	r3, sp, #56	; 0x38
    d158:	9300      	str	r3, [sp, #0]
    d15a:	462a      	mov	r2, r5
    d15c:	465b      	mov	r3, fp
    d15e:	4631      	mov	r1, r6
    d160:	4630      	mov	r0, r6
            for( i = 0; i < wsize; i++ )
    d162:	f109 0901 	add.w	r9, r9, #1
                mpi_montmul( X, X, N, mm, &T );
    d166:	f7ff f82a 	bl	c1be <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    d16a:	454f      	cmp	r7, r9
    d16c:	d8f3      	bhi.n	d156 <mbedtls_mpi_exp_mod+0x3a8>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    d16e:	2301      	movs	r3, #1
    for( size_t i = 0; i < T_size; i++ )
    d170:	f04f 0900 	mov.w	r9, #0
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    d174:	40bb      	lsls	r3, r7
    d176:	9308      	str	r3, [sp, #32]
    for( size_t i = 0; i < T_size; i++ )
    d178:	ab1a      	add	r3, sp, #104	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    d17a:	4641      	mov	r1, r8
    d17c:	4648      	mov	r0, r9
    d17e:	9309      	str	r3, [sp, #36]	; 0x24
    d180:	f000 f841 	bl	d206 <mbedtls_ct_size_bool_eq>
    d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d186:	b2c2      	uxtb	r2, r0
    d188:	4619      	mov	r1, r3
    d18a:	a811      	add	r0, sp, #68	; 0x44
    d18c:	f000 f853 	bl	d236 <mbedtls_mpi_safe_cond_assign>
    d190:	4607      	mov	r7, r0
    d192:	bb60      	cbnz	r0, d1ee <mbedtls_mpi_exp_mod+0x440>
    for( size_t i = 0; i < T_size; i++ )
    d194:	9a08      	ldr	r2, [sp, #32]
    d196:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d198:	f109 0901 	add.w	r9, r9, #1
    d19c:	454a      	cmp	r2, r9
    d19e:	f103 030c 	add.w	r3, r3, #12
    d1a2:	d1ea      	bne.n	d17a <mbedtls_mpi_exp_mod+0x3cc>
            mpi_montmul( X, &WW, N, mm, &T );
    d1a4:	ab0e      	add	r3, sp, #56	; 0x38
    d1a6:	9300      	str	r3, [sp, #0]
    d1a8:	462a      	mov	r2, r5
    d1aa:	465b      	mov	r3, fp
    d1ac:	4630      	mov	r0, r6
    d1ae:	a911      	add	r1, sp, #68	; 0x44
    d1b0:	f7ff f805 	bl	c1be <mpi_montmul>
            nbits = 0;
    d1b4:	46b8      	mov	r8, r7
            state--;
    d1b6:	f8dd 901c 	ldr.w	r9, [sp, #28]
    d1ba:	e6eb      	b.n	cf94 <mbedtls_mpi_exp_mod+0x1e6>
        mpi_montmul( X, X, N, mm, &T );
    d1bc:	465b      	mov	r3, fp
    d1be:	462a      	mov	r2, r5
    d1c0:	4631      	mov	r1, r6
    d1c2:	4630      	mov	r0, r6
    d1c4:	f8cd 9000 	str.w	r9, [sp]
        wbits <<= 1;
    d1c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
        mpi_montmul( X, X, N, mm, &T );
    d1cc:	f7fe fff7 	bl	c1be <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    d1d0:	ea1a 0f08 	tst.w	sl, r8
    d1d4:	d007      	beq.n	d1e6 <mbedtls_mpi_exp_mod+0x438>
            mpi_montmul( X, &W[1], N, mm, &T );
    d1d6:	465b      	mov	r3, fp
    d1d8:	462a      	mov	r2, r5
    d1da:	4630      	mov	r0, r6
    d1dc:	f8cd 9000 	str.w	r9, [sp]
    d1e0:	a91d      	add	r1, sp, #116	; 0x74
    d1e2:	f7fe ffec 	bl	c1be <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    d1e6:	9b04      	ldr	r3, [sp, #16]
    d1e8:	3301      	adds	r3, #1
    d1ea:	9304      	str	r3, [sp, #16]
    d1ec:	e6e1      	b.n	cfb2 <mbedtls_mpi_exp_mod+0x204>
    d1ee:	4604      	mov	r4, r0
    d1f0:	e704      	b.n	cffc <mbedtls_mpi_exp_mod+0x24e>
        mbedtls_mpi_free( &W[i] );
    d1f2:	ab1a      	add	r3, sp, #104	; 0x68
    d1f4:	fb07 3005 	mla	r0, r7, r5, r3
    d1f8:	f7ff f886 	bl	c308 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    d1fc:	3501      	adds	r5, #1
    d1fe:	e706      	b.n	d00e <mbedtls_mpi_exp_mod+0x260>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    d200:	f06f 0403 	mvn.w	r4, #3
    d204:	e719      	b.n	d03a <mbedtls_mpi_exp_mod+0x28c>

0000d206 <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    d206:	4048      	eors	r0, r1
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    d208:	4241      	negs	r1, r0
    d20a:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    d20c:	43c0      	mvns	r0, r0
    d20e:	0fc0      	lsrs	r0, r0, #31
    d210:	4770      	bx	lr

0000d212 <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    d212:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    d214:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    d216:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    d218:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d21a:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    d21c:	4285      	cmp	r5, r0
    d21e:	d100      	bne.n	d222 <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    d220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    d222:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    d226:	f851 4f04 	ldr.w	r4, [r1, #4]!
    d22a:	403e      	ands	r6, r7
    d22c:	401c      	ands	r4, r3
    d22e:	4334      	orrs	r4, r6
    d230:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    d232:	3501      	adds	r5, #1
    d234:	e7f2      	b.n	d21c <mbedtls_ct_mpi_uint_cond_assign+0xa>

0000d236 <mbedtls_mpi_safe_cond_assign>:
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    d236:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d23a:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    limb_mask = mbedtls_ct_mpi_uint_mask( assign );;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d23c:	6849      	ldr	r1, [r1, #4]
{
    d23e:	4605      	mov	r5, r0
    d240:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    d242:	f7ff f873 	bl	c32c <mbedtls_mpi_grow>
    d246:	4680      	mov	r8, r0
    d248:	b9c8      	cbnz	r0, d27e <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    d24a:	f1c9 0600 	rsb	r6, r9, #0
    d24e:	ea46 0609 	orr.w	r6, r6, r9
    d252:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );

    for( i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    d254:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    d256:	682c      	ldr	r4, [r5, #0]
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    d258:	68ba      	ldr	r2, [r7, #8]
    unsigned uif0 = if0 + 1;
    d25a:	1c63      	adds	r3, r4, #1
    unsigned uif1 = if1 + 1;
    d25c:	683c      	ldr	r4, [r7, #0]
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    d25e:	68a9      	ldr	r1, [r5, #8]
    unsigned uif1 = if1 + 1;
    d260:	3401      	adds	r4, #1
    unsigned ur = ( uif0 & ~mask ) | ( uif1 & mask );
    d262:	405c      	eors	r4, r3
    d264:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    d268:	405c      	eors	r4, r3
    return( (int) ur - 1 );
    d26a:	3c01      	subs	r4, #1
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    d26c:	464b      	mov	r3, r9
    d26e:	6878      	ldr	r0, [r7, #4]
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    d270:	602c      	str	r4, [r5, #0]
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    d272:	f7ff ffce 	bl	d212 <mbedtls_ct_mpi_uint_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    d276:	687b      	ldr	r3, [r7, #4]
    d278:	686a      	ldr	r2, [r5, #4]
    d27a:	429a      	cmp	r2, r3
    d27c:	d802      	bhi.n	d284 <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    d27e:	4640      	mov	r0, r8
    d280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    d284:	68a9      	ldr	r1, [r5, #8]
    d286:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d28a:	4032      	ands	r2, r6
    d28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    d290:	3301      	adds	r3, #1
    d292:	e7f1      	b.n	d278 <mbedtls_mpi_safe_cond_assign+0x42>

0000d294 <platform_calloc_uninit>:
}
    d294:	2000      	movs	r0, #0
    d296:	4770      	bx	lr

0000d298 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    d298:	4770      	bx	lr

0000d29a <platform_free_uninit>:
    d29a:	4770      	bx	lr

0000d29c <mbedtls_rsa_import>:
{
    d29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2a0:	4605      	mov	r5, r0
    d2a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    d2a6:	4691      	mov	r9, r2
    d2a8:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d2aa:	460c      	mov	r4, r1
    d2ac:	b979      	cbnz	r1, d2ce <mbedtls_rsa_import+0x32>
    d2ae:	f1b9 0f00 	cmp.w	r9, #0
    d2b2:	d115      	bne.n	d2e0 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d2b4:	f1b8 0f00 	cmp.w	r8, #0
    d2b8:	d11a      	bne.n	d2f0 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d2ba:	bb0f      	cbnz	r7, d300 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d2bc:	bb46      	cbnz	r6, d310 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    d2be:	b37c      	cbz	r4, d320 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    d2c0:	f105 0008 	add.w	r0, r5, #8
    d2c4:	f7ff f8ee 	bl	c4a4 <mbedtls_mpi_size>
    d2c8:	6068      	str	r0, [r5, #4]
    return( 0 );
    d2ca:	2000      	movs	r0, #0
    d2cc:	e006      	b.n	d2dc <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    d2ce:	3008      	adds	r0, #8
    d2d0:	f7ff f86d 	bl	c3ae <mbedtls_mpi_copy>
    d2d4:	2800      	cmp	r0, #0
    d2d6:	d0ea      	beq.n	d2ae <mbedtls_rsa_import+0x12>
    d2d8:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    d2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    d2e0:	4649      	mov	r1, r9
    d2e2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    d2e6:	f7ff f862 	bl	c3ae <mbedtls_mpi_copy>
    d2ea:	2800      	cmp	r0, #0
    d2ec:	d0e2      	beq.n	d2b4 <mbedtls_rsa_import+0x18>
    d2ee:	e7f3      	b.n	d2d8 <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    d2f0:	4641      	mov	r1, r8
    d2f2:	f105 0038 	add.w	r0, r5, #56	; 0x38
    d2f6:	f7ff f85a 	bl	c3ae <mbedtls_mpi_copy>
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d0dd      	beq.n	d2ba <mbedtls_rsa_import+0x1e>
    d2fe:	e7eb      	b.n	d2d8 <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    d300:	4639      	mov	r1, r7
    d302:	f105 0020 	add.w	r0, r5, #32
    d306:	f7ff f852 	bl	c3ae <mbedtls_mpi_copy>
    d30a:	2800      	cmp	r0, #0
    d30c:	d0d6      	beq.n	d2bc <mbedtls_rsa_import+0x20>
    d30e:	e7e3      	b.n	d2d8 <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    d310:	4631      	mov	r1, r6
    d312:	f105 0014 	add.w	r0, r5, #20
    d316:	f7ff f84a 	bl	c3ae <mbedtls_mpi_copy>
    d31a:	2800      	cmp	r0, #0
    d31c:	d0cf      	beq.n	d2be <mbedtls_rsa_import+0x22>
    d31e:	e7db      	b.n	d2d8 <mbedtls_rsa_import+0x3c>
    return( 0 );
    d320:	4620      	mov	r0, r4
    d322:	e7db      	b.n	d2dc <mbedtls_rsa_import+0x40>

0000d324 <mbedtls_rsa_init>:
{
    d324:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d326:	22ac      	movs	r2, #172	; 0xac
    d328:	2100      	movs	r1, #0
{
    d32a:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    d32c:	f7fe f8f8 	bl	b520 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    d330:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    d332:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    d336:	bd10      	pop	{r4, pc}

0000d338 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    d338:	b510      	push	{r4, lr}
    if( ctx == NULL )
    d33a:	4604      	mov	r4, r0
    d33c:	b3a0      	cbz	r0, d3a8 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    d33e:	308c      	adds	r0, #140	; 0x8c
    d340:	f7fe ffe2 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    d344:	f104 0098 	add.w	r0, r4, #152	; 0x98
    d348:	f7fe ffde 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    d34c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    d350:	f7fe ffda 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    d354:	f104 0020 	add.w	r0, r4, #32
    d358:	f7fe ffd6 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    d35c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d360:	f7fe ffd2 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    d364:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d368:	f7fe ffce 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    d36c:	f104 0014 	add.w	r0, r4, #20
    d370:	f7fe ffca 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    d374:	f104 0008 	add.w	r0, r4, #8
    d378:	f7fe ffc6 	bl	c308 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    d37c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    d380:	f7fe ffc2 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    d384:	f104 0074 	add.w	r0, r4, #116	; 0x74
    d388:	f7fe ffbe 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    d38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d390:	f7fe ffba 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    d394:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d398:	f7fe ffb6 	bl	c308 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    d39c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    d3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    d3a4:	f7fe bfb0 	b.w	c308 <mbedtls_mpi_free>
}
    d3a8:	bd10      	pop	{r4, pc}

0000d3aa <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    d3aa:	226c      	movs	r2, #108	; 0x6c
    d3ac:	2100      	movs	r1, #0
    d3ae:	f7fe b8b7 	b.w	b520 <memset>

0000d3b2 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    d3b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d3b6:	4605      	mov	r5, r0
    d3b8:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    d3ba:	4614      	mov	r4, r2
    d3bc:	b912      	cbnz	r2, d3c4 <mbedtls_sha256_update+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    d3be:	2000      	movs	r0, #0
}
    d3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    d3c4:	6803      	ldr	r3, [r0, #0]
    d3c6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    d3ca:	18d3      	adds	r3, r2, r3
    d3cc:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    d3ce:	bf22      	ittt	cs
    d3d0:	6843      	ldrcs	r3, [r0, #4]
    d3d2:	3301      	addcs	r3, #1
    d3d4:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    d3d6:	b1a7      	cbz	r7, d402 <mbedtls_sha256_update+0x50>
    fill = 64 - left;
    d3d8:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    d3dc:	454a      	cmp	r2, r9
    d3de:	d310      	bcc.n	d402 <mbedtls_sha256_update+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    d3e0:	f100 0828 	add.w	r8, r0, #40	; 0x28
    d3e4:	464a      	mov	r2, r9
    d3e6:	eb08 0007 	add.w	r0, r8, r7
    d3ea:	f7fe f88e 	bl	b50a <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d3ee:	4641      	mov	r1, r8
    d3f0:	4628      	mov	r0, r5
    d3f2:	f7f9 f9b9 	bl	6768 <mbedtls_internal_sha256_process>
    d3f6:	2800      	cmp	r0, #0
    d3f8:	d1e2      	bne.n	d3c0 <mbedtls_sha256_update+0xe>
        ilen  -= fill;
    d3fa:	443c      	add	r4, r7
        left = 0;
    d3fc:	4607      	mov	r7, r0
        input += fill;
    d3fe:	444e      	add	r6, r9
        ilen  -= fill;
    d400:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    d402:	4426      	add	r6, r4
    d404:	e005      	b.n	d412 <mbedtls_sha256_update+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    d406:	4628      	mov	r0, r5
    d408:	f7f9 f9ae 	bl	6768 <mbedtls_internal_sha256_process>
    d40c:	2800      	cmp	r0, #0
    d40e:	d1d7      	bne.n	d3c0 <mbedtls_sha256_update+0xe>
        ilen  -= 64;
    d410:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    d412:	2c3f      	cmp	r4, #63	; 0x3f
    d414:	eba6 0104 	sub.w	r1, r6, r4
    d418:	d8f5      	bhi.n	d406 <mbedtls_sha256_update+0x54>
    if( ilen > 0 )
    d41a:	2c00      	cmp	r4, #0
    d41c:	d0cf      	beq.n	d3be <mbedtls_sha256_update+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    d41e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    d422:	4622      	mov	r2, r4
    d424:	4438      	add	r0, r7
    d426:	f7fe f870 	bl	b50a <memcpy>
    d42a:	e7c8      	b.n	d3be <mbedtls_sha256_update+0xc>

0000d42c <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    d42c:	b570      	push	{r4, r5, r6, lr}
    d42e:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    d430:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    d432:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    d434:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    d438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    d43c:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    d43e:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    d440:	4403      	add	r3, r0
{
    d442:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    d444:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    d448:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    d44c:	d861      	bhi.n	d512 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    d44e:	2100      	movs	r1, #0
    d450:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    d454:	f7fe f864 	bl	b520 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    d458:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    d45c:	0f5a      	lsrs	r2, r3, #29
    d45e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    d462:	00db      	lsls	r3, r3, #3
    d464:	ba12      	rev	r2, r2
    d466:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d468:	4631      	mov	r1, r6
    d46a:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    d46c:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    d46e:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d470:	f7f9 f97a 	bl	6768 <mbedtls_internal_sha256_process>
    d474:	2800      	cmp	r0, #0
    d476:	d14b      	bne.n	d510 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    d478:	7ae3      	ldrb	r3, [r4, #11]
    d47a:	702b      	strb	r3, [r5, #0]
    d47c:	8963      	ldrh	r3, [r4, #10]
    d47e:	706b      	strb	r3, [r5, #1]
    d480:	68a3      	ldr	r3, [r4, #8]
    d482:	0a1b      	lsrs	r3, r3, #8
    d484:	70ab      	strb	r3, [r5, #2]
    d486:	68a3      	ldr	r3, [r4, #8]
    d488:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    d48a:	7be3      	ldrb	r3, [r4, #15]
    d48c:	712b      	strb	r3, [r5, #4]
    d48e:	89e3      	ldrh	r3, [r4, #14]
    d490:	716b      	strb	r3, [r5, #5]
    d492:	68e3      	ldr	r3, [r4, #12]
    d494:	0a1b      	lsrs	r3, r3, #8
    d496:	71ab      	strb	r3, [r5, #6]
    d498:	68e3      	ldr	r3, [r4, #12]
    d49a:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    d49c:	7ce3      	ldrb	r3, [r4, #19]
    d49e:	722b      	strb	r3, [r5, #8]
    d4a0:	8a63      	ldrh	r3, [r4, #18]
    d4a2:	726b      	strb	r3, [r5, #9]
    d4a4:	6923      	ldr	r3, [r4, #16]
    d4a6:	0a1b      	lsrs	r3, r3, #8
    d4a8:	72ab      	strb	r3, [r5, #10]
    d4aa:	6923      	ldr	r3, [r4, #16]
    d4ac:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    d4ae:	7de3      	ldrb	r3, [r4, #23]
    d4b0:	732b      	strb	r3, [r5, #12]
    d4b2:	8ae3      	ldrh	r3, [r4, #22]
    d4b4:	736b      	strb	r3, [r5, #13]
    d4b6:	6963      	ldr	r3, [r4, #20]
    d4b8:	0a1b      	lsrs	r3, r3, #8
    d4ba:	73ab      	strb	r3, [r5, #14]
    d4bc:	6963      	ldr	r3, [r4, #20]
    d4be:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    d4c0:	7ee3      	ldrb	r3, [r4, #27]
    d4c2:	742b      	strb	r3, [r5, #16]
    d4c4:	8b63      	ldrh	r3, [r4, #26]
    d4c6:	746b      	strb	r3, [r5, #17]
    d4c8:	69a3      	ldr	r3, [r4, #24]
    d4ca:	0a1b      	lsrs	r3, r3, #8
    d4cc:	74ab      	strb	r3, [r5, #18]
    d4ce:	69a3      	ldr	r3, [r4, #24]
    d4d0:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    d4d2:	7fe3      	ldrb	r3, [r4, #31]
    d4d4:	752b      	strb	r3, [r5, #20]
    d4d6:	8be3      	ldrh	r3, [r4, #30]
    d4d8:	756b      	strb	r3, [r5, #21]
    d4da:	69e3      	ldr	r3, [r4, #28]
    d4dc:	0a1b      	lsrs	r3, r3, #8
    d4de:	75ab      	strb	r3, [r5, #22]
    d4e0:	69e3      	ldr	r3, [r4, #28]
    d4e2:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    d4e4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    d4e8:	762b      	strb	r3, [r5, #24]
    d4ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    d4ec:	766b      	strb	r3, [r5, #25]
    d4ee:	6a23      	ldr	r3, [r4, #32]
    d4f0:	0a1b      	lsrs	r3, r3, #8
    d4f2:	76ab      	strb	r3, [r5, #26]
    d4f4:	6a23      	ldr	r3, [r4, #32]
    d4f6:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    d4f8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d4fa:	b94b      	cbnz	r3, d510 <mbedtls_sha256_finish+0xe4>
#endif
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    d4fc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d500:	772b      	strb	r3, [r5, #28]
    d502:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d504:	776b      	strb	r3, [r5, #29]
    d506:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d508:	0a1b      	lsrs	r3, r3, #8
    d50a:	77ab      	strb	r3, [r5, #30]
    d50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d50e:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    d510:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    d512:	2100      	movs	r1, #0
    d514:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    d518:	f7fe f802 	bl	b520 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    d51c:	4631      	mov	r1, r6
    d51e:	4620      	mov	r0, r4
    d520:	f7f9 f922 	bl	6768 <mbedtls_internal_sha256_process>
    d524:	2800      	cmp	r0, #0
    d526:	d1f3      	bne.n	d510 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    d528:	4601      	mov	r1, r0
    d52a:	2238      	movs	r2, #56	; 0x38
    d52c:	4630      	mov	r0, r6
    d52e:	e791      	b.n	d454 <mbedtls_sha256_finish+0x28>

0000d530 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    d530:	4700      	bx	r0

0000d532 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    d532:	f000 bc66 	b.w	de02 <z_impl_k_busy_wait>

0000d536 <clock_stop>:
{
    d536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d538:	4605      	mov	r5, r0
    switch (domain)
    d53a:	2803      	cmp	r0, #3
    d53c:	d874      	bhi.n	d628 <clock_stop+0xf2>
    d53e:	e8df f000 	tbb	[pc, r0]
    d542:	2102      	.short	0x2102
    d544:	3b2d      	.short	0x3b2d
    d546:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d54a:	2202      	movs	r2, #2
    d54c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d550:	2200      	movs	r2, #0
    d552:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d556:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d55a:	2201      	movs	r2, #1
    d55c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d55e:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d560:	429d      	cmp	r5, r3
    d562:	bf18      	it	ne
    d564:	2400      	movne	r4, #0
    d566:	f242 7710 	movw	r7, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    d56a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d56e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d572:	bf08      	it	eq
    d574:	f10d 0407 	addeq.w	r4, sp, #7
    switch (domain)
    d578:	2d03      	cmp	r5, #3
    d57a:	d855      	bhi.n	d628 <clock_stop+0xf2>
    d57c:	e8df f005 	tbb	[pc, r5]
    d580:	4d443b2a 	.word	0x4d443b2a
    p_reg->INTENCLR = mask;
    d584:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d588:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d58a:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    d58c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d590:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d594:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d598:	605a      	str	r2, [r3, #4]
}
    d59a:	e7e0      	b.n	d55e <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    d59c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d5a0:	f44f 7200 	mov.w	r2, #512	; 0x200
    d5a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5a8:	2200      	movs	r2, #0
    d5aa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d5ae:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5b2:	2201      	movs	r2, #1
    d5b4:	625a      	str	r2, [r3, #36]	; 0x24
}
    d5b6:	e7d2      	b.n	d55e <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    d5b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d5bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    d5c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5c4:	2200      	movs	r2, #0
    d5c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d5ca:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d5ce:	2201      	movs	r2, #1
    d5d0:	61da      	str	r2, [r3, #28]
}
    d5d2:	e7c4      	b.n	d55e <clock_stop+0x28>
            if (p_clk_src != NULL)
    d5d4:	b124      	cbz	r4, d5e0 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d5d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d5da:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    d5de:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d5e0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d5e4:	03db      	lsls	r3, r3, #15
    d5e6:	d51f      	bpl.n	d628 <clock_stop+0xf2>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d5e8:	b9d4      	cbnz	r4, d620 <clock_stop+0xea>
    d5ea:	2001      	movs	r0, #1
    d5ec:	f7ff ffa1 	bl	d532 <nrfx_busy_wait>
    d5f0:	3f01      	subs	r7, #1
    d5f2:	d1c1      	bne.n	d578 <clock_stop+0x42>
    d5f4:	e018      	b.n	d628 <clock_stop+0xf2>
            if (p_clk_src != NULL)
    d5f6:	b124      	cbz	r4, d602 <clock_stop+0xcc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d5f8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d5fc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d600:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d602:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d606:	e7ed      	b.n	d5e4 <clock_stop+0xae>
            if (p_clk_src != NULL)
    d608:	b124      	cbz	r4, d614 <clock_stop+0xde>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    d60a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d60e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d612:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    d614:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    d618:	e7e4      	b.n	d5e4 <clock_stop+0xae>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    d61a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    d61e:	e7e1      	b.n	d5e4 <clock_stop+0xae>
    d620:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d624:	2b01      	cmp	r3, #1
    d626:	d0e0      	beq.n	d5ea <clock_stop+0xb4>
}
    d628:	b003      	add	sp, #12
    d62a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d62c <nrfx_clock_start>:
{
    d62c:	b508      	push	{r3, lr}
    switch (domain)
    d62e:	2803      	cmp	r0, #3
    d630:	d81e      	bhi.n	d670 <nrfx_clock_start+0x44>
    d632:	e8df f000 	tbb	[pc, r0]
    d636:	3302      	.short	0x3302
    d638:	4d3f      	.short	0x4d3f
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d63a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    d63e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d642:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    d646:	03c9      	lsls	r1, r1, #15
    d648:	d413      	bmi.n	d672 <nrfx_clock_start+0x46>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    d64a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    d64e:	07db      	lsls	r3, r3, #31
    d650:	d419      	bmi.n	d686 <nrfx_clock_start+0x5a>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    d652:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    d654:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    d658:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d65c:	2300      	movs	r3, #0
    d65e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    d662:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    d666:	2302      	movs	r3, #2
    d668:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d66c:	2301      	movs	r3, #1
    d66e:	6093      	str	r3, [r2, #8]
}
    d670:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d672:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d676:	2b02      	cmp	r3, #2
    d678:	d0ec      	beq.n	d654 <nrfx_clock_start+0x28>
    if (!is_correct_clk)
    d67a:	2b01      	cmp	r3, #1
    d67c:	d0ea      	beq.n	d654 <nrfx_clock_start+0x28>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d67e:	2000      	movs	r0, #0
    d680:	f7ff ff59 	bl	d536 <clock_stop>
    d684:	e7e5      	b.n	d652 <nrfx_clock_start+0x26>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d686:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    d68a:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    d68e:	3b01      	subs	r3, #1
    d690:	2b01      	cmp	r3, #1
    d692:	d8f4      	bhi.n	d67e <nrfx_clock_start+0x52>
    p_reg->INTENSET = mask;
    d694:	2302      	movs	r3, #2
    d696:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    d69a:	e7e9      	b.n	d670 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d69c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d6a0:	2200      	movs	r2, #0
    d6a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d6a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d6aa:	2201      	movs	r2, #1
    d6ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d6b0:	601a      	str	r2, [r3, #0]
}
    d6b2:	e7dd      	b.n	d670 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d6b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d6b8:	2200      	movs	r2, #0
    d6ba:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d6be:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    d6c2:	f44f 7200 	mov.w	r2, #512	; 0x200
    d6c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d6ca:	2201      	movs	r2, #1
    d6cc:	621a      	str	r2, [r3, #32]
}
    d6ce:	e7cf      	b.n	d670 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d6d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    d6d4:	2200      	movs	r2, #0
    d6d6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d6da:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    d6de:	f44f 7280 	mov.w	r2, #256	; 0x100
    d6e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d6e6:	2201      	movs	r2, #1
    d6e8:	619a      	str	r2, [r3, #24]
}
    d6ea:	e7c1      	b.n	d670 <nrfx_clock_start+0x44>

0000d6ec <nrfx_clock_stop>:
    clock_stop(domain);
    d6ec:	f7ff bf23 	b.w	d536 <clock_stop>

0000d6f0 <nrf_gpio_reconfigure>:
{
    d6f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d6f2:	4617      	mov	r7, r2
    d6f4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    d6f8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d6fa:	a801      	add	r0, sp, #4
{
    d6fc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d6fe:	f7f9 fa71 	bl	6be4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d702:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    d704:	2f00      	cmp	r7, #0
    d706:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    d70a:	bf14      	ite	ne
    d70c:	2302      	movne	r3, #2
    d70e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d710:	2900      	cmp	r1, #0
    d712:	bf18      	it	ne
    d714:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d718:	2d00      	cmp	r5, #0
    d71a:	bf14      	ite	ne
    d71c:	f04f 0c0c 	movne.w	ip, #12
    d720:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    d724:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    d726:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    d72a:	bf14      	ite	ne
    d72c:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    d730:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    d734:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    d736:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    d73a:	bf14      	ite	ne
    d73c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    d740:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d744:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    d748:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    d74c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d750:	b101      	cbz	r1, d754 <nrf_gpio_reconfigure+0x64>
    d752:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    d754:	b10f      	cbz	r7, d75a <nrf_gpio_reconfigure+0x6a>
    d756:	783f      	ldrb	r7, [r7, #0]
    d758:	007f      	lsls	r7, r7, #1
    d75a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    d75c:	b10d      	cbz	r5, d762 <nrf_gpio_reconfigure+0x72>
    d75e:	782d      	ldrb	r5, [r5, #0]
    d760:	00ad      	lsls	r5, r5, #2
    d762:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    d764:	b10c      	cbz	r4, d76a <nrf_gpio_reconfigure+0x7a>
    d766:	7822      	ldrb	r2, [r4, #0]
    d768:	0214      	lsls	r4, r2, #8
    d76a:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    d76c:	b10e      	cbz	r6, d772 <nrf_gpio_reconfigure+0x82>
    d76e:	7836      	ldrb	r6, [r6, #0]
    d770:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d772:	432c      	orrs	r4, r5
    d774:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    d776:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    d77a:	b003      	add	sp, #12
    d77c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d77e <nrf_gpio_cfg_sense_set>:
{
    d77e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d780:	f10d 030f 	add.w	r3, sp, #15
    d784:	9301      	str	r3, [sp, #4]
    d786:	2300      	movs	r3, #0
{
    d788:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d78c:	461a      	mov	r2, r3
    d78e:	4619      	mov	r1, r3
    d790:	9300      	str	r3, [sp, #0]
    d792:	f7ff ffad 	bl	d6f0 <nrf_gpio_reconfigure>
}
    d796:	b005      	add	sp, #20
    d798:	f85d fb04 	ldr.w	pc, [sp], #4

0000d79c <partial_word_create>:
    value32 = 0xFFFFFFFF;
    d79c:	f04f 33ff 	mov.w	r3, #4294967295
{
    d7a0:	b082      	sub	sp, #8
    value32 = 0xFFFFFFFF;
    d7a2:	9301      	str	r3, [sp, #4]
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    d7a4:	f000 0003 	and.w	r0, r0, #3
    d7a8:	ab01      	add	r3, sp, #4
    d7aa:	4418      	add	r0, r3
    d7ac:	440a      	add	r2, r1
    for (uint32_t i = 0; i < bytes_count; i++)
    d7ae:	4291      	cmp	r1, r2
    d7b0:	d102      	bne.n	d7b8 <partial_word_create+0x1c>
}
    d7b2:	9801      	ldr	r0, [sp, #4]
    d7b4:	b002      	add	sp, #8
    d7b6:	4770      	bx	lr
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    d7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
    d7bc:	f800 3b01 	strb.w	r3, [r0], #1
    for (uint32_t i = 0; i < bytes_count; i++)
    d7c0:	e7f5      	b.n	d7ae <partial_word_create+0x12>

0000d7c2 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    d7c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d7c6:	4770      	bx	lr

0000d7c8 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    d7c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d7cc:	4770      	bx	lr

0000d7ce <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    d7ce:	f44f 7080 	mov.w	r0, #256	; 0x100
    d7d2:	4770      	bx	lr

0000d7d4 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    d7d4:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    d7d6:	f7f9 fe27 	bl	7428 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    d7da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    d7de:	f7f9 b9a9 	b.w	6b34 <nrfx_clock_irq_handler>

0000d7e2 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
    d7e2:	2100      	movs	r1, #0
    d7e4:	f7f9 bee2 	b.w	75ac <nrf_gpio_cfg.constprop.0>

0000d7e8 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    d7e8:	2302      	movs	r3, #2
    d7ea:	f7f9 be55 	b.w	7498 <qspi_xfer>

0000d7ee <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    d7ee:	2303      	movs	r3, #3
    d7f0:	f7f9 be52 	b.w	7498 <qspi_xfer>

0000d7f4 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    d7f4:	2100      	movs	r1, #0
    d7f6:	2002      	movs	r0, #2
    d7f8:	f7fa b8dc 	b.w	79b4 <nrfx_qspi_erase>

0000d7fc <nrfx_usbd_consumer>:
{
    d7fc:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    d7fe:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    d800:	680d      	ldr	r5, [r1, #0]
    d802:	42a3      	cmp	r3, r4
        p_next->size = 0;
    d804:	bf8f      	iteee	hi
    d806:	2100      	movhi	r1, #0
        p_next->p_data = p_transfer->p_data;
    d808:	e9c0 5300 	strdls	r5, r3, [r0]
        size -= data_size;
    d80c:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    d80e:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    d810:	bf8e      	itee	hi
    d812:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    d816:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    d818:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    d81a:	429a      	cmp	r2, r3
    d81c:	d103      	bne.n	d826 <nrfx_usbd_consumer+0x2a>
    d81e:	1e20      	subs	r0, r4, #0
    d820:	bf18      	it	ne
    d822:	2001      	movne	r0, #1
}
    d824:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    d826:	2000      	movs	r0, #0
    d828:	e7fc      	b.n	d824 <nrfx_usbd_consumer+0x28>

0000d82a <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    d82a:	684b      	ldr	r3, [r1, #4]
{
    d82c:	b510      	push	{r4, lr}
    d82e:	429a      	cmp	r2, r3
    d830:	bf28      	it	cs
    d832:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    d834:	680c      	ldr	r4, [r1, #0]
    p_next->size = tx_size;
    d836:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    d83a:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    d83c:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    d83e:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d840:	441a      	add	r2, r3
}
    d842:	3800      	subs	r0, #0
    d844:	bf18      	it	ne
    d846:	2001      	movne	r0, #1
    p_transfer->p_data.addr += tx_size;
    d848:	600a      	str	r2, [r1, #0]
}
    d84a:	bd10      	pop	{r4, pc}

0000d84c <nrfx_usbd_feeder_ram_zlp>:
{
    d84c:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    d84e:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d850:	680b      	ldr	r3, [r1, #0]
    d852:	42a2      	cmp	r2, r4
    d854:	bf28      	it	cs
    d856:	4622      	movcs	r2, r4
    d858:	2a00      	cmp	r2, #0
    d85a:	bf14      	ite	ne
    d85c:	461d      	movne	r5, r3
    d85e:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
    d860:	eba4 0402 	sub.w	r4, r4, r2
    p_next->size = tx_size;
    d864:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->p_data.addr += tx_size;
    d868:	441a      	add	r2, r3
}
    d86a:	bf14      	ite	ne
    d86c:	2001      	movne	r0, #1
    d86e:	2000      	moveq	r0, #0
    p_transfer->size -= tx_size;
    d870:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d872:	600a      	str	r2, [r1, #0]
}
    d874:	bd30      	pop	{r4, r5, pc}

0000d876 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    d876:	f010 0f80 	tst.w	r0, #128	; 0x80
    d87a:	bf14      	ite	ne
    d87c:	2300      	movne	r3, #0
    d87e:	2310      	moveq	r3, #16
    d880:	f000 000f 	and.w	r0, r0, #15
}
    d884:	4418      	add	r0, r3
    d886:	4770      	bx	lr

0000d888 <ev_started_handler>:
}
    d888:	4770      	bx	lr

0000d88a <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    d88a:	2087      	movs	r0, #135	; 0x87
    d88c:	f7fa b9d2 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d890 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    d890:	2086      	movs	r0, #134	; 0x86
    d892:	f7fa b9cf 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d896 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    d896:	2085      	movs	r0, #133	; 0x85
    d898:	f7fa b9cc 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d89c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    d89c:	2084      	movs	r0, #132	; 0x84
    d89e:	f7fa b9c9 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d8a2 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    d8a2:	2083      	movs	r0, #131	; 0x83
    d8a4:	f7fa b9c6 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d8a8 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    d8a8:	2082      	movs	r0, #130	; 0x82
    d8aa:	f7fa b9c3 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d8ae <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    d8ae:	2081      	movs	r0, #129	; 0x81
    d8b0:	f7fa b9c0 	b.w	7c34 <nrf_usbd_epin_dma_handler>

0000d8b4 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    d8b4:	f7fa b9da 	b.w	7c6c <nrf_usbd_ep0in_dma_handler>

0000d8b8 <nrfx_usbd_ep_max_packet_size_set>:
{
    d8b8:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    d8ba:	f7fa f8e1 	bl	7a80 <ep_state_access>
    p_state->max_packet_size = size;
    d8be:	8181      	strh	r1, [r0, #12]
}
    d8c0:	bd08      	pop	{r3, pc}

0000d8c2 <nrfx_usbd_ep_status_get>:
{
    d8c2:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    d8c4:	f7fa f8dc 	bl	7a80 <ep_state_access>
	__asm__ volatile(
    d8c8:	f04f 0220 	mov.w	r2, #32
    d8cc:	f3ef 8311 	mrs	r3, BASEPRI
    d8d0:	f382 8812 	msr	BASEPRI_MAX, r2
    d8d4:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    d8d8:	6882      	ldr	r2, [r0, #8]
    d8da:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    d8dc:	6802      	ldr	r2, [r0, #0]
    d8de:	b92a      	cbnz	r2, d8ec <nrfx_usbd_ep_status_get+0x2a>
    d8e0:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    d8e2:	f383 8811 	msr	BASEPRI, r3
    d8e6:	f3bf 8f6f 	isb	sy
}
    d8ea:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    d8ec:	2004      	movs	r0, #4
    d8ee:	e7f8      	b.n	d8e2 <nrfx_usbd_ep_status_get+0x20>

0000d8f0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    d8f0:	2007      	movs	r0, #7
    d8f2:	f7fa bc91 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d8f6 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    d8f6:	2006      	movs	r0, #6
    d8f8:	f7fa bc8e 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d8fc <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    d8fc:	2005      	movs	r0, #5
    d8fe:	f7fa bc8b 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d902 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    d902:	2004      	movs	r0, #4
    d904:	f7fa bc88 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d908 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    d908:	2003      	movs	r0, #3
    d90a:	f7fa bc85 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d90e <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    d90e:	2002      	movs	r0, #2
    d910:	f7fa bc82 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d914 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    d914:	2001      	movs	r0, #1
    d916:	f7fa bc7f 	b.w	8218 <nrf_usbd_epout_dma_handler>

0000d91a <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    d91a:	f7fa bd79 	b.w	8410 <usbd_ep_abort>

0000d91e <z_device_state_init>:
}
    d91e:	4770      	bx	lr

0000d920 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    d920:	b138      	cbz	r0, d932 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    d922:	68c3      	ldr	r3, [r0, #12]
    d924:	8818      	ldrh	r0, [r3, #0]
    d926:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d92a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    d92e:	4258      	negs	r0, r3
    d930:	4158      	adcs	r0, r3
}
    d932:	4770      	bx	lr

0000d934 <arch_system_halt>:
	__asm__ volatile(
    d934:	f04f 0220 	mov.w	r2, #32
    d938:	f3ef 8311 	mrs	r3, BASEPRI
    d93c:	f382 8812 	msr	BASEPRI_MAX, r2
    d940:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    d944:	e7fe      	b.n	d944 <arch_system_halt+0x10>

0000d946 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    d946:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    d948:	f7ff fff4 	bl	d934 <arch_system_halt>

0000d94c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d94e:	4605      	mov	r5, r0
    d950:	460e      	mov	r6, r1
    d952:	f04f 0320 	mov.w	r3, #32
    d956:	f3ef 8711 	mrs	r7, BASEPRI
    d95a:	f383 8812 	msr	BASEPRI_MAX, r3
    d95e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    d962:	f7fb fe0f 	bl	9584 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    d966:	4631      	mov	r1, r6
    d968:	4604      	mov	r4, r0
    d96a:	4628      	mov	r0, r5
    d96c:	f7ff ffeb 	bl	d946 <k_sys_fatal_error_handler>
	__asm__ volatile(
    d970:	f387 8811 	msr	BASEPRI, r7
    d974:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    d978:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    d97a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d97e:	f7f6 bb29 	b.w	3fd4 <z_impl_k_thread_abort>

0000d982 <z_early_memset>:
	(void) memset(dst, c, n);
    d982:	f7fd bdcd 	b.w	b520 <memset>

0000d986 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    d986:	f7fd bdc0 	b.w	b50a <memcpy>

0000d98a <k_mem_slab_init>:
{
    d98a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    d98c:	2400      	movs	r4, #0
    d98e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    d990:	ea41 0402 	orr.w	r4, r1, r2
    d994:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    d998:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    d99c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    d99e:	d10c      	bne.n	d9ba <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    d9a0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    d9a2:	42a3      	cmp	r3, r4
    d9a4:	d103      	bne.n	d9ae <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    d9a6:	e9c0 0000 	strd	r0, r0, [r0]
}
    d9aa:	2000      	movs	r0, #0
}
    d9ac:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    d9ae:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    d9b0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    d9b2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    d9b4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    d9b6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    d9b8:	e7f3      	b.n	d9a2 <k_mem_slab_init+0x18>
		return -EINVAL;
    d9ba:	f06f 0015 	mvn.w	r0, #21
	return rc;
    d9be:	e7f5      	b.n	d9ac <k_mem_slab_init+0x22>

0000d9c0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9c2:	4604      	mov	r4, r0
    d9c4:	460d      	mov	r5, r1
	__asm__ volatile(
    d9c6:	f04f 0320 	mov.w	r3, #32
    d9ca:	f3ef 8611 	mrs	r6, BASEPRI
    d9ce:	f383 8812 	msr	BASEPRI_MAX, r3
    d9d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    d9d6:	6947      	ldr	r7, [r0, #20]
    d9d8:	b977      	cbnz	r7, d9f8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    d9da:	f000 f9b1 	bl	dd40 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    d9de:	b158      	cbz	r0, d9f8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    d9e0:	682a      	ldr	r2, [r5, #0]
    d9e2:	6747      	str	r7, [r0, #116]	; 0x74
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    d9e4:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    d9e6:	f000 f94f 	bl	dc88 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    d9ea:	4631      	mov	r1, r6
    d9ec:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    d9f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    d9f4:	f7fb bba8 	b.w	9148 <z_reschedule>
	**(char ***) mem = slab->free_list;
    d9f8:	682b      	ldr	r3, [r5, #0]
    d9fa:	6962      	ldr	r2, [r4, #20]
    d9fc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    d9fe:	682b      	ldr	r3, [r5, #0]
    da00:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    da02:	69a3      	ldr	r3, [r4, #24]
    da04:	3b01      	subs	r3, #1
    da06:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    da08:	f386 8811 	msr	BASEPRI, r6
    da0c:	f3bf 8f6f 	isb	sy
}
    da10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000da12 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    da12:	f3ef 8005 	mrs	r0, IPSR
}
    da16:	3800      	subs	r0, #0
    da18:	bf18      	it	ne
    da1a:	2001      	movne	r0, #1
    da1c:	4770      	bx	lr

0000da1e <z_impl_k_thread_name_set>:
}
    da1e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    da22:	4770      	bx	lr

0000da24 <z_impl_k_thread_start>:
	z_sched_start(thread);
    da24:	f7fb bc06 	b.w	9234 <z_sched_start>

0000da28 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    da28:	b508      	push	{r3, lr}
	__asm__ volatile(
    da2a:	f04f 0220 	mov.w	r2, #32
    da2e:	f3ef 8311 	mrs	r3, BASEPRI
    da32:	f382 8812 	msr	BASEPRI_MAX, r2
    da36:	f3bf 8f6f 	isb	sy
    da3a:	f7f6 f82f 	bl	3a9c <arch_cpu_idle>
    da3e:	e7f4      	b.n	da2a <idle+0x2>

0000da40 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    da40:	f990 300e 	ldrsb.w	r3, [r0, #14]
    da44:	428b      	cmp	r3, r1
    da46:	d001      	beq.n	da4c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    da48:	f7fb bc60 	b.w	930c <z_set_prio>
}
    da4c:	2000      	movs	r0, #0
    da4e:	4770      	bx	lr

0000da50 <z_impl_k_mutex_init>:
{
    da50:	4603      	mov	r3, r0
	mutex->owner = NULL;
    da52:	2000      	movs	r0, #0
    da54:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    da58:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    da5c:	4770      	bx	lr

0000da5e <queue_insert>:
{
    da5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    da62:	4699      	mov	r9, r3
    da64:	4604      	mov	r4, r0
    da66:	460d      	mov	r5, r1
    da68:	4690      	mov	r8, r2
    da6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    da6e:	f100 0708 	add.w	r7, r0, #8
    da72:	f04f 0220 	mov.w	r2, #32
    da76:	f3ef 8611 	mrs	r6, BASEPRI
    da7a:	f382 8812 	msr	BASEPRI_MAX, r2
    da7e:	f3bf 8f6f 	isb	sy
	if (is_append) {
    da82:	b103      	cbz	r3, da86 <queue_insert+0x28>
	return list->tail;
    da84:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    da86:	4638      	mov	r0, r7
    da88:	f000 f95a 	bl	dd40 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    da8c:	b158      	cbz	r0, daa6 <queue_insert+0x48>
    da8e:	2400      	movs	r4, #0
    da90:	f8c0 8014 	str.w	r8, [r0, #20]
    da94:	6744      	str	r4, [r0, #116]	; 0x74
	z_ready_thread(thread);
    da96:	f000 f8f7 	bl	dc88 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    da9a:	4638      	mov	r0, r7
    da9c:	4631      	mov	r1, r6
    da9e:	f7fb fb53 	bl	9148 <z_reschedule>
	return 0;
    daa2:	2000      	movs	r0, #0
    daa4:	e00c      	b.n	dac0 <queue_insert+0x62>
	if (alloc) {
    daa6:	f1b9 0f00 	cmp.w	r9, #0
    daaa:	d01c      	beq.n	dae6 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    daac:	2108      	movs	r1, #8
    daae:	f7fb ffdf 	bl	9a70 <z_thread_aligned_alloc>
		if (anode == NULL) {
    dab2:	b938      	cbnz	r0, dac4 <queue_insert+0x66>
	__asm__ volatile(
    dab4:	f386 8811 	msr	BASEPRI, r6
    dab8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    dabc:	f06f 000b 	mvn.w	r0, #11
}
    dac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    dac4:	2301      	movs	r3, #1
		anode->data = data;
    dac6:	f8c0 8004 	str.w	r8, [r0, #4]
    daca:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dacc:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dace:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    dad2:	b965      	cbnz	r5, daee <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dad4:	6823      	ldr	r3, [r4, #0]
    dad6:	4313      	orrs	r3, r2
    dad8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dada:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    dadc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dade:	2b00      	cmp	r3, #0
    dae0:	d1db      	bne.n	da9a <queue_insert+0x3c>
	list->tail = node;
    dae2:	6060      	str	r0, [r4, #4]
}
    dae4:	e7d9      	b.n	da9a <queue_insert+0x3c>
}
    dae6:	4640      	mov	r0, r8
	node->next_and_flags = flags;
    dae8:	f8c8 9000 	str.w	r9, [r8]
}
    daec:	e7ee      	b.n	dacc <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    daee:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    daf0:	f033 0303 	bics.w	r3, r3, #3
    daf4:	d10b      	bne.n	db0e <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    daf6:	6002      	str	r2, [r0, #0]
	return list->tail;
    daf8:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    dafa:	b912      	cbnz	r2, db02 <queue_insert+0xa4>
	list->head = node;
    dafc:	e9c4 0000 	strd	r0, r0, [r4]
}
    db00:	e7cb      	b.n	da9a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    db02:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    db04:	f003 0303 	and.w	r3, r3, #3
    db08:	4303      	orrs	r3, r0
    db0a:	6013      	str	r3, [r2, #0]
    db0c:	e7e9      	b.n	dae2 <queue_insert+0x84>
    db0e:	4313      	orrs	r3, r2
    db10:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    db12:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    db14:	f003 0303 	and.w	r3, r3, #3
    db18:	4318      	orrs	r0, r3
    db1a:	6028      	str	r0, [r5, #0]
}
    db1c:	e7bd      	b.n	da9a <queue_insert+0x3c>

0000db1e <z_queue_node_peek>:
{
    db1e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    db20:	4604      	mov	r4, r0
    db22:	b130      	cbz	r0, db32 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    db24:	6802      	ldr	r2, [r0, #0]
    db26:	0793      	lsls	r3, r2, #30
    db28:	d003      	beq.n	db32 <z_queue_node_peek+0x14>
		ret = anode->data;
    db2a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    db2c:	b109      	cbz	r1, db32 <z_queue_node_peek+0x14>
			k_free(anode);
    db2e:	f000 f997 	bl	de60 <k_free>
}
    db32:	4620      	mov	r0, r4
    db34:	bd10      	pop	{r4, pc}

0000db36 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
    db36:	2301      	movs	r3, #1
{
    db38:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    db3a:	9300      	str	r3, [sp, #0]
    db3c:	2300      	movs	r3, #0
{
    db3e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    db40:	4619      	mov	r1, r3
    db42:	f7ff ff8c 	bl	da5e <queue_insert>
}
    db46:	b003      	add	sp, #12
    db48:	f85d fb04 	ldr.w	pc, [sp], #4

0000db4c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    db4c:	b13a      	cbz	r2, db5e <z_impl_k_sem_init+0x12>
    db4e:	428a      	cmp	r2, r1
    db50:	d305      	bcc.n	db5e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    db52:	e9c0 1202 	strd	r1, r2, [r0, #8]
    db56:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    db5a:	2000      	movs	r0, #0
    db5c:	4770      	bx	lr
		return -EINVAL;
    db5e:	f06f 0015 	mvn.w	r0, #21
}
    db62:	4770      	bx	lr

0000db64 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    db64:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    db66:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    db68:	408b      	lsls	r3, r1
    db6a:	ea22 0303 	bic.w	r3, r2, r3
    db6e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    db70:	fa22 f001 	lsr.w	r0, r2, r1
}
    db74:	f000 0001 	and.w	r0, r0, #1
    db78:	4770      	bx	lr

0000db7a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    db7a:	b120      	cbz	r0, db86 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    db7c:	2200      	movs	r2, #0
    db7e:	3080      	adds	r0, #128	; 0x80
    db80:	4611      	mov	r1, r2
    db82:	f000 b905 	b.w	dd90 <z_sched_wake>
}
    db86:	4770      	bx	lr

0000db88 <k_work_init>:
{
    db88:	b538      	push	{r3, r4, r5, lr}
    db8a:	4604      	mov	r4, r0
    db8c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    db8e:	2210      	movs	r2, #16
    db90:	2100      	movs	r1, #0
    db92:	f7fd fcc5 	bl	b520 <memset>
    db96:	6065      	str	r5, [r4, #4]
}
    db98:	bd38      	pop	{r3, r4, r5, pc}

0000db9a <z_work_submit_to_queue>:
{
    db9a:	b513      	push	{r0, r1, r4, lr}
    db9c:	9001      	str	r0, [sp, #4]
    db9e:	4608      	mov	r0, r1
	__asm__ volatile(
    dba0:	f04f 0320 	mov.w	r3, #32
    dba4:	f3ef 8411 	mrs	r4, BASEPRI
    dba8:	f383 8812 	msr	BASEPRI_MAX, r3
    dbac:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    dbb0:	a901      	add	r1, sp, #4
    dbb2:	f7fb fa43 	bl	903c <submit_to_queue_locked>
	__asm__ volatile(
    dbb6:	f384 8811 	msr	BASEPRI, r4
    dbba:	f3bf 8f6f 	isb	sy
}
    dbbe:	b002      	add	sp, #8
    dbc0:	bd10      	pop	{r4, pc}

0000dbc2 <k_work_submit_to_queue>:
{
    dbc2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    dbc4:	f7ff ffe9 	bl	db9a <z_work_submit_to_queue>
	if (ret > 0) {
    dbc8:	1e04      	subs	r4, r0, #0
    dbca:	dd09      	ble.n	dbe0 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    dbcc:	f04f 0320 	mov.w	r3, #32
    dbd0:	f3ef 8011 	mrs	r0, BASEPRI
    dbd4:	f383 8812 	msr	BASEPRI_MAX, r3
    dbd8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    dbdc:	f000 f838 	bl	dc50 <z_reschedule_irqlock>
}
    dbe0:	4620      	mov	r0, r4
    dbe2:	bd10      	pop	{r4, pc}

0000dbe4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    dbe4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    dbe8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    dbea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    dbec:	2300      	movs	r3, #0
	node->prev = NULL;
    dbee:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    dbf2:	4770      	bx	lr

0000dbf4 <unpend_thread_no_timeout>:
{
    dbf4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    dbf6:	f7ff fff5 	bl	dbe4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    dbfa:	7b43      	ldrb	r3, [r0, #13]
    dbfc:	f023 0302 	bic.w	r3, r3, #2
    dc00:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    dc02:	2300      	movs	r3, #0
    dc04:	6083      	str	r3, [r0, #8]
}
    dc06:	bd08      	pop	{r3, pc}

0000dc08 <z_unpend_thread_no_timeout>:
{
    dc08:	b508      	push	{r3, lr}
    dc0a:	f04f 0320 	mov.w	r3, #32
    dc0e:	f3ef 8111 	mrs	r1, BASEPRI
    dc12:	f383 8812 	msr	BASEPRI_MAX, r3
    dc16:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    dc1a:	f7ff ffeb 	bl	dbf4 <unpend_thread_no_timeout>
	__asm__ volatile(
    dc1e:	f381 8811 	msr	BASEPRI, r1
    dc22:	f3bf 8f6f 	isb	sy
}
    dc26:	bd08      	pop	{r3, pc}

0000dc28 <z_unpend_thread>:
{
    dc28:	b510      	push	{r4, lr}
	__asm__ volatile(
    dc2a:	f04f 0320 	mov.w	r3, #32
    dc2e:	f3ef 8411 	mrs	r4, BASEPRI
    dc32:	f383 8812 	msr	BASEPRI_MAX, r3
    dc36:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    dc3a:	f7ff ffdb 	bl	dbf4 <unpend_thread_no_timeout>
	__asm__ volatile(
    dc3e:	f384 8811 	msr	BASEPRI, r4
    dc42:	f3bf 8f6f 	isb	sy
}
    dc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc4a:	3018      	adds	r0, #24
    dc4c:	f000 b8bd 	b.w	ddca <z_abort_timeout>

0000dc50 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    dc50:	4603      	mov	r3, r0
    dc52:	b920      	cbnz	r0, dc5e <z_reschedule_irqlock+0xe>
    dc54:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    dc58:	b90a      	cbnz	r2, dc5e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    dc5a:	f7f5 bf9f 	b.w	3b9c <arch_swap>
    dc5e:	f383 8811 	msr	BASEPRI, r3
    dc62:	f3bf 8f6f 	isb	sy
}
    dc66:	4770      	bx	lr

0000dc68 <z_reschedule_unlocked>:
	__asm__ volatile(
    dc68:	f04f 0320 	mov.w	r3, #32
    dc6c:	f3ef 8011 	mrs	r0, BASEPRI
    dc70:	f383 8812 	msr	BASEPRI_MAX, r3
    dc74:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    dc78:	f7ff bfea 	b.w	dc50 <z_reschedule_irqlock>

0000dc7c <z_priq_dumb_best>:
{
    dc7c:	4603      	mov	r3, r0
	return list->head == list;
    dc7e:	6800      	ldr	r0, [r0, #0]
}
    dc80:	4283      	cmp	r3, r0
    dc82:	bf08      	it	eq
    dc84:	2000      	moveq	r0, #0
    dc86:	4770      	bx	lr

0000dc88 <z_ready_thread>:
{
    dc88:	b510      	push	{r4, lr}
    dc8a:	f04f 0320 	mov.w	r3, #32
    dc8e:	f3ef 8411 	mrs	r4, BASEPRI
    dc92:	f383 8812 	msr	BASEPRI_MAX, r3
    dc96:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    dc9a:	f7fb fa95 	bl	91c8 <ready_thread>
	__asm__ volatile(
    dc9e:	f384 8811 	msr	BASEPRI, r4
    dca2:	f3bf 8f6f 	isb	sy
}
    dca6:	bd10      	pop	{r4, pc}

0000dca8 <z_thread_timeout>:
{
    dca8:	4601      	mov	r1, r0
    dcaa:	b510      	push	{r4, lr}
	__asm__ volatile(
    dcac:	f04f 0320 	mov.w	r3, #32
    dcb0:	f3ef 8411 	mrs	r4, BASEPRI
    dcb4:	f383 8812 	msr	BASEPRI_MAX, r3
    dcb8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    dcbc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    dcc0:	f013 0f28 	tst.w	r3, #40	; 0x28
    dcc4:	d10d      	bne.n	dce2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    dcc6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    dcca:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    dccc:	b10b      	cbz	r3, dcd2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    dcce:	f7ff ff91 	bl	dbf4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    dcd2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    dcd6:	f023 0314 	bic.w	r3, r3, #20
    dcda:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    dcde:	f7fb fa73 	bl	91c8 <ready_thread>
	__asm__ volatile(
    dce2:	f384 8811 	msr	BASEPRI, r4
    dce6:	f3bf 8f6f 	isb	sy
}
    dcea:	bd10      	pop	{r4, pc}

0000dcec <add_to_waitq_locked>:
{
    dcec:	b538      	push	{r3, r4, r5, lr}
    dcee:	4604      	mov	r4, r0
    dcf0:	460d      	mov	r5, r1
	unready_thread(thread);
    dcf2:	f7fb fabd 	bl	9270 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    dcf6:	7b63      	ldrb	r3, [r4, #13]
    dcf8:	f043 0302 	orr.w	r3, r3, #2
    dcfc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    dcfe:	b195      	cbz	r5, dd26 <add_to_waitq_locked+0x3a>
    dd00:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    dd02:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd04:	429d      	cmp	r5, r3
    dd06:	d015      	beq.n	dd34 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dd08:	b1a3      	cbz	r3, dd34 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    dd0a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    dd0e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    dd12:	4291      	cmp	r1, r2
    dd14:	d008      	beq.n	dd28 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    dd16:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    dd18:	2a00      	cmp	r2, #0
    dd1a:	dd05      	ble.n	dd28 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    dd1c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    dd1e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    dd22:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    dd24:	605c      	str	r4, [r3, #4]
}
    dd26:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    dd28:	686a      	ldr	r2, [r5, #4]
    dd2a:	4293      	cmp	r3, r2
    dd2c:	d002      	beq.n	dd34 <add_to_waitq_locked+0x48>
    dd2e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dd30:	2b00      	cmp	r3, #0
    dd32:	d1ec      	bne.n	dd0e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    dd34:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    dd36:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    dd3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    dd3c:	606c      	str	r4, [r5, #4]
}
    dd3e:	e7f2      	b.n	dd26 <add_to_waitq_locked+0x3a>

0000dd40 <z_unpend_first_thread>:
{
    dd40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    dd42:	f04f 0320 	mov.w	r3, #32
    dd46:	f3ef 8511 	mrs	r5, BASEPRI
    dd4a:	f383 8812 	msr	BASEPRI_MAX, r3
    dd4e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    dd52:	f7ff ff93 	bl	dc7c <z_priq_dumb_best>
		if (thread != NULL) {
    dd56:	4604      	mov	r4, r0
    dd58:	b120      	cbz	r0, dd64 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    dd5a:	f7ff ff4b 	bl	dbf4 <unpend_thread_no_timeout>
    dd5e:	3018      	adds	r0, #24
    dd60:	f000 f833 	bl	ddca <z_abort_timeout>
	__asm__ volatile(
    dd64:	f385 8811 	msr	BASEPRI, r5
    dd68:	f3bf 8f6f 	isb	sy
}
    dd6c:	4620      	mov	r0, r4
    dd6e:	bd38      	pop	{r3, r4, r5, pc}

0000dd70 <z_unpend_all>:
{
    dd70:	b538      	push	{r3, r4, r5, lr}
    dd72:	4605      	mov	r5, r0
	int need_sched = 0;
    dd74:	2000      	movs	r0, #0
	return list->head == list;
    dd76:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd78:	42a5      	cmp	r5, r4
    dd7a:	d000      	beq.n	dd7e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    dd7c:	b904      	cbnz	r4, dd80 <z_unpend_all+0x10>
}
    dd7e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    dd80:	4620      	mov	r0, r4
    dd82:	f7ff ff51 	bl	dc28 <z_unpend_thread>
		z_ready_thread(thread);
    dd86:	4620      	mov	r0, r4
    dd88:	f7ff ff7e 	bl	dc88 <z_ready_thread>
		need_sched = 1;
    dd8c:	2001      	movs	r0, #1
    dd8e:	e7f2      	b.n	dd76 <z_unpend_all+0x6>

0000dd90 <z_sched_wake>:
{
    dd90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    dd92:	f04f 0320 	mov.w	r3, #32
    dd96:	f3ef 8511 	mrs	r5, BASEPRI
    dd9a:	f383 8812 	msr	BASEPRI_MAX, r3
    dd9e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    dda2:	f7ff ff6b 	bl	dc7c <z_priq_dumb_best>
		if (thread != NULL) {
    dda6:	4604      	mov	r4, r0
    dda8:	b150      	cbz	r0, ddc0 <z_sched_wake+0x30>
    ddaa:	6741      	str	r1, [r0, #116]	; 0x74
	thread->base.swap_data = data;
    ddac:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    ddae:	f7ff ff21 	bl	dbf4 <unpend_thread_no_timeout>
    ddb2:	3018      	adds	r0, #24
    ddb4:	f000 f809 	bl	ddca <z_abort_timeout>
			ready_thread(thread);
    ddb8:	4620      	mov	r0, r4
    ddba:	f7fb fa05 	bl	91c8 <ready_thread>
			ret = true;
    ddbe:	2001      	movs	r0, #1
	__asm__ volatile(
    ddc0:	f385 8811 	msr	BASEPRI, r5
    ddc4:	f3bf 8f6f 	isb	sy
}
    ddc8:	bd38      	pop	{r3, r4, r5, pc}

0000ddca <z_abort_timeout>:
{
    ddca:	b510      	push	{r4, lr}
	__asm__ volatile(
    ddcc:	f04f 0220 	mov.w	r2, #32
    ddd0:	f3ef 8411 	mrs	r4, BASEPRI
    ddd4:	f382 8812 	msr	BASEPRI_MAX, r2
    ddd8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    dddc:	6803      	ldr	r3, [r0, #0]
    ddde:	b13b      	cbz	r3, ddf0 <z_abort_timeout+0x26>
			remove_timeout(to);
    dde0:	f7fb fc8a 	bl	96f8 <remove_timeout>
			ret = 0;
    dde4:	2000      	movs	r0, #0
	__asm__ volatile(
    dde6:	f384 8811 	msr	BASEPRI, r4
    ddea:	f3bf 8f6f 	isb	sy
}
    ddee:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    ddf0:	f06f 0015 	mvn.w	r0, #21
    ddf4:	e7f7      	b.n	dde6 <z_abort_timeout+0x1c>

0000ddf6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ddf6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ddf8:	f7fb fd64 	bl	98c4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ddfc:	bd08      	pop	{r3, pc}

0000ddfe <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    ddfe:	f7fb bd61 	b.w	98c4 <sys_clock_tick_get>

0000de02 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    de02:	b108      	cbz	r0, de08 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    de04:	f7f3 bef8 	b.w	1bf8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    de08:	4770      	bx	lr

0000de0a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    de0a:	f1b1 3fff 	cmp.w	r1, #4294967295
    de0e:	bf08      	it	eq
    de10:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    de14:	b538      	push	{r3, r4, r5, lr}
    de16:	4605      	mov	r5, r0
    de18:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    de1a:	d01d      	beq.n	de58 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    de1c:	ea51 0300 	orrs.w	r3, r1, r0
    de20:	d103      	bne.n	de2a <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    de22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    de26:	f7fb bd4d 	b.w	98c4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    de2a:	f06f 0301 	mvn.w	r3, #1
    de2e:	1a18      	subs	r0, r3, r0
    de30:	f04f 33ff 	mov.w	r3, #4294967295
    de34:	eb63 0101 	sbc.w	r1, r3, r1
    de38:	2900      	cmp	r1, #0
    de3a:	da0c      	bge.n	de56 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    de3c:	f7fb fd42 	bl	98c4 <sys_clock_tick_get>
    de40:	2d01      	cmp	r5, #1
    de42:	4622      	mov	r2, r4
    de44:	f174 0400 	sbcs.w	r4, r4, #0
    de48:	462b      	mov	r3, r5
    de4a:	bfbc      	itt	lt
    de4c:	2301      	movlt	r3, #1
    de4e:	2200      	movlt	r2, #0
    de50:	1818      	adds	r0, r3, r0
    de52:	eb41 0102 	adc.w	r1, r1, r2
}
    de56:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    de58:	f04f 30ff 	mov.w	r0, #4294967295
    de5c:	4601      	mov	r1, r0
    de5e:	e7fa      	b.n	de56 <sys_clock_timeout_end_calc+0x4c>

0000de60 <k_free>:
	if (ptr != NULL) {
    de60:	b120      	cbz	r0, de6c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    de62:	1f01      	subs	r1, r0, #4
    de64:	f850 0c04 	ldr.w	r0, [r0, #-4]
    de68:	f000 b84b 	b.w	df02 <k_heap_free>
}
    de6c:	4770      	bx	lr

0000de6e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    de6e:	4770      	bx	lr

0000de70 <k_heap_init>:
{
    de70:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    de72:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    de76:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    de7a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    de7c:	f7fc bd5b 	b.w	a936 <sys_heap_init>

0000de80 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de84:	b085      	sub	sp, #20
    de86:	4606      	mov	r6, r0
    de88:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    de8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    de8e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    de90:	f7ff ffbb 	bl	de0a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    de94:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    de98:	4605      	mov	r5, r0
    de9a:	460f      	mov	r7, r1
	__asm__ volatile(
    de9c:	f04f 0320 	mov.w	r3, #32
    dea0:	f3ef 8411 	mrs	r4, BASEPRI
    dea4:	f383 8812 	msr	BASEPRI_MAX, r3
    dea8:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    deac:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    deb0:	464a      	mov	r2, r9
    deb2:	4641      	mov	r1, r8
    deb4:	4630      	mov	r0, r6
    deb6:	f7fc fcc3 	bl	a840 <sys_heap_aligned_alloc>
    deba:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    debc:	f7fb fd02 	bl	98c4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    dec0:	9b03      	ldr	r3, [sp, #12]
    dec2:	b13b      	cbz	r3, ded4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    dec4:	f384 8811 	msr	BASEPRI, r4
    dec8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    decc:	4618      	mov	r0, r3
    dece:	b005      	add	sp, #20
    ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    ded4:	1a28      	subs	r0, r5, r0
    ded6:	eb67 0101 	sbc.w	r1, r7, r1
    deda:	2801      	cmp	r0, #1
    dedc:	f171 0200 	sbcs.w	r2, r1, #0
    dee0:	dbf0      	blt.n	dec4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    dee2:	e9cd 0100 	strd	r0, r1, [sp]
    dee6:	465a      	mov	r2, fp
    dee8:	4621      	mov	r1, r4
    deea:	4650      	mov	r0, sl
    deec:	f7fb f9fe 	bl	92ec <z_pend_curr>
	__asm__ volatile(
    def0:	f04f 0320 	mov.w	r3, #32
    def4:	f3ef 8411 	mrs	r4, BASEPRI
    def8:	f383 8812 	msr	BASEPRI_MAX, r3
    defc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    df00:	e7d6      	b.n	deb0 <k_heap_aligned_alloc+0x30>

0000df02 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    df02:	b538      	push	{r3, r4, r5, lr}
    df04:	4604      	mov	r4, r0
    df06:	f04f 0320 	mov.w	r3, #32
    df0a:	f3ef 8511 	mrs	r5, BASEPRI
    df0e:	f383 8812 	msr	BASEPRI_MAX, r3
    df12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    df16:	f7fc fc4a 	bl	a7ae <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    df1a:	f104 000c 	add.w	r0, r4, #12
    df1e:	f7ff ff27 	bl	dd70 <z_unpend_all>
    df22:	b130      	cbz	r0, df32 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    df24:	4629      	mov	r1, r5
    df26:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    df2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    df2e:	f7fb b90b 	b.w	9148 <z_reschedule>
	__asm__ volatile(
    df32:	f385 8811 	msr	BASEPRI, r5
    df36:	f3bf 8f6f 	isb	sy
}
    df3a:	bd38      	pop	{r3, r4, r5, pc}

0000df3c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    df3c:	4770      	bx	lr
